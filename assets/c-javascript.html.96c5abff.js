import{_ as p,r as o,o as c,c as l,b as n,d as s,a as e,e as a}from"./app.b32f6c43.js";const i={},u=a(`<h2 id="一-ecmascript" tabindex="-1"><a class="header-anchor" href="#一-ecmascript" aria-hidden="true">#</a> （一）ECMAScript</h2><h3 id="_01-注释" tabindex="-1"><a class="header-anchor" href="#_01-注释" aria-hidden="true">#</a> 01 - 注释</h3><ul><li>语句可以省略分号会自动插入分号，但有些情况下无法正确识别，例如上一句的结尾为括号或中括号时。</li><li><code>&lt;script&gt;</code> 标签如果设置了 <code>src</code> 属性，<code>&lt;script&gt;</code> 标签的内容将会被忽略，可以设置多个 <code>&lt;script&gt;</code> 标签。</li><li><code>&quot;use strict&quot;</code> 开启严格模式并激活新特性，要在代码顶部添加，<code>class</code> 与 <code>module</code> 中会自动开启该模式。</li><li>单行注释：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 单行注释</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>多行注释：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 多行
   注释
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_02-变量" tabindex="-1"><a class="header-anchor" href="#_02-变量" aria-hidden="true">#</a> 02 - 变量</h3><ul><li>命名仅可字母、数字、$、_ 且命名首字符非数字，建议使用小驼峰命名法。</li><li>常量赋值后不能被修改，建议使用大写形式。</li></ul><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>let</td><td>声明变量</td></tr><tr><td>const</td><td>声明常量</td></tr><tr><td>var</td><td>老旧（不建议使用）</td></tr></tbody></table><h3 id="_03-数据类型" tabindex="-1"><a class="header-anchor" href="#_03-数据类型" aria-hidden="true">#</a> 03 - 数据类型</h3><ul><li>JavaScript 是动态类型语言，有8种数据类型：7种原始类型，1种引用类型：</li></ul><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>null</td><td>无、空、值未知，是个特殊值</td></tr><tr><td>undefined</td><td>未赋值、未定义</td></tr><tr><td>Number</td><td>整数、浮点数、Infinity（无穷大）、NaN（非数值），数值运算是安全的，可以除0</td></tr><tr><td>String</td><td>&quot;字符串&quot;、&#39;字符串&#39;、&#39;反引号用于功能扩展\${变量名}&#39;</td></tr><tr><td>Boolean</td><td>true、false</td></tr><tr><td>BigInt</td><td>用于表示大于2的253次方-1和小于2的-253次方的整数，数字尾部加n，代表此类型</td></tr><tr><td>Symbol</td><td>用于创建对象属性的唯一标识符</td></tr><tr><td>Object</td><td>存储数据集合和更复杂的实体</td></tr></tbody></table><ul><li><code>typeof(...)</code> 用于返回数据类型。</li><li><code>null</code> 返回对象类型，是 <code>typeof(...)</code> 的错误，并非真正的对象。</li><li>函数返回 <code>function</code> ，函数隶属于对象。</li></ul><h3 id="_04-类型转换" tabindex="-1"><a class="header-anchor" href="#_04-类型转换" aria-hidden="true">#</a> 04 - 类型转换</h3><table><thead><tr><th>转换</th><th>描述</th></tr></thead><tbody><tr><td>String(...)</td><td>转换为字符串类型</td></tr><tr><td>Number(...)</td><td>转换为数字型类型</td></tr><tr><td></td><td>undefined 转换为 NaN</td></tr><tr><td></td><td>null 转换为 0</td></tr><tr><td>Boolean(...)</td><td>转换为布尔类型</td></tr><tr><td></td><td>非空字符串均为 <code>true</code></td></tr></tbody></table><h3 id="_05-运算符" tabindex="-1"><a class="header-anchor" href="#_05-运算符" aria-hidden="true">#</a> 05 - 运算符</h3><table><thead><tr><th>一元运算符</th><th>描述</th></tr></thead><tbody><tr><td>let x = -1;</td><td>表示负数</td></tr><tr><td>+true</td><td>转数字型</td></tr></tbody></table><table><thead><tr><th>二元运算符</th><th>描述</th></tr></thead><tbody><tr><td>a + b</td><td>加法，任一运算元有字符串时为拼接</td></tr><tr><td>a - b</td><td>减法</td></tr><tr><td>a * b</td><td>乘法</td></tr><tr><td>a / b</td><td>除法</td></tr><tr><td>a % b</td><td>取余</td></tr><tr><td>a ** b</td><td>幂运算</td></tr></tbody></table><ul><li>遵循从左向右运算。</li></ul><table><thead><tr><th>赋值运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>赋值</td></tr><tr><td>+=</td><td>相加并赋值</td></tr><tr><td>-=</td><td>相减并赋值</td></tr><tr><td>*=</td><td>相乘并赋值</td></tr><tr><td>/=</td><td>相除并赋值</td></tr></tbody></table><table><thead><tr><th>自增、自减</th><th>描述</th></tr></thead><tbody><tr><td>a++</td><td>后置自增，先返回自身后自增</td></tr><tr><td>++a</td><td>前置自增，先自增再返回</td></tr><tr><td>b--</td><td>后置自减，先返回自身后自减</td></tr><tr><td>--b</td><td>前置自减，先自减再返回</td></tr></tbody></table><table><thead><tr><th>逗号运算符</th><th>描述</th></tr></thead><tbody><tr><td>a, b</td><td>返回最后一个结果，优先级低于赋值</td></tr></tbody></table><table><thead><tr><th>位运算</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>~</td><td>按位非</td></tr><tr><td>&lt;&lt;</td><td>按位左移</td></tr><tr><td>&gt;&gt;</td><td>按位右移</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td></tr></tbody></table><ul><li>32位整数。</li></ul><h3 id="_06-值比较" tabindex="-1"><a class="header-anchor" href="#_06-值比较" aria-hidden="true">#</a> 06 - 值比较</h3><ul><li>比较后返回的结果是布尔值。</li><li>不同类型之间先转数字。</li><li><code>null</code> 和 <code>undefined</code> 仅在相等性运算中不转换，它们之间 <code>==</code> 相等、 <code>===</code> 不相等，仅仅等于对方而不等于任何其他值。</li><li>字符串按字典（非真实字典）顺序挨个比较。</li></ul><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>&gt;、&gt;=</td><td>大于、大于等于</td></tr><tr><td>&lt;、&lt;=</td><td>小于、小于等于</td></tr><tr><td>==</td><td>值相等</td></tr><tr><td>!=</td><td>值不相等</td></tr><tr><td>===</td><td>值与类型相等</td></tr><tr><td>!==</td><td>值与类型不相等</td></tr></tbody></table><h3 id="_07-三元运算" tabindex="-1"><a class="header-anchor" href="#_07-三元运算" aria-hidden="true">#</a> 07 - 三元运算</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 结果为真，返回 value1，否则返回 value2</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> condition <span class="token operator">?</span> value1 <span class="token operator">:</span> value2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以使用多个问号。</li><li>禁止使用如 <code>break</code>、<code>continue</code></li></ul><h3 id="_08-逻辑运算" tabindex="-1"><a class="header-anchor" href="#_08-逻辑运算" aria-hidden="true">#</a> 08 - 逻辑运算</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>||</td><td>或运算，一真则真，全假为假，连续或运算返回第一个真值，无真值返回最后一个值，短路求值</td></tr><tr><td>&amp;&amp;</td><td>与运算，一假则假，全真为真，连续与运算返回第一个假值，无假值返回最后一个值，短路求值，优先级高于 ||</td></tr><tr><td>！</td><td>布尔非运算，!!可用于转布尔值</td></tr><tr><td>??</td><td>空值合并运算，返回第一个非 null 与 undefined 的值，否则返回最后一个值</td></tr></tbody></table><ul><li><code>??</code> 常用于提供默认值。</li><li><code>??</code> 与 <code>&amp;&amp; ||</code> 一块使用需要添加括号标记优先级。</li></ul><h3 id="_09-if" tabindex="-1"><a class="header-anchor" href="#_09-if" aria-hidden="true">#</a> 09 - if</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ---------</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// ----------</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// ---------</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>只有一条语句可以省略 {}</li></ul><h3 id="_10-switch" tabindex="-1"><a class="header-anchor" href="#_10-switch" aria-hidden="true">#</a> 10 - switch</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token literal-property property">n1</span><span class="token operator">:</span>
  <span class="token operator">...</span>
  <span class="token keyword">break</span>
  <span class="token keyword">case</span> <span class="token literal-property property">n2</span><span class="token operator">:</span>
  <span class="token operator">...</span>
  <span class="token keyword">break</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>()</code> 内为 <code>===</code></li></ul><h3 id="_11-while" tabindex="-1"><a class="header-anchor" href="#_11-while" aria-hidden="true">#</a> 11 - while</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ----------</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// ----------</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>单体循环可以省略 {}</li></ul><h3 id="_12-for" tabindex="-1"><a class="header-anchor" href="#_12-for" aria-hidden="true">#</a> 12 - for</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>单体循环可以省略 <code>{}</code></li><li><code>()</code> 内的三条语句都可以省略，分号不能省略。</li></ul><table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>用于结束循环</td></tr><tr><td>continue</td><td>用于结束本次循环，继续下一次循环</td></tr></tbody></table><ul><li>标签，用于跳出多层循环。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>

<span class="token comment">// outer 标签</span>
<span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    num <span class="token operator">=</span> b <span class="token operator">*</span> c
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">break</span> outer
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-函数" tabindex="-1"><a class="header-anchor" href="#_13-函数" aria-hidden="true">#</a> 13 - 函数</h3><ul><li>函数即行为，字符串或数字等常规值代表数据，同时函数也是值，表示一个行为的值。</li><li>局部变量：在函数内声明，仅在函数内可见。</li><li>全局变量（外部变量）：函数之外声明，全局可用，但应尽量减少使用。</li><li>声明同名变量，函数会遮蔽外部变量使用局部变量。</li></ul><p><strong>（1）“函数声明”，声明在定义之前就可以被调用：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">funcName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">funcName</span><span class="token punctuation">(</span><span class="token parameter">parameter1<span class="token punctuation">,</span> parameter2<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token function">funcName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）“函数表达式”，代码执行到达时被创建，仅从那一刻起可用：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">funcName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">parameter1<span class="token punctuation">,</span> parameter2<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token function">funcName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 可以被拷贝</span>
<span class="token keyword">let</span> copyFunc <span class="token operator">=</span> funcName
<span class="token function">copyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>未被传递值的参数，被赋予 <code>undefined</code></li><li>可以为参数设置默认值。</li><li>空值 <code>return</code> 或没有 <code>return</code> 返回值为 <code>undefined</code></li><li>命名常用前缀：<code>get...</code>、<code>calc...</code>、<code>create...</code>、<code>check...</code></li><li>回调函数/匿名函数：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ask</span><span class="token punctuation">(</span><span class="token parameter">question<span class="token punctuation">,</span> yes<span class="token punctuation">,</span> no</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">yes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span> <span class="token function">no</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">ask</span><span class="token punctuation">(</span>
  <span class="token string">&quot;你吃饭了吗?&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 回调，匿名</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;你吃了&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;你没吃&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）“箭头函数”，优于函数表达式：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> <span class="token number">2</span>
<span class="token function">double</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">return</span> <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不使用 <code>{}</code> 会自动返回值。</li></ul><h3 id="_14-浏览器调试" tabindex="-1"><a class="header-anchor" href="#_14-浏览器调试" aria-hidden="true">#</a> 14 - 浏览器调试</h3><ul><li>调试是指在一个脚本中找出并修复错误的过程。</li><li>断点是调试器会自动暂停 JavaScript 执行的地方，当代码被暂停时，可以检查当前的变量，在控制台执行命令等等。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">debugger</span> <span class="token comment">// 调试器会在此处暂停</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-代码风格" tabindex="-1"><a class="header-anchor" href="#_15-代码风格" aria-hidden="true">#</a> 15 - 代码风格</h3><ul><li>没有什么规则是必须的，规范、易懂、优雅就是好的代码风格。</li></ul><h3 id="_16-自动化测试" tabindex="-1"><a class="header-anchor" href="#_16-自动化测试" aria-hidden="true">#</a> 16 - 自动化测试</h3><p>待更新...</p><h3 id="_17-对象" tabindex="-1"><a class="header-anchor" href="#_17-对象" aria-hidden="true">#</a> 17 - 对象</h3><ul><li>对象是用来存储键值对和更复杂的实体，是具有一些特殊特性的关联数组。</li></ul><p><strong>（1）构造函数方式创建对象：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）字面量方式创建对象：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>属性以键值对的形式存在，可以多个词汇命名属性的键，但是需要添加引号。</li><li>访问属性：<code>user1.name</code> 点方法、<code>user1[&quot;likes birds&quot;]</code> 方括号访问多词属性。</li><li>添加属性：<code>user1.age = 30</code></li><li>删除属性：<code>delete user1.age</code></li><li>判断属性是否存在：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span> <span class="token keyword">in</span> user1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>计算属性：方括号比点符号更加强大，允许任何属性名和变量。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> fruit <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;你喜欢吃什么水果？&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>fruit<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>属性值简写：对象的属性名不受限制，可以为保留字，其他类型会被自动地转换为字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeUser</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span> <span class="token comment">// 与 name: name 相同</span>
    age<span class="token punctuation">,</span> <span class="token comment">// 与 age: age 相同</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>遍历对象属性的键：<code>for...in...</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>遍历对象属性的值：<code>for...of...</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> user1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JavaScript 能够被访问任何属性，即使属性不存在，读取不存在的属性只会得到 <code>undefined</code></li><li>对象属性顺序，整数属性会被进行排序，其他属性则按照创建的顺序显示，可以在整数属性前添加 <code>+</code> 解决自动排序。</li></ul><h3 id="_18-对象引用与复制" tabindex="-1"><a class="header-anchor" href="#_18-对象引用与复制" aria-hidden="true">#</a> 18 - 对象引用与复制</h3><ul><li>赋值了对象的变量存储的不是对象本身，而是该对象在内存中的地址，即该变量存储的是对该对象的引用。</li><li>当一个对象变量被复制，是引用被复制，而该对象自身并没有被复制。</li><li>仅当两个对象为同一对象时，两者才相等。</li><li>想要真正的复制对象本身，需要拷贝该对象：使用 <code>Object.assign(dest, [src1, src2, src3...])</code>，被拷贝的项目中没有对象类型，这种拷贝称为“浅拷贝”，如果被拷贝的属性的属性名已经存在，那么它会被覆盖。</li><li>如果属性值也是一个对象，那么也复制它的结构而不是其引用地址，使用 <code>structuredClone(value)</code>，这种拷贝方式称为“深拷贝”。</li><li>使用 <code>const</code> 声明的对象也是可以被修改的，作为一个整体进行赋值时才会报错。</li></ul><h3 id="_19-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_19-垃圾回收" aria-hidden="true">#</a> 19 - 垃圾回收</h3><ul><li>JavaScript 的内存管理是自动的、无形的。</li><li>可达性： <ul><li>当前执行的函数，它的局部变量和参数。</li><li>当前嵌套调用链上的其他函数、它们的局部变量和参数。</li><li>全局变量。</li></ul></li><li>不可达便会被回收。</li><li>如果一个值可以通过引用链从根访问任何其他值，则认为该值是可达的。</li><li>对外引用不重要，只有传入引用才可以使对象可达。</li><li>几个对象相互引用，但外部没有对其任意对象的引用，这些对象也可能是不可达的，将会被从内存中删除。</li><li>垃圾回收的基本算法被称为 “mark-and-sweep”（标记与扫描）。</li></ul><h3 id="_20-对象方法与-this" tabindex="-1"><a class="header-anchor" href="#_20-对象方法与-this" aria-hidden="true">#</a> 20 - 对象方法与 this</h3><ul><li>作为对象属性的函数被称为方法。</li><li><code>this</code> 的值就是在点之前的这个对象，即调用该方法的对象。</li><li>没有调用对象时，严格模式下的 <code>this</code> 值为 <code>undefined</code>，非严格模式的情况下，<code>this</code> 将会是全局对象。</li><li>箭头函数没有自己的 <code>this</code>，<code>this</code> 值取决于外部非箭头函数。</li></ul><h3 id="_21-构造器与-new" tabindex="-1"><a class="header-anchor" href="#_21-构造器与-new" aria-hidden="true">#</a> 21 - 构造器与 new</h3><ul><li>构造函数的命名以大写字母开头，只能由 <code>new</code> 操作符来执行，实现可重用的对象创建代码。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">false</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Myname is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>构造函数被调用时，隐式的创建了一个空对象，并且分配了 <code>this</code>，通过 <code>this</code> 添加新的属性，最后隐式的返回了 <code>this</code></li><li><code>let user = new function() {}</code> 立即调用，无法重用。</li><li><code>new.target</code> 可以被用在函数内部，来判断该函数是被通过 <code>new</code> 调用的“构造器模式”，还是没被通过 <code>new</code> 调用的常规模式。</li></ul><h3 id="_22-可选链" tabindex="-1"><a class="header-anchor" href="#_22-可选链" aria-hidden="true">#</a> 22 - 可选链</h3><ul><li>可选链 <code>?.</code> 前面的值为 <code>undefined</code> 或者 <code>null</code>，它会停止运算并返回 <code>undefined</code></li><li>安全地访问 <code>user.address.street</code> 的方式：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token operator">?.</span>address<span class="token operator">?.</span>street<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果 <code>?.</code>左边部分不存在，就会立即停止运算，“短路效应”。</li><li><code>?.()</code> 用于调用一个可能不存在的函数。</li><li><code>?.[]</code> 从一个可能不存在的对象上安全地读取属性。</li><li>可以使用 <code>?.</code> 安全地读取或删除，但不能写入，不能用在赋值语句的左侧。</li></ul><h3 id="_23-symbol-类型" tabindex="-1"><a class="header-anchor" href="#_23-symbol-类型" aria-hidden="true">#</a> 23 - Symbol 类型</h3><ul><li>只有两种原始类型可以用作对象属性的键：字符串类型、<code>Symbol</code>类型。</li><li><code>Symbol</code> 的值表示唯一的标识符，是带有可选描述的原始唯一值，保证是唯一的，不会被自动转换为字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>允许创建对象的“隐藏”属性，代码的任何其他部分都不能意外访问或重写这些属性。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 第三方代码看不到</span>
user<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment">// 可以使用 symbol 作为键来访问数据</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Symbol</code> 总是不同的，即使它们有相同的名字。</li><li><code>Symbol</code> 属性不参与 <code>for..in...</code> 循环。</li><li><code>Symbol.for(...)</code> 从全局注册表中读取，如果不存在就创建它，全局注册表中的 <code>Symbol</code> 再读取复制是相同的：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> sym1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> sym2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Symbol.keyFor(...)</code> 通过全局 <code>symbol</code> 返回一个名字，不存在则返回 <code>undefined</code>：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>sym1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// name</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>sym2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// id</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_24-原始值转换" tabindex="-1"><a class="header-anchor" href="#_24-原始值转换" aria-hidden="true">#</a> 24 - 原始值转换</h3><ul><li>转换规则： <ul><li>布尔值没有转换。</li><li>数字转换发生在对象相减或应用数学函数时。</li><li>字符串转换通常发生在像 <code>alert(...)</code> 这样输出一个对象和类似的上下文中。</li></ul></li><li><code>Symbol.toPrimitive</code> 用来给转换方法命名：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">money</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>

  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">hint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hint:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hint<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> hint <span class="token operator">==</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{name: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;}</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>money
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// hint:string &#39;{name: &quot;John&quot;}&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>user<span class="token punctuation">)</span>  <span class="token comment">// hint:number 1000</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user <span class="token operator">+</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token comment">// hint:default 1500</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>过程： <ul><li>首先，调用 <code>obj.Symbol.[toPrimitive] (hint)</code> 如果这个方法存在。</li><li>如果 <code>hint</code> 是 <code>string</code>，尝试调用 <code>obj.toString()</code> 或 <code>obj.valueOf()</code></li><li>如果 <code>hint</code> 是 <code>number</code> 或者 <code>default</code>，尝试调用 <code>obj.valueOf()</code> 或 <code>obj.toString()</code></li></ul></li><li>如果 <code>toString</code> 或 <code>valueOf</code> 返回一个对象，则不会出现 <code>error</code>，但是这种值会被忽略，而 <code>Symbol.toPrimitive</code> 更严格，它必须返回一个原始值，否则就会出现 <code>error</code></li><li>通常只实现 <code>obj.toString()</code> 作为字符串转换的“全能”方法就足够了，该方法应该返回对象的“人类可读”表示，用于日志记录或调试。</li></ul><h3 id="_25-数字类型" tabindex="-1"><a class="header-anchor" href="#_25-数字类型" aria-hidden="true">#</a> 25 - 数字类型</h3><table><thead><tr><th>方法</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>num.toString(base)</td><td>指定进制 2-36，默认为 10</td><td>返回指定进制形式的字符串</td></tr><tr><td>num.toFixed(n)</td><td>指定小数位数</td><td>返回字符串形式，最近舍入，不够添0</td></tr><tr><td>parseInt(str)</td><td>字符串</td><td>返回读取的整数，直到第一个非数字结束</td></tr><tr><td>parseFloat(str)</td><td>字符串</td><td>返回读取的浮点数，直到第一个非数字结束</td></tr><tr><td>Math.random()</td><td></td><td>返回一个 0 - 1 的随机数</td></tr><tr><td>Math.floor(num)</td><td>数值</td><td>向下舍入</td></tr><tr><td>Math.ceil(num)</td><td>数值</td><td>向上舍入</td></tr><tr><td>Math.round(num)</td><td>数值</td><td>最近整数舍入</td></tr><tr><td>Math.trunc(num)</td><td>数值</td><td>移除小数点后无舍入</td></tr><tr><td>Math.max(...)</td><td>任意数量数值</td><td>返回一个最大值</td></tr><tr><td>Math.min(...)</td><td>任意数量数值</td><td>返回一个最小值</td></tr><tr><td>Math.pow(n, power)</td><td>底数，幂</td><td>返回 n 的 power 次幂</td></tr><tr><td>isNaN(...)</td><td></td><td>将参数转换为数字，判断是否为NaN</td></tr><tr><td>isFinite(...)</td><td></td><td>将参数转换为数字，判断是否为常规数字</td></tr><tr><td>Object.is(value1, value2)</td><td></td><td>类似 === 对值进行比较，可以 NaN === NaN</td></tr></tbody></table><h3 id="_26-字符串类型" tabindex="-1"><a class="header-anchor" href="#_26-字符串类型" aria-hidden="true">#</a> 26 - 字符串类型</h3><table><thead><tr><th>方法</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>str.length</td><td></td><td>获取字符串的长度</td></tr><tr><td>str[n]</td><td></td><td>访问字符串，未找到返回 undefined</td></tr><tr><td>str.charAt(n)</td><td></td><td>访问字符串，未找到返回空字符串</td></tr><tr><td>str.toUpperCase()</td><td></td><td>转大写</td></tr><tr><td>str.toLowerCase()</td><td></td><td>转小写</td></tr><tr><td>str.indexOf(substr, [n])</td><td>子串，指定开始位置</td><td>返回匹配成功子字符串的位置，大小写敏感，失败返回 -1</td></tr><tr><td>str.lastIndexOf(subsrt, [n])</td><td>子串，指定开始位置</td><td>从末尾开始搜索子字符串</td></tr><tr><td>str.includes(substr, [n])</td><td>子串，指定开始位置</td><td>是否包含某个子字符串</td></tr><tr><td>str.startsWith(str1)</td><td>字符串</td><td>是否以某字符串开头</td></tr><tr><td>str.endsWith(str1)</td><td>字符串</td><td>是否以某字符串结尾</td></tr><tr><td>str.slice(start, end)</td><td>开始位置，结束位置</td><td>返回 [start end) 部分的字符串，省略 end 则到结尾，可取负值</td></tr><tr><td>str.substring(start, end)</td><td>开始位置，结束位置</td><td>返回 [start end) 部分的字符串，允许 start 大于 end，不支持负值</td></tr><tr><td>str.substr(start, length)</td><td>开始位置，长度</td><td>返回 start 开始指定长度的字符串，start 允许负值</td></tr><tr><td>str.codePointAt(pos)</td><td>位置</td><td>返回 pos 位置的字符代码</td></tr><tr><td>str.localeCompare(str1)</td><td>字符串</td><td>str 排在 str1 前面返回负数、str 排在 str1 后面返回正数、相同返回0</td></tr><tr><td>str.trim()</td><td></td><td>删除字符串前后的空格</td></tr><tr><td>str.repeat(n)</td><td></td><td>重复字符串 n 次</td></tr></tbody></table><ul><li><code>for (let ... of ...) { ... }</code> 遍历字符串。</li><li>字符串是不可以直接被修改的，需要创建新的字符串。</li></ul><h3 id="_27-数组" tabindex="-1"><a class="header-anchor" href="#_27-数组" aria-hidden="true">#</a> 27 - 数组</h3><table><thead><tr><th>方法</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arr.length</td><td></td><td>获取元素数量，实际是最大数字索引+1，可写，小于实际则数组被截断，不可逆</td></tr><tr><td>arr[n]</td><td></td><td>访问数组元素</td></tr><tr><td>arr[n] = ...</td><td></td><td>替换或增加数组元素</td></tr><tr><td>arr.at(n)</td><td></td><td>访问第 n 个元素，-1 表示最后一个元素</td></tr><tr><td>arr.pop()</td><td></td><td>末端，取出并返回最后一个元素，取出即被删除</td></tr><tr><td>arr.push(...)</td><td></td><td>末端，添加元素，返回数组的长度</td></tr><tr><td>arr.shift()</td><td></td><td>首端，取出并返回第一个元素，取出即被删除</td></tr><tr><td>arr.unshift(...)</td><td></td><td>首端，添加元素，返回数组的长度</td></tr><tr><td>delete arr[n]</td><td></td><td>元素被删除，但位置依然存在</td></tr><tr><td>arr.splice(n, n, ...)</td><td>起始位置，删除个数，插入的新内容</td><td>返回被删除的元素</td></tr><tr><td>arr.slice(start, end)</td><td>起始位置，结束位置</td><td>返回一个按起始位置截取复制的新数组</td></tr><tr><td>arr.concat(arr1, arr2...)</td><td>数组...</td><td>返回一个合并的新数组</td></tr><tr><td>arr.forEach((item, index, array) =&gt; {...})</td><td>每个元素，每个元素的索引，数组本身</td><td>遍历数组的每个元素，并为每个元素运行相关函数，无返回</td></tr><tr><td>arr.indexOf(item, n)</td><td>元素，位置</td><td>从 n 位置搜索 item 元素，找到返回索引，否则返回-1</td></tr><tr><td>arr.lastIndexOf(item, n)</td><td>元素，位置</td><td>同上，从右向左搜索</td></tr><tr><td>arr.includes(item, n)</td><td>元素，位置</td><td>从 n 位置搜索 item 元素，找到返回 true，否则返回 false</td></tr><tr><td>arr.find(func)</td><td>函数</td><td>返回符合函数条件的元素，未找到返回 undefined</td></tr><tr><td>arr.findIndex(func)</td><td>函数</td><td>返回符合函数条件的元素索引，未找到返回 undefined</td></tr><tr><td>arr.filter(func)</td><td>函数</td><td>返回所有匹配元素组成的新数组，浅拷贝</td></tr><tr><td>arr.map(func)</td><td>函数</td><td>对数组的每个元素都调用相关函数，返回结果数组</td></tr><tr><td>arr.sort(func)</td><td>函数（提供排序规则）</td><td>对数组进行原位排序，默认按字符串排序</td></tr><tr><td>arr.reverse()</td><td></td><td>对数组进行原位颠倒顺序</td></tr><tr><td>str.split(&quot;...&quot;)</td><td>指定分隔符，可选参数对数组的长度做出限制，空参则分隔为每个字母</td><td>返回给定分隔符把字符串分隔的数组</td></tr><tr><td>arr.join(&quot;...&quot;)</td><td>指定分隔符</td><td>返回给定分隔符把数组组合为字符串</td></tr><tr><td>arr.reduce(callback(prev, item, index, array), init)</td><td>回调函数、初始值</td><td>返回最后值，函数调用结果作为第一个参数传递</td></tr><tr><td>arr.reduceRight(...)</td><td></td><td>返回最后值，遍历时从右向左</td></tr><tr><td>Array.isArray(arr)</td><td></td><td>判断是否为数组</td></tr><tr><td>Object.values(obj)</td><td></td><td>返回一个给定对象自身的所有可枚举属性值的数组</td></tr></tbody></table><ul><li>数组常用于栈和队列。</li><li><code>for (let ... of ...) { ... }</code> 遍历数组。</li><li><code>let arr = [ [...], [...]...]</code> 多维数组。</li><li>数组有自己的 <code>toString</code> 方法，会返回以逗号分隔的元素列表。</li></ul><h3 id="_28-可迭代对象" tabindex="-1"><a class="header-anchor" href="#_28-可迭代对象" aria-hidden="true">#</a> 28 - 可迭代对象</h3><ul><li>可以应用 <code>for..of...</code> 的对象被称为可迭代对象。</li><li>数组是可迭代的，字符串也是可迭代的，数组和字符串是使用最广泛的内建可迭代对象。</li><li><code>Symbol.iterator</code> 是专门用于使对象可迭代的内建 <code>Symbol</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1. for..of 首先会调用这个方法：</span>
range<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 它返回迭代器对象（iterator object）：</span>
  <span class="token comment">// 2. 接下来，for..of 仅与下面的迭代器对象一起工作，要求它提供下一个值</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span>
    <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span>

    <span class="token comment">// 3. next() 在 for..of 的每一轮循环迭代中被调用</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 4. 它将会返回 {done:.., value :...} 格式的对象</span>
      <span class="token comment">// 当 done=true 时，表示循环结束，否则 value 是下一个值</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token operator">++</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 简化：返回 range 对象自身</span>
<span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>

  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>from
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token operator">++</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Array.from(...)</code> 接受一个可迭代对象或类数组的值，并从中获取一个真正的数组，然后就可以对其调用数组方法了（有索引，有长度）。</li></ul><h3 id="_29-映射与集合" tabindex="-1"><a class="header-anchor" href="#_29-映射与集合" aria-hidden="true">#</a> 29 - 映射与集合</h3><ul><li><code>Map</code> 是一个带键的数据项的集合，就像一个 <code>Object</code> 一样，但是它们最大的差别是 <code>Map</code> 允许任何类型的键，包括对象。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>new Map()</td><td>创建 Map 映射</td></tr><tr><td>map.set(key, value)</td><td>根据键存储值</td></tr><tr><td>map.get(key)</td><td>根据键返回值，不存在返回 undefined</td></tr><tr><td>map.has(key)</td><td>是否存在 key</td></tr><tr><td>map.delete(key)</td><td>删除指定键的值，返回布尔值</td></tr><tr><td>map.clear()</td><td>清空 map</td></tr><tr><td>map.size</td><td>返回当前元素个数</td></tr><tr><td>map.keys()</td><td>遍历并返回一个包含所有键的可迭代对象</td></tr><tr><td>map.values()</td><td>遍历并返回一个包含所有值的可迭代对象</td></tr><tr><td>map.entries()</td><td>遍历并返回一个包含所有实体的可迭代对象</td></tr><tr><td>Object.entries(obj)</td><td>返回对象的键值对数组，数组的格式按照 Map 所需格式，用于对象创建映射</td></tr><tr><td>Object.fromEntries([[...], [...]])</td><td>返回给定一个键值对数组来创建一个相应的对象</td></tr></tbody></table><ul><li>与对象不同，键不会被转换成字符串，键可以是任何类型。</li><li>使用对象作为键是 <code>Map</code> 最值得注意和重要的功能之一。</li><li><code>Map</code> 有内建的 <code>forEach</code> 方法。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过指定形式的数组创建映射</span>
<span class="token keyword">let</span> recipeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&quot;cucumber&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&quot;tomatoes&quot;</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&quot;onion&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Set</code> 是一个特殊的类型集合，值的集合没有键，它的每一个值只能出现一次。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>new Set()</td><td>创建 Set 集合，可以传入数组创建集合</td></tr><tr><td>set.add(value)</td><td>添加值</td></tr><tr><td>set.delete(value)</td><td>删除相应的值，返回布尔值</td></tr><tr><td>set.has(value)</td><td>是否存在该值</td></tr><tr><td>set.clear()</td><td>清空 set</td></tr><tr><td>set.size</td><td>返回元素个数</td></tr><tr><td>set.keys()</td><td>遍历并返回一个包含所有值的可迭代对象</td></tr><tr><td>set.values()</td><td>与上诉的方法一致，目的是兼容 Map</td></tr><tr><td>set.entries()</td><td>遍历并返回一个包含所有实体的可迭代对象，为了兼容 Map</td></tr></tbody></table><ul><li>可以使用 <code>for...of..</code> 或者 <code>forEach</code> 来遍历 <code>Set</code></li></ul><h3 id="_30-弱映射与弱集合" tabindex="-1"><a class="header-anchor" href="#_30-弱映射与弱集合" aria-hidden="true">#</a> 30 - 弱映射与弱集合</h3><ul><li>使用对象作为常规 <code>Map</code> 的键，那么当 <code>Map</code> 存在时，该对象也将存在，它会占用内存，并且不会被垃圾回收机制回收。</li><li><code>weakMap</code> 和 <code>Map</code> 的不同点就是 <code>weakMap</code> 的键必须是对象，不能是原始值，<code>let weakMap = new WeakMap()</code></li><li>在 <code>weakMap</code> 中使用一个对象作为键，并且没有其他对这个对象的引用，该对象将会被从内存和 <code>map</code> 中自动清除。</li><li><code>weakMap</code> 不支持迭代以及 <code>keys()</code>，<code>values()</code> 和 <code>entries()</code> 方法，所以没有办法获取 <code>weakMap</code> 的所有键或值。</li><li><code>weakMap</code> 的主要应用场景是额外数据的存储，可能是第三方库，并想存储一些与之相关的数据，那么这些数据就应该与这个对象共存亡，再有就是缓存的应用。</li><li><code>weakSet</code> 与 <code>Set</code> 类似，但是只能向 <code>weakSet</code> 添加对象。</li><li>对象只有在其它某些地方能被访问的时候，才能留在 <code>weakSet</code> 中。</li></ul><h3 id="_31-解构赋值" tabindex="-1"><a class="header-anchor" href="#_31-解构赋值" aria-hidden="true">#</a> 31 - 解构赋值</h3><ul><li>一种特殊的语法，可以将数组或对象拆包至一系列变量中，原来的数组或对象自身没有被修改。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 额外的逗号，可以实现不需要第二个元素</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> <span class="token punctuation">,</span> title<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&quot;Julius&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Caesar&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Consul&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;of the Roman Republic&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>等号右侧可以是任何可迭代对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不借助中间变量实现数据交换</span>
<span class="token keyword">let</span> guest <span class="token operator">=</span> <span class="token string">&quot;Jane&quot;</span>
<span class="token keyword">let</span> admin <span class="token operator">=</span> <span class="token string">&quot;Pete&quot;</span>

<span class="token punctuation">[</span>guest<span class="token punctuation">,</span> admin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>admin<span class="token punctuation">,</span> guest<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>...rest</code> 接收剩余的值存入数组中。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&quot;Julius&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Caesar&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Consul&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;of the Roman Republic&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>缺少对应值的变量都会被赋 <code>undefined</code></li><li>可以使用冒号来设置变量名称 <code>let {width: w, height: h, title} = obj</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 嵌套结构 使用相同的模式</span>
<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Cake&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Donut&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">extra</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">{</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">]</span><span class="token punctuation">,</span>
  title <span class="token operator">=</span> <span class="token string">&quot;Menu&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> options
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 智能函数参数</span>
<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;My menu&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;item1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;item2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">showMenu</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  title <span class="token operator">=</span> <span class="token string">&quot;Untitled&quot;</span><span class="token punctuation">,</span>
  width <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>
  height <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span>
  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">showMenu</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_32-日期和时间" tabindex="-1"><a class="header-anchor" href="#_32-日期和时间" aria-hidden="true">#</a> 32 - 日期和时间</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>new Date()</code> 不带参数，创建的是一个表示当前日期和时间的 <code>Date</code> 对象。</li><li>传入整数参数，代表的是自 <code>1970-01-01 00 : 00 : 00</code> 以来经过的毫秒数，该整数被称为时间戳。</li><li>传入字符串参数，那么它会被自动解析，<code>new Date(year, month, date, hours, minutes, seconds, ms)</code></li><li>日期可以相减，相减的结果是以毫秒为单位的时间差。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>date.getFullYear()</td><td>获取年份，4位整数</td></tr><tr><td>date.getMonth()</td><td>获取月份，从0-11</td></tr><tr><td>date.getDate()</td><td>获取日，从1-31</td></tr><tr><td>date.getHours()</td><td>获取小时</td></tr><tr><td>date.getMinutes()</td><td>获取分钟</td></tr><tr><td>date.getSeconds()</td><td>获取秒</td></tr><tr><td>date.getMilliseconds()</td><td>获取毫秒</td></tr><tr><td>date.getDay()</td><td>获取周，从0-6</td></tr><tr><td>date.getTime()</td><td>返回日期的时间戳，毫秒</td></tr><tr><td>date.getTimezoneOffset()</td><td>返回UTC与本地之间的时差，分钟</td></tr><tr><td><strong>设置日期：</strong></td><td></td></tr><tr><td>date.setFullYear(year, [month], [date])</td><td>设置年份</td></tr><tr><td>date.setMonth(month, [date])</td><td>设置月份</td></tr><tr><td>date.setDate(date)</td><td>设置日</td></tr><tr><td>date.setHours(hour, [min], [sec], [ms])</td><td>设置小时</td></tr><tr><td>date.setMinutes(min, [sec], [ms])</td><td>设置分钟</td></tr><tr><td>date.setSeconds(sec, [ms])</td><td>设置秒</td></tr><tr><td>date.setMilliseconds(ms)</td><td>设置毫秒</td></tr><tr><td>date.setTime(milliseconds)</td><td>设置时间戳</td></tr><tr><td>Date.now()</td><td>返回当前的时间戳</td></tr><tr><td>Date.parse(str)</td><td>从字符串中读取日期，&#39;YYYY-MM-DD hh:mm:ss&#39;</td></tr></tbody></table><h3 id="_33-json" tabindex="-1"><a class="header-anchor" href="#_33-json" aria-hidden="true">#</a> 33 - JSON</h3><ul><li>全称 JavaScript Object Notation，是表示值和对象的通用格式。</li><li>JSON 支持以下数据类型：<code>Objects</code>、<code>Arrays</code>、<code>Primitives</code>（<code>strings</code>、<code>numbers</code>、<code>boolean</code>、<code>null</code>）</li><li><code>JSON.stringify(obj)</code> 将对象转换为 JSON</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">courses</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">spouse</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JSON 是语言无关的纯数据规范，因此一些特定于 JavaScript 的对象属性会被 <code>JSON.stringify</code> 跳过：函数属性（方法）、<code>Symbol</code> 类型的键和值、存储 <code>undefined</code> 的属性。</li><li><code>JSON.parse(json)</code> 解码 JSON 为对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> userData <span class="token operator">=</span> <span class="token string">&#39;{ &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 35, &quot;isAdmin&quot;: false, &quot;friends&quot;: [0,1,2,3] }&#39;</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 处理日期</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;{&quot;title&quot;:&quot;Conference&quot;,&quot;date&quot;:&quot;2017-11-30T12:00:00.000Z&quot;}&#39;</span>

<span class="token keyword">let</span> meetup <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">&quot;date&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meetup<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_34-递归与堆栈" tabindex="-1"><a class="header-anchor" href="#_34-递归与堆栈" aria-hidden="true">#</a> 34 - 递归与堆栈</h3><ul><li>递归即调用函数自身。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最大的嵌套调用次数（包括首次）被称为递归深度。</li><li>执行上下文是一个内部数据结构，它包含有关函数执行时的详细细节，包括：当前控制流所在的位置、当前的变量、<code>this</code> 的值、其它的一些内部细节。</li><li>函数嵌套调用时：当前函数被暂停，与它关联的执行上下文被一个叫做执行上下文堆栈的特殊数据结构保存，执行嵌套调用，嵌套调用结束后，从堆栈中恢复之前的执行上下文，并从停止的位置恢复外部函数。</li><li>任何递归都可以用循环来重写，通常循环变体更有效。</li><li>递归的一个重要应用是递归遍历。</li></ul><h3 id="_35-rest-参数与-spread-语法" tabindex="-1"><a class="header-anchor" href="#_35-rest-参数与-spread-语法" aria-hidden="true">#</a> 35 - Rest 参数与 Spread 语法</h3><ul><li>在 JS 中无论函数是如何定义的，都可以在调用它时传入任意数量的参数。</li><li><code>...rest</code>，这将会声明一个数组并指定其名称，其中存有剩余的参数，<code>rest</code> 参数必须放到参数列表的末尾。</li><li><code>arguments</code> 是一个特殊类数组对象，可以在函数中被访问，该对象以参数在参数列表中的索引作为键，存储所有参数，箭头函数没有 <code>arguments</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// rest 参数</span>
<span class="token keyword">function</span> <span class="token function">sumAll</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> arg <span class="token keyword">of</span> args<span class="token punctuation">)</span> sum <span class="token operator">+=</span> arg
  <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sumAll</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// arguments 类数组对象</span>
<span class="token keyword">function</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token parameter">one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arguments<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">num</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>spread</code> 语法是使用 <code>...可迭代对象</code>，把可迭代对象展开到参数列表中。</li><li><code>spread</code> 语法内部使用了迭代器来收集元素，与 <code>for..of</code> 的方式相同，可用于复制 <code>array/object</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Spread 语法</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token comment">// 可以使用逗号分隔，传入多个可迭代对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_36-变量作用域与闭包" tabindex="-1"><a class="header-anchor" href="#_36-变量作用域与闭包" aria-hidden="true">#</a> 36 - 变量作用域与闭包</h3><ul><li><code>let</code> 与 <code>const</code> 如果在代码块 <code>{...}</code> 内声明了一个变量，那么这个变量只在该代码块内可见，<code>if</code> 、 <code>for</code> 、 <code>while</code> 等，在 <code>{...}</code> 中声明的变量也仅在内部可见。</li><li>（1）闭包是指一个嵌套内部函数可以记住其外部变量并可以访问这些变量，在 JS 中几乎所有函数都是天生闭包的（有一个例外），函数会自动通过隐藏的 <code>[[Environment]]</code> 属性记住创建它们的位置，所以它们都可以访问外部变量，即函数中创建的函数可以访问外部函数的变量。</li><li>（2）闭包就是指有权访问另一个函数作用域中的变量的函数。</li><li>函数将从内到外依次在对应的词法环境中寻找目标变量，它使用最新的值。</li><li>一般情况下函数调用完成后，会将词法环境和其中的所有变量从内存中删除，但是如果有一个嵌套的函数在函数结束后仍可达，则它将具有引用词法环境的 <code>[[Environment]]</code> 属性。</li></ul><h3 id="_37-关于-var" tabindex="-1"><a class="header-anchor" href="#_37-关于-var" aria-hidden="true">#</a> 37 - 关于 var</h3><ul><li><code>var</code> 没有块级作用域，用 <code>var</code> 声明的变量为函数作用域或全局作用域。</li><li>使用 <code>var</code> ，可以重复声明一个变量，新声明的将覆盖旧的。</li><li><code>var</code> 声明的变量，可以在其声明语句前被使用，声明会被提升，但是赋值不会。</li><li><code>var</code> 声明都是在函数开头处理的，可以在任何地方引用它们，但是在它们被赋值之前都是 <code>undefined</code></li><li>全局对象提供可在任何地方使用的变量和函数，默认情况下这些全局变量内建于语言或环境中；在浏览器中，它的名字是 <code>window</code>，在 Node.js 中，它的名字是 <code>global</code></li><li><code>globalThis</code> 被作为全局对象的标准名称加入到了 JS 中，所有环境都应该支持该名称。</li></ul><h3 id="_38-函数对象与-nfe" tabindex="-1"><a class="header-anchor" href="#_38-函数对象与-nfe" aria-hidden="true">#</a> 38 - 函数对象与 NFE</h3><ul><li>命名函数表达式（NFE：Named Function Expression），指带有名字的函数表达式的术语。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>who<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>who<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">&quot;Guest&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Hello, Guest</span>

<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Error, func is not defined（在函数外不可见）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>它允许函数在内部引用自己，但在函数外是不可见的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 属性 name</span>
<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayHi<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

<span class="token comment">// 属性 lenght</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 返回的是参数的个数，rest 参数不参与计数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_39-new-function" tabindex="-1"><a class="header-anchor" href="#_39-new-function" aria-hidden="true">#</a> 39 - new Function</h3><ul><li><code>new Function</code> 允许将任意字符串变为函数。</li><li>使用 <code>new Function</code> 创建的函数，该函数的 <code>[[Environment]]</code> 并不指向当前的词法环境，而是指向全局环境，因此此类函数无法访问外部（outer）变量，只能访问全局变量，即无法实现闭包。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_40-settimeout-与-setinterval" tabindex="-1"><a class="header-anchor" href="#_40-settimeout-与-setinterval" aria-hidden="true">#</a> 40 - setTimeout 与 setInterval</h3><ul><li><code>setTimeout</code> 允许将函数推迟到一段时间间隔之后再执行。</li><li><code>setTimeout</code> 在调用时会返回一个定时器标识符（timer identifier）</li><li>任何 <code>setTimeout</code> 都只会在当前代码执行完毕之后才会执行，原因是事件循环机制。</li><li><code>clearTimeout(timeoutID)</code> 取消调度。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Xiaofan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>setInterval</code> 允许重复运行一个函数，从一段时间间隔之后开始运行，之后以该时间间隔连续重复运行该函数。</li><li><code>clearInterval(timeoutID)</code> 取消调度。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> timeoutID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;xiaofan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">clearInterval</span><span class="token punctuation">(</span>timeoutID<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>嵌套的 <code>setTimeout</code> 要比 <code>setInterval</code> 灵活得多，采用这种方式可以根据当前执行结果来调度下一次调用，因此下一次调用可以与当前这一次不同，嵌套的 <code>setTimeout</code> 能够精确地设置两次执行之间的延时，而 <code>setInterval</code> 却不能。</li><li>使用 <code>setInterval</code> 时，<code>func</code> 函数的实际调用间隔要比代码中设定的时间间隔要短，嵌套的 <code>setTimeout</code> 就能确保延时的固定，这是因为下一次调用是在前一次调用完成时再调度的。</li><li>当不再需要调度函数时最好取消它。</li><li>在浏览器环境下，嵌套定时器的运行频率是受限制的，时间间隔被强制设定为至少 4 毫秒。</li></ul><h3 id="_41-装饰器模式与转发" tabindex="-1"><a class="header-anchor" href="#_41-装饰器模式与转发" aria-hidden="true">#</a> 41 - 装饰器模式与转发</h3><ul><li>装饰器（decorator）是一个围绕改变函数行为的包装器，主要工作仍由该函数来完成。</li><li>装饰器一个特殊的函数，它接受另一个函数并改变它的行为。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里可能会有重负载的 CPU 密集型工作</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Called with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> x
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果缓存中有对应的结果</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 从缓存中读取结果</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 否则就调用 func</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token comment">// 然后将结果缓存（记住）下来</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

slow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// slow(1) 被缓存下来了，并返回结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Again: &quot;</span> <span class="token operator">+</span> <span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 返回缓存中的 slow(1) 的结果</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// slow(2) 被缓存下来了，并返回结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Again: &quot;</span> <span class="token operator">+</span> <span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 返回缓存中的 slow(2) 的结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将所有参数连同上下文一起传递给另一个函数被称为呼叫转移（call forwarding）</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>func.call(obj, 参数列表)</td><td>调用函数时会将 this 设置为传入的对象</td></tr><tr><td>func.apply(obj, 类数组对象)</td><td>调用函数时会将 this 设置为传入的对象</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>

<span class="token comment">// 方法借用</span>
<span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>防抖（debounce）会在冷却期后运行函数一次，适用于处理最终结果；在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时；用户触发时间过于频繁，只要最后一次请求的操作就叫做防抖</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 简单的防抖函数</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arguments</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 先清除定时器</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    <span class="token comment">// 设置多久后执行回调</span>
    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>节流（throttle）运行函数的频率不会大于所给定的时间（毫秒），适用于不应该经常进行的定期更新；当持续触发事件时，保证在一定时间内只调用一次事件处理函数，假设一个用户一直触发这个函数，且每次触发小于既定值，函数节流会每隔这个时间调用一次。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 简单的节流函数</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arguments</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 时间未到会退出执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token comment">// 设置每次执行的间隔时间</span>
    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
      timeout <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>总结，防抖是将多次执行变为最后一次执行，节流是将多次执行变为每隔一段时间执行。</li></ul><h3 id="_42-函数绑定" tabindex="-1"><a class="header-anchor" href="#_42-函数绑定" aria-hidden="true">#</a> 42 - 函数绑定</h3><ul><li>丢失 <code>this</code> 是指一旦方法被传递到与对象分开的某个地方 <code>this</code> 就会丢失。</li><li>解决方法1：包装器，它从外部词法环境中获取到了需要的变量。</li><li>解决方法2：<code>bind</code> 方法，它可以绑定 <code>this</code>，该方法会创建一个新函数，新函数的 <code>this</code> 被指定为第一个参数，其余参数作为新函数的参数。</li><li>备注：<code>call</code>、<code>apply</code> 用于调用函数传递上下文，<code>bind</code> 用于创建函数传递上下文，它们都来自 <code>Function.prototype</code> 都是为了解决 <code>this</code> 问题。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> funcUser <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token function">funcUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一个对象有很多方法，并且都打算将它们都传递出去，那么可以在一个循环中完成所有方法的绑定。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> user<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    user<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> user<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>偏函数是指通过绑定先有函数的一些参数来创建一个新函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">*</span> b
<span class="token punctuation">}</span>

<span class="token keyword">let</span> double <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.bind(this)</code> 创建一个该函数的绑定版本。</li><li>箭头函数没有创建任何绑定，箭头函数只是没有 <code>this</code>，<code>this</code> 的查找与常规变量的搜索方式完全相同，即在外部词法环境中查找。箭头函数也没有 <code>arguments</code> 变量。总之，箭头函数是针对那些没有自己的上下文，但在当前上下文中起作用的短代码的。</li></ul><h3 id="_43-属性标志与描述符" tabindex="-1"><a class="header-anchor" href="#_43-属性标志与描述符" aria-hidden="true">#</a> 43 - 属性标志与描述符</h3><ul><li>属性标志 <code>writable</code> 如果为 <code>true</code>，则为可写的，否则不可写；<code>enumerable</code> 如果为 <code>true</code>，则会在循环中列出，否则不可以；<code>configurable</code> 如果为 <code>true</code>，则是可以被删除/修改，否则不可以；用常用的方式创建一个属性时，它们都为 <code>true</code></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Object.getOwnPropertyDescriptors(obj)</td><td>一次获取所有属性的描述</td></tr><tr><td>Object.getOwnPropertyDescriptor(obj, propertyName)</td><td>查询有关属性的完整信息</td></tr><tr><td>Object.defineProperties(obj, descriptors)</td><td>允许一次定义多个属性</td></tr><tr><td>Object.defineProperety(obj, propertyName, descriptor)</td><td>如果该属性存在会更新其标志，否则它会使用给定的值和标志创建属性，没有提供标志，则会假定它是 false</td></tr><tr><td><strong>限制整个对象的方法：</strong></td><td></td></tr><tr><td>Object.preventExtensions(obj)</td><td>禁止向对象添加新属性</td></tr><tr><td>Object.seal(obj)</td><td>禁止添加/删除属性，为所有现有的属性设置 <code>configurable: false</code></td></tr><tr><td>Object.freeze(obj)</td><td>禁止添加/删除/更改属性，为所有现有的属性设置 <code>configurable: false, writable: false</code></td></tr><tr><td><strong>针对测试的方法：</strong></td><td></td></tr><tr><td>Object.isExtensible(obj)</td><td>如果添加属性被禁止，则返回 false，否则返回 true</td></tr><tr><td>Object.isSealed(obj)</td><td>如果添加/删除属性被禁止，并且所有现有的属性都具有 <code>configurable: false</code> 则返回 true</td></tr><tr><td>Object.isFrozen(obj)</td><td>如果添加/删除/更改属性被禁止，并且所有当前属性都是 <code>configurable: false, writable: false</code> 则返回 true</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>完全克隆对象，包括属性、<code>Symbol</code>、不可枚举类型：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_44-getter-与-setter" tabindex="-1"><a class="header-anchor" href="#_44-getter-与-setter" aria-hidden="true">#</a> 44 - getter 与 setter</h3><ul><li>存在两种类型的对象属性，一种是数据属性，另一种是访问器属性本质上是用于获取和设置值的函数。</li><li>对于访问器属性，没有 <code>value</code> 和 <code>writable</code>，但是有 <code>get</code> 和 <code>set</code> 函数。</li><li>一个属性要么是访问器（具有 <code>get/set</code> 方法），要么是数据属性（具有 <code>value</code>），但不能两者都是。</li><li>访问器属性的分配操作是由 <code>setter</code> 函数处理的，因此写入此类属性实际上与调用函数相同。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span>

  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 访问器属性看起来就像一个普通属性</span>
<span class="token comment">// 不以函数的方式调用，而使用 user.fullName，正常读取 getter 会在幕后运行</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span>

user<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">&quot;Alice Cooper&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_45-原型继承" tabindex="-1"><a class="header-anchor" href="#_45-原型继承" aria-hidden="true">#</a> 45 - 原型继承</h3><ul><li>对象有一个特殊的隐藏属性 <code>[[Prototype]]</code>，它要么为 <code>null</code> 要么就是对另一个对象的引用，该对象被称为原型。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将 animal 设置为 rabbit 的原型</span>
<span class="token comment">// rabbit 的原型是从 animal 继承而来的</span>
<span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">eats</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> rabbit <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">jumps</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 设置 rabbit.[[Prototype]] = animal</span>
rabbit<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> animal

<span class="token comment">// let rabbit = {</span>
<span class="token comment">//   jumps: true,</span>
<span class="token comment">//   __proto__: animal,</span>
<span class="token comment">// }</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">.</span>eats<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">.</span>jumps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从对象中读取一个缺失的属性时，JS 会自动从原型中获取该属性。</li><li>引用不能形成闭环，如果试图在一个闭环中分配 <code>__proto__</code>，JS 会抛出错误。</li><li><code>__proto__</code> 的值可以是对象，也可以是 <code>null</code>，而其他的类型都会被忽略。</li><li><code>__proto__</code> 是 <code>[[Prototype]]</code> 的因历史原因而留下来的 <code>getter/setter</code></li><li>建议应该使用函数 <code>Object.getPrototypeOf/Object.setPrototypeOf</code> 来取代 <code>__proto__</code> 的 <code>get/set</code> 原型。</li><li>只能有一个 <code>[[Prototype]]</code>，一个对象不能从其他两个对象获得继承。</li><li>无论在哪里找到方法，在一个对象还是在原型中，<code>this</code> 始终是点符号 <code>.</code> 前面的对象（调用者）</li><li>当继承的对象运行继承的方法时，它们将仅修改自己的状态，而不会修改大对象的状态。</li><li>方法是共享的，但对象状态不是。</li><li>几乎所有键/值获取方法都会忽略继承的属性，<code>for..in</code> 循环会迭代继承的属性。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>obj.hasOwnProperty(key)</td><td>如果 obj 具有自己的（非继承的）名为 key 的属性，则返回 true</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">eats</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> rabbit <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">jumps</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span> animal<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> rabbit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> isOwn <span class="token operator">=</span> rabbit<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isOwn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Our: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Inherited: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_46-f-prototype" tabindex="-1"><a class="header-anchor" href="#_46-f-prototype" aria-hidden="true">#</a> 46 - F.prototype</h3><ul><li><code>F.prototype</code> 属性仅在 <code>new F</code> 被调用时使用，它为新对象的 <code>[[Prototype]]</code> 赋值。</li><li><code>F.prototype</code> 的值要么是一个对象，要么就是 <code>null</code> 其他值都不起作用。</li><li><code>prototype</code> 属性仅当设置在一个构造函数上，并通过 <code>new</code> 调用时，才具有这种特殊的影响。</li><li>默认情况下，所有函数都有 <code>F.prototype = {constructor：F}</code> 所以可以通过访问它的 <code>constructor</code> 属性来获取一个对象的构造器，属性 <code>constructor</code> 指向函数自身，当有一个对象但不知道它使用了哪个构造器（例如它来自第三方库），并且需要创建另一个类似的对象时，用这种方法就很方便 <code>F.prototype.constructor</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过构造函数创建的对象设置 [[Prototype]] 的方法</span>
<span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">eats</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>

<span class="token comment">// 当创建了一个 new Rabbit 时，把它的 [[Prototype]] 赋值为 animal</span>
<span class="token class-name">Rabbit</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> animal

<span class="token comment">// rabbit.__proto__ == animal</span>
<span class="token keyword">let</span> rabbit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token string">&quot;White Rabbit&quot;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">.</span>eats<span class="token punctuation">)</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_47-原生的原型" tabindex="-1"><a class="header-anchor" href="#_47-原生的原型" aria-hidden="true">#</a> 47 - 原生的原型</h3><ul><li>所有的内建对象都遵循相同的模式：方法都存储在 <code>prototype</code> 中，对象本身只存储数据，原始数据类型也将方法存储在包装器对象的 <code>prototype</code> 中。</li><li><code>obj = {}</code> 和 <code>obj = new Object()</code> 是一个意思，其中 <code>Object</code> 就是一个内建的对象构造函数，其自身的 <code>prototype</code> 指向一个带有 <code>toString</code> 和其他方法的一个巨大的对象。</li><li><code>Array</code>、<code>Date</code>、<code>Function</code> 及其他，都在 <code>prototype</code> 上挂载了方法。</li><li>访问基本数据类型的属性，那么临时包装器对象将会通过内建的构造器 <code>String</code>、<code>Number</code> 和 <code>Boolean</code> 被创建。它们提供操作字符串、数字和布尔值的方法然后消失。</li><li>值 <code>null</code> 和 <code>undefined</code> 没有对象包装器。</li><li>修改原生原型 Polyfilling 是一个术语，表示某个方法在 JS 规范中已存在，但是特定的 JS 引擎尚不支持该方法，那么可以通过手动实现它，并用以填充内建原型。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 原型借用</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;xiaofan&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>join <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_48-原型方法" tabindex="-1"><a class="header-anchor" href="#_48-原型方法" aria-hidden="true">#</a> 48 - 原型方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Object.getPrototypeOf(obj)</td><td>返回对象 obj 的 [[Prototype]]</td></tr><tr><td>Object.setPrototypeOf(obj, proto)</td><td>将对象 obj 的 [[Prototype]] 设置为 proto</td></tr><tr><td>Object.create(proto, [descriptors])</td><td>利用给定的 proto 作为 [[Prototype]] 和可选的属性描述来创建一个空对象</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">eats</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一个以 animal 为原型的新对象，与 {__proto__: animal} 相同</span>
<span class="token keyword">let</span> rabbit <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">.</span>eats<span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">)</span> <span class="token operator">===</span> animal<span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Object.create()</code> 方法更强大，因为它有一个可选的第二参数，属性描述器，可以在此处为新对象提供额外的属性。</li><li>使用描述器创建的属性，它的标识默认是 <code>false</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 更加强大的准确拷贝（浅拷贝）</span>
<span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>
  Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意点：</strong></p><ul><li><code>__proto__</code> 不是对象的属性，而是 <code>Object.prototype</code> 的访问器属性。</li><li><code>__proto__</code> 是一种访问 <code>[[Prototype]]</code> 的方式，而不是 <code>[[prototype]]</code> 本身。</li><li>大多数与对象相关的方法都是 <code>Object.something(...)</code>，例如 <code>Object.keys(obj)</code>，它们不在 <code>prototype</code> 中。 <img src="https://pic.img.ski/1672816523.png" alt="原型链.png"></li></ul><h3 id="_49-class" tabindex="-1"><a class="header-anchor" href="#_49-class" aria-hidden="true">#</a> 49 - Class</h3><ul><li>在 JS 中，类是一种函数。</li><li>Class 是用于创建对象的可扩展的程序代码模版，它为对象提供了状态（成员变量）的初始值和行为（成员函数或方法）的实现。</li><li>类的方法之间没有逗号。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">}</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Class 是一个函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> User<span class="token punctuation">)</span>

<span class="token comment">// 更确切地说是 constructor 方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User <span class="token operator">===</span> <span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>

<span class="token comment">// 方法在 User.prototype 中</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayHi<span class="token punctuation">)</span>

<span class="token comment">// 在原型中实际上有两个方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// [&#39;constructor&#39;, &#39;sayHi&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类总是使用 <code>&quot;use strict&quot;</code></li><li>类的方法不可枚举。</li><li>类字段的不同之处在于，它们会在每个独立对象中被设置，而不是设在 <code>User.prototype</code>，可以用于函数绑定。</li><li>通过 <code>class</code> 创建的函数具有特殊的内部属性标记 <code>[[IsClassConstructor]]: true</code> 因此它与手动创建并不完全相同。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 类表达式</span>
<span class="token comment">// class 之后可以跟一个名字，只有内部可见</span>
<span class="token keyword">let</span> User <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// get / set</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用 setter</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Name is too short.&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_50-类继承" tabindex="-1"><a class="header-anchor" href="#_50-类继承" aria-hidden="true">#</a> 50 - 类继承</h3><ul><li>类继承是一个类扩展另一个类的一种方式。</li><li>类语法不仅允许指定一个类，在 <code>extends</code> 后可以指定任意表达式。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">phrase</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phrase<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行 <code>super.method(...)</code> 来调用一个父类方法。</li><li>执行 <code>super(...)</code> 来调用一个父类 <code>constructor</code>（只能在 <code>constructor</code> 中）</li><li>箭头函数没有 <code>super</code>，如果被访问，它会从外部函数获取。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 当继承时没有写自己的 constructor</span>
<span class="token keyword">class</span> <span class="token class-name">Rabbit</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token comment">// 为没有自己的 constructor 的扩展类生成的</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>继承类的 <code>constructor</code> 必须调用 <code>super(...)</code>，并且一定要在使用 <code>this</code> 之前调用。</li><li>派生类的 <code>constructor</code> 必须调用 <code>super()</code>，否则 <code>this</code> 不会被定义。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Rabbit</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> earLength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>earLength <span class="token operator">=</span> earLength
  <span class="token punctuation">}</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当父类构造器在派生的类中被调用时，它会使用被重写的方法。</li><li>父类构造器总是会使用它自己字段的值，而不是被重写的那一个。</li><li>类字段初始化，对于基类（还未继承任何东西的那种），在构造函数调用前初始化，对于派生类，在 <code>super()</code> 后立刻初始化。</li><li>当一个函数被定义为类或者对象方法时，它的 <code>[[HomeObject]]</code> 属性就成为了该对象，然后 <code>super</code> （仅用于）使用它来解析父原型及其方法。</li><li><code>[[HomeObject]]</code> 是为类和普通对象中的方法定义的，不是函数属性。</li></ul><h3 id="_51-静态属性与方法" tabindex="-1"><a class="header-anchor" href="#_51-静态属性与方法" aria-hidden="true">#</a> 51 - 静态属性与方法</h3><ul><li>静态方法被用于实现属于整个类的功能，它与具体的类实例无关。</li><li>把一个方法作为一个整体赋值给类，这样的方法被称为静态的（static）</li><li>通常静态方法用于实现属于整个类，但不属于该类任何特定对象的函数。</li><li>静态方法也被用于与数据库相关的公共类，可以用于搜索/保存/删除数据库中的条目。</li><li>静态方法可以在类上调用，而不是在单个对象上。</li><li>静态属性和方法是可被继承的。</li><li>内建的 <code>Object</code> 构造函数 <code>Object.__proto__ === Function.prototype</code></li><li>class Rabbit：<code>Rabbit.__proto__ === Function.prototype</code></li><li>class Rabbit extends Object： <code>Rabbit.__proto__ === Object</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 静态属性</span>
<span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> publisher <span class="token operator">=</span> <span class="token string">&quot;levi Ding&quot;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Article<span class="token punctuation">.</span>publisher<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_52-私有的与受保护的" tabindex="-1"><a class="header-anchor" href="#_52-私有的与受保护的" aria-hidden="true">#</a> 52 - 私有的与受保护的</h3><ul><li>内部接口：可以通过该类的其他方法访问，但不能从外部访问的方法和属性。</li><li>外部接口：可以从类的外部访问的方法和属性。</li><li>公有的：可从任何地方访问，它们构成了外部接口。</li><li>私有的：只能从类的内部访问，这些用于内部接口。</li><li>受保护的：（不是JS语言级别实现的）私有的，但可以从继承的类进行访问。</li><li>受保护的属性通常以下划线 <code>_</code> 作为前缀。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 受保护的</span>
<span class="token keyword">class</span> <span class="token class-name">CoffeeMachine</span> <span class="token punctuation">{</span>
  _waterAmount <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">set</span> <span class="token function">waterAmount</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_waterAmount <span class="token operator">=</span> value
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">waterAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_waterAmount
  <span class="token punctuation">}</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">power</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_power <span class="token operator">=</span> power
  <span class="token punctuation">}</span>

  <span class="token comment">// 设置为只读 没有 setter</span>
  <span class="token keyword">get</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_power
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> coffeeMachine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>

coffeeMachine<span class="token punctuation">.</span>waterAmount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coffeeMachine<span class="token punctuation">.</span>waterAmount<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coffeeMachine<span class="token punctuation">.</span>power<span class="token punctuation">)</span>
coffeeMachine<span class="token punctuation">.</span>power <span class="token operator">=</span> <span class="token number">250</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coffeeMachine<span class="token punctuation">.</span>power<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新增语言级私有语法，私有属性和方法应该以 <code>#</code> 开头，它们只在类的内部可被访问，无法从外部或从继承的类中访问它。</li><li>私有字段与公共字段不会发生冲突，可以同时拥有私有的 <code>#waterAmount</code> 和公共的 <code>waterAmount</code> 字段。</li><li>私有字段不能通过 <code>this[name]</code> 访问。</li></ul><h3 id="_53-扩展内建类" tabindex="-1"><a class="header-anchor" href="#_53-扩展内建类" aria-hidden="true">#</a> 53 - 扩展内建类</h3><ul><li>内建的方法例如 <code>filter</code>、<code>map</code> 等，返回的正是子类 <code>PowerArray</code> 的新对象，它们内部使用了对象的 <code>constructor</code> 属性来实现这一功能。</li><li>添加一个特殊的静态 getter <code>Symbol.species</code>，如果存在，则应返回 JS 在内部用来在 <code>map</code> 和 <code>filter</code> 等方法中创建新实体的 <code>constructor</code></li><li>内建类却是一个例外，它们相互间不继承静态方法。</li><li><code>Date</code> 和 <code>Object</code> 之间没有连结，它们是独立的，只有 <code>Date.prototype</code> 继承自 <code>Object.prototype</code></li></ul><h3 id="_54-类检查" tabindex="-1"><a class="header-anchor" href="#_54-类检查" aria-hidden="true">#</a> 54 - 类检查</h3><ul><li><code>instanceof</code> 操作符用于检查一个对象是否属于某个特定的 Class，同时它还考虑了继承。</li><li><code>instanceof</code> 并不关心函数，而是关心函数的与原型链匹配的 <code>prototype</code>，真正决定类型的是 <code>prototype</code>，而不是构造函数。</li><li>可以将 <code>obj instanceof Class</code> 检查改为 <code>Class.prototype.isPrototypeOf(obj)</code></li><li>使用特殊的对象属性 <code>Symbol.toStringTag</code> 自定义对象的 <code>toString</code> 方法的行为：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;User&quot;</span>
<span class="token punctuation">}</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类型检查方法：</li></ul><table><thead><tr><th>方法</th><th>用于</th><th>返回值</th></tr></thead><tbody><tr><td>typeof</td><td>原始数据类型</td><td>string</td></tr><tr><td>{}.toString</td><td>原始数据类型、内建对象、包含 Symbol.toStringTag 属性的对象</td><td>string</td></tr><tr><td>instanceof</td><td>对象，考虑继承时更出色</td><td>true/false</td></tr></tbody></table><ul><li>多态性（polymorphic）的函数，该函数根据参数的类型对参数进行不同的处理。</li></ul><h3 id="_55-mixin-模式" tabindex="-1"><a class="header-anchor" href="#_55-mixin-模式" aria-hidden="true">#</a> 55 - Mixin 模式</h3><ul><li>Mixin 模式是一个包含可被其他类使用而无需继承的方法的类。</li><li>JS 不支持多重继承，但是可以通过将方法拷贝到原型中来实现 Mixin</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> sayHiMixin <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bye </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 拷贝方法</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> sayHiMixin<span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Dude&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Hello Dude</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>.trigger(name, [...data])</td><td>事件名称， 带有事件数据的其他参数</td><td>在发生重要的事情时生成一个事件</td></tr><tr><td>.on(name, handler)</td><td>给定的事件， 监听器函数</td><td>为具有给定名称的事件添加 handler 函数作为监听器，当具有给定 name 的事件触发时将调用该方法，并从 .trigger 调用中获取参数</td></tr><tr><td>.off(name, handler)</td><td>删除 handler 监听器</td><td></td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Menu</span> <span class="token punctuation">{</span>
  <span class="token function">choose</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 添加带有事件相关方法的 mixin</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Menu</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> eventMixin<span class="token punctuation">)</span>

<span class="token keyword">let</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 添加一个事件处理程序（handler），在被选择时被调用：</span>
menu<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Value selected: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 触发事件 =&gt; 运行上述的事件处理程序（handler）并显示：</span>
<span class="token comment">// 被选中的值：123</span>
menu<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_56-错误处理" tabindex="-1"><a class="header-anchor" href="#_56-错误处理" aria-hidden="true">#</a> 56 - 错误处理</h3><ul><li><code>try...catch...</code> 首先执行 <code>try {...}</code> 中的代码，如果这里没有错误则忽略 <code>catch (err)</code>，即执行到 <code>try</code> 的末尾并跳过 <code>catch</code> 继续执行；如果这里出现错误，则 <code>try</code> 执行停止，控制流转向 <code>catch (err)</code> 的开头，变量 <code>err</code>（可以使用任何名称）将包含一个 <code>error</code> 对象，该对象包含了所发生事件的详细信息。</li><li><code>try...catch...</code> 仅对运行时的 <code>error</code> 有效，只能处理有效代码中出现的错误，这类错误被称为运行时的错误（runtime errors），有时被称为异常（exceptions）</li><li>发生错误时，JS 生成一个包含有关其详细信息的对象，然后将该对象作为参数传递给 <code>catch</code></li><li><code>error</code> 对象的常用属性有 <code>name</code>、<code>message</code>、<code>stack</code></li><li><code>throw</code> 操作符会生成一个 <code>error</code> 对象，在 <code>try</code> 中不符合要求时主动抛出一个异常。</li><li>JS 中有很多内建的标准 <code>error</code> 的构造器 <code>Error</code>（错误）、<code>SyntaxError</code>（语法错误）、<code>ReferenceError</code>（引用错误）、<code>TypeError</code>（类型错误） 等，也可以使用它们来创建 <code>error</code> 对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>再次抛出时 <code>catch</code> 应该只处理它知道的 <code>error</code>，并抛出所有其他 <code>error</code>，可以接由外部的 <code>try...catch</code> 处理。</li><li><code>try...catch...finally...</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span> 尝试执行的代码 <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span> 处理 error <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span> 总是会执行的代码 <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>finally</code> 子句适用于 <code>try...catch</code> 的任何出口，这包括显式的 <code>return</code>，<code>finally</code> 会在控制转向外部代码前被执行，在跳出之前需要执行 <code>finally</code> 中的代码。</li><li>全局 <code>catch</code> 将一个函数赋值给特殊的 <code>window.onerror</code> 属性，该函数将在发生未捕获的 <code>error</code> 时执行。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 自定义错误</span>
<span class="token keyword">class</span> <span class="token class-name">ValidationError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;ValidationError&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用法</span>
<span class="token keyword">function</span> <span class="token function">readUser</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ValidationError</span><span class="token punctuation">(</span><span class="token string">&quot;No field: age&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ValidationError</span><span class="token punctuation">(</span><span class="token string">&quot;No field: name&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> user
<span class="token punctuation">}</span>

<span class="token comment">// try..catch 的工作示例</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">readUser</span><span class="token punctuation">(</span><span class="token string">&#39;{ &quot;age&quot;: 25 }&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">ValidationError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid data: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;JSON Syntax Error: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 未知的 error，再次抛出</span>
    <span class="token keyword">throw</span> err
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_57-回调" tabindex="-1"><a class="header-anchor" href="#_57-回调" aria-hidden="true">#</a> 57 - 回调</h3><ul><li>基于回调的异步编程风格，异步执行某项功能的函数应该提供一个 Callback 参数用于在相应事件完成时调用，可以在回调中回调。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>
  script<span class="token punctuation">.</span>src <span class="token operator">=</span> src

  script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span>
  script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Script load error for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Error 优先回调</span>
<span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">&#39;/my/script.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> script</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理 error</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 脚本加载成功</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>回调地狱或厄运金字塔是指过多的嵌套调用，可以通过使每个行为都成为一个独立的函数来尝试减轻这种问题，最好的方法之一就是使用 Promise</li></ul><h3 id="_58-promise" tabindex="-1"><a class="header-anchor" href="#_58-promise" aria-hidden="true">#</a> 58 - Promise</h3><ul><li>Promise 是将生产者代码和消费者代码连接在一起的一个特殊的 JS 对象，它表示一个异步操作的最终结果与值。</li><li>Promise 使得异步方法可以像同步方法那样返回值，但异步方法并不会立即返回最终的值，而是会返回一个 Promise 对象，以便在未来某个时候把值交给使用者。</li><li>Promise 通常被用于网络请求。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Promise 对象的构造器语法</span>
<span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// executor（生产者代码）</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>传递给 <code>new Promise()</code> 的函数被称为 executor，当 <code>new Promise()</code> 被创建 executor 会自动运行，它包含最终应产出结果的生产者代码，它的参数 <code>resolve</code> 和 <code>reject</code> 是由 JS 自身提供的回调。</li><li>当 executor 获得了结果，将调用以下回调之一：<code>resolve(value)</code> 如果任务成功完成并带有结果 value，<code>reject(error)</code> 如果出现了 error 即为 error 对象。总之 executor 会自动运行并尝试执行一项工作，尝试结束后，如果成功则调用 <code>resolve(value)</code> 如果出现 error 则调用 <code>reject(error)</code></li><li>构造器返回的 Promise 对象具有以下内部属性：<code>state</code> 最初是 pending，然后在 <code>resolve(value)</code> 被调用时变为 fulfilled，在 <code>reject(error)</code> 被调用时变为 rejected；<code>result</code> 最初是 undefined，然后在 <code>resolve(value)</code> 被调用时变为 value，在 <code>reject(error)</code> 被调用时变为 error</li><li>executor 只能调用一个 <code>resolve(value)</code> 或一个 <code>reject(error)</code>，任何状态的更改都是最终的，<code>resolve/reject</code> 只需要一个参数（或不包含任何参数）并且将忽略额外的参数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* handle a successful result */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* handle an error */</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.then()</code> 的第一个参数是一个函数，该函数将在 promise resolved 且接收到结果后执行，<code>.then()</code> 的第二个参数也是一个函数，该函数将在 promise rejected 且接收到 error 信息后执行。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Whoops!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// .catch(f) 与 promise.then(null, f) 一样</span>
promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.catch()</code> 调用是 <code>.then(null, f)</code> 的完全的模拟，它只是一个简写形式。</li><li><code>.finally()</code> 类似于 <code>.then(f, f)</code>，因为当 promise settled 时 f 就会执行，即无论 Promise 被 <code>resolve</code> 还是 <code>reject</code>，<code>finally</code> 的功能是设置一个处理程序在前面的操作完成后，执行清理/终结。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 做一些需要时间的事儿，之后调用可能会 resolve 也可能会 reject */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 在 promise 为 settled 时运行，无论成功与否</span>
<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> stop loading indicator<span class="token punctuation">)</span>
<span class="token comment">// 所以，加载指示器（loading indicator）始终会在继续之前停止</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> show result<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> show error<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.finally()</code> 处理程序没有参数，<code>.finally()</code> 处理程序也不应该返回任何内容。</li><li><code>.finally()</code> 处理程序没有得到前一个处理程序的结果（它没有参数），而这个结果被传递给了下一个合适的处理程序，如果 <code>.finally()</code> 处理程序返回了一些内容，那么这些内容会被忽略，当 <code>.finally()</code> 抛出 error 时，执行将转到最近的 error 的处理程序。</li><li>如果 Promise 为 pending 状态，<code>.then()/catch()/finally()</code> 处理程序将等待它的结果。</li></ul><p><strong>Promise链</strong></p><ul><li>作为一个好的方法，异步行为应该始终返回一个 Promise</li><li><code>.then()</code> 中所使用的处理程序可以创建并返回一个 Promise，返回 Promise 使能够构建异步行为链，确切地说处理程序返回的不完全是一个 Promise，而是返回的被称为 thenable 对象，一个具有方法 <code>.then()</code> 的任意对象，它会被当做一个 Promise 来对待。</li><li>在 executor 周围的隐式 <code>try..catch...</code> 自动捕获了 error，并将其变为 rejected promise，<code>.then()</code> 处理程序中 <code>throw()</code>，这意味着 Promise 被 rejected，因此控制权移交至最近的 error 处理程序。</li><li>在 <code>.catch()</code> 中 <code>throw()</code> 那么控制权就会被移交到下一个最近的 error 处理程序，处理该 error 并正常完成，那么它将继续到最近的成功的 <code>.then()</code> 处理程序。</li><li>捕获所有 error 的最简单的方法是将 <code>.catch()</code> 附加到链的末尾。</li><li>在任何情况下都应该有 <code>unhandledrejection</code> 事件处理程序，以跟踪未处理的 error 并告知用户（可能还有的服务器）有关信息，以使应用程序永远不会死掉。</li><li>总结，如果 <code>.then()</code> 或 <code>.catch()</code> <code>.finally()</code> 处理程序返回一个 Promise，那么链的其余部分将会等待，直到它状态变为 settled，当它被 settled 后，其 result 或 error 将被进一步传递下去。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;unhandledrejection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这个事件对象有两个特殊的属性：</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>promise<span class="token punctuation">)</span>  <span class="token comment">// [object Promise] - 生成该全局 error 的 promise</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>  <span class="token comment">// Error: Whoops! - 未处理的 error 对象</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 没有用来处理 error 的 catch</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Whoops!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Fetch()</strong></p><ul><li><code>fetch(url)</code> 方法从远程服务器加载用户信息。</li><li><code>fetch(url)</code> 返回的 response 对象还包括 <code>response.json()</code> 方法，该方法读取远程数据并将其解析为 JSON，<code>response.text()</code> 方法，当全部文字内容从远程服务器下载完成后，它会返回一个 Promise，该 Promise 以刚刚下载完成的这个文本作为 result 进行 <code>resolve()</code></li></ul><h3 id="_59-promise-api" tabindex="-1"><a class="header-anchor" href="#_59-promise-api" aria-hidden="true">#</a> 59 - Promise API</h3><table><thead><tr><th>方法</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Promise.all(iterable)</td><td>由 Promise 项组成的数组</td><td>并行执行多个 Promise 并等待所有 Promise 准备就绪，如果出现 error，其他 Promise 将被忽略，返回存放它们结果的数组</td></tr><tr><td>Promise.allSettled(iterable)</td><td>由 Promise 项组成的数组</td><td>等待所有的 Promise 被 settle 无论结果如何，返回结果的对象数组</td></tr><tr><td>Promise.race(iterable)</td><td>由 Promise 项组成的数组</td><td>只等待第一个 settled 的 Promise 并获取其结果，将其 result/error 作为结果返回</td></tr><tr><td>Promise.any(iterable)</td><td>由 Promise 项组成的数组</td><td>等待第一个 fulfilled 的 Promise，并将这个 fulfilled 的 Promise 返回，如果给出的 Promise 都 rejected，那么则返回 rejected 的 Promise 和 AggregateError 错误类型的 error 实例，并将其结果作为结果返回</td></tr><tr><td>Promise.resolve(value)</td><td>结果数据</td><td>用结果 value 创建一个 resolved 的 Promise</td></tr><tr><td>Promise.reject(error)</td><td>错误对象</td><td>用 error 创建一个 rejected 的 Promise</td></tr></tbody></table><ul><li>一个常见的技巧是，将一个任务数据数组映射到一个 Promise 数组，然后将其包装到 <code>Promise.all()</code></li><li>任意一个 Promise 被 <code>reject()</code>，由 <code>Promise.all()</code> 返回的 Promise 就会立即 <code>reject()</code>，并且带有的就是这个 error，如果出现 error，其他 Promise 将被忽略。</li><li><code>Promise.all()</code> 接受含有 Promise 项的可迭代对象（大多数情况下是数组）作为参数，但是如果这些对象中的任何一个不是 Promise，那么它将被按原样传递给结果数组。</li><li><code>Promise.allSettled()</code>，对于每个 Promise，都得到了其状态 <code>status</code> 和 <code>value/reason</code>，以对象数组的形式返回它们的结果: <code>status</code> 为 fulfilled 或 rejected、<code>value</code>（如果为 fulfilled）或 <code>reason</code>（如果为 rejected）</li><li>Promisification 是指将一个接受回调的函数转换为一个返回 Promise 的函数，但不是回调的完全替代。</li><li>在实际开发中，可能需要 promisify 很多函数，所以使用一个 helper（辅助函数）很有意义，将其称为 <code>promisify(f)</code>：它接受一个需要被 promisify 的函数 f，并返回一个包装函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 返回一个包装函数</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 对 f 的自定义的回调</span>
      <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 将自定义的回调附加到 f 参数的末尾</span>
      args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>

      <span class="token comment">// 调用原始的函数</span>
      <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> loadScriptPromise <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>loadScript<span class="token punctuation">)</span>
<span class="token function">loadScriptPromise</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Promisification 仅适用于调用一次回调的函数，进一步的调用将被忽略。</li></ul><h3 id="_60-promise-微任务" tabindex="-1"><a class="header-anchor" href="#_60-promise-微任务" aria-hidden="true">#</a> 60 - Promise 微任务</h3><ul><li>Promise 处理始终是异步的，内部队列 PromiseJobs，通常被称为微任务队列（microtask queue）</li><li>当一个 Promise 准备就绪时，它的 <code>.then()/catch()/finally()</code> 处理程序就会被放入队列中，但是它们不会立即被执行，当 JS 引擎执行完当前的代码，它会从队列中获取任务并执行它。</li><li>如果需要确保一段代码在 <code>.then()/catch()/finally()</code> 之后被执行，可以将它添加到链式调用的 <code>.then()</code> 中。</li></ul><h3 id="_61-async-await" tabindex="-1"><a class="header-anchor" href="#_61-async-await" aria-hidden="true">#</a> 61 - async/await</h3><ul><li><code>async/await</code> 是以更舒适的方式使用 Promise 的一种特殊语法。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加上 <code>async</code> 的函数总是返回一个 Promise，其他值将自动被包装在一个 resolved 的 Promise 中。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 只在 async 函数内工作</span>
<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">await</span> promise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>await</code> 让 JS 引擎等待直到 Promise 完成并返回结果，不能在普通函数中使用 <code>await</code></li><li><code>await</code> 实际上会暂停函数的执行，直到 Promise 状态变 settled，然后以 Promise 的结果继续执行。</li><li>现代浏览器在 modules 里允许顶层的 <code>await</code>，也可以包装到匿名的异步函数中。</li><li><code>await</code> 允许使用 thenable 对象（那些具有可调用的 <code>.then()</code> 方法的对象）</li><li>当使用 <code>async/await</code> 时，几乎就不会用到 <code>.then()</code> 了，因为 <code>await</code> 处理了等待，并且使用常规的 <code>try..catch...</code> 而不是 <code>.catch()</code> 在所有 <code>async</code> 函数之外，在语法上就不能使用 <code>await</code> 了，所以这时候通常的做法是添加 <code>.then()/catch()</code> 来处理最终的结果或掉出来的 error</li></ul><h3 id="_62-generator" tabindex="-1"><a class="header-anchor" href="#_62-generator" aria-hidden="true">#</a> 62 - Generator</h3><ul><li>Generator 可以按需一个接一个地返回 <code>yield</code> 多个值，它们可与 iterable 完美配合使用，从而轻松地创建数据流。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generateSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token number">1</span>
  <span class="token keyword">yield</span> <span class="token number">2</span>
  <span class="token keyword">return</span> <span class="token number">3</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> generator <span class="token operator">=</span> <span class="token function">generateSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> one <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// {value: 1, done: false}</span>
<span class="token keyword">let</span> two <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// {value: 2, done: false}</span>
<span class="token keyword">let</span> three <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// {value: 3, done: true}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此类函数被调用时，它不会运行其代码，而是返回一个被称为 generator object 的特殊对象（生成器对象）来管理执行流程。</li><li>Generator 的主要方法就是 <code>.next()</code> 其结果始终是一个具有两个属性的对象：<code>value</code> 产出的的值，<code>done</code> 如果 Generator 函数已执行完成则为 true，否则为 false</li><li><code>function* f()</code> 或 <code>function *f()</code> 两种语法都是对的，但更倾向第一种。</li><li>Generator 是可迭代的，当 <code>{..., done: true}</code> 时 <code>for..of...</code> 循环会忽略最后一个 value，想要通过 <code>for..of...</code> 循环显示所有的结果必须使用 <code>yield</code> 返回它们，另外可以使用 iterator 的所有相关功能，例如 spread 语法 <code>...</code></li><li>Generator 组合是一个特殊功能，它允许透明地将 Generator 彼此嵌入到一起，使用 <code>yield*</code> 这个特殊的语法来将一个 Generator 嵌入组合到另一个 Generator 中。</li><li><code>yield</code> 是一条双向路，它不仅可以向外返回结果，而且还可以将外部的值传递到 Generator 内。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// for (let value of generator) {</span>
<span class="token comment">//   console.log(value)</span>
<span class="token comment">// }</span>

<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">&quot;2 + 2 = ?&quot;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> generators <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> question <span class="token operator">=</span> generators<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value

generators<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>向 <code>yield</code> 传递一个 error，应该调用 <code>generator.throw(err)</code> 在这种情况下 error 将被抛到对应的 <code>yield</code> 所在的那一行。</li><li><code>generator.return(value)</code> 完成 Generator 的执行并返回给定的 value，在已完成的 Generator 上再次使用 <code>generator.return()</code>，它将再次返回该值。</li></ul><h3 id="_63-异步迭代与-generator" tabindex="-1"><a class="header-anchor" href="#_63-异步迭代与-generator" aria-hidden="true">#</a> 63 - 异步迭代与 Generator</h3><ul><li>异步迭代允许对按需通过异步请求而得到的数据进行迭代。</li><li>异步可迭代对象使用 <code>Symbol.asyncIterator</code> 取代 <code>Symbol.iterator</code> <code>next()</code> 方法应该返回一个 Promise 且带有下一个值，状态为 fulfilled 关键字 <code>async</code> 可以实现这一点，可以简单地使用 <code>async next()</code> ，然后应该使用 <code>for await (let item of iterable)</code> 循环来迭代这样的对象。</li><li>Spread 语法 <code>...</code> 无法异步工作。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>

  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span>
      <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span>

      <span class="token keyword">async</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 可以在 async next 内部使用 await</span>
        <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token operator">++</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> range<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment">// 1 2 3 4 5</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 function 前面加上 <code>async</code> 这即可使 Generator 变为异步的，使用 <code>for await (...)</code> 来遍历它。</li><li>异步 Generator 和常规的 Generator 在内部是有区别的，对于异步 Generator <code>generator.next()</code> 方法是异步的，它返回 Promise，在一个常规的 Generator 中，使用 <code>result = generator.next()</code> 来获得值，但在一个异步 Generator 中，应该添加 <code>await</code> 关键字。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generateSequence</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span> i
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> generator <span class="token operator">=</span> <span class="token function">generateSequence</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> generator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment">// 1 2 3 4 5</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_64-模块" tabindex="-1"><a class="header-anchor" href="#_64-模块" aria-hidden="true">#</a> 64 - 模块</h3><ul><li>随着应用越来越大，想要将其拆分成多个文件，即所谓的模块（module）。一个模块可以包含用于特定目的的类或函数库，一个模块就是一个文件，一个脚本就是一个模块。</li><li><code>export</code> 关键字标记了可以从当前模块外部访问的变量和函数。</li><li><code>import</code> 关键字允许从其他模块导入功能。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 📁 sayHi.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 📁 main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> sayHi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./sayHi.js&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayHi<span class="token punctuation">)</span>
<span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 特性来告诉浏览器，此脚本应该被当作模块来对待。</li><li>模块只通过 HTTP(s) 工作，而非本地。</li><li>模块始终在严格模式下运行。</li><li>每个模块都有自己的顶级作用域，一个模块中的顶级作用域变量和函数在其他脚本中是不可见的，模块应该 <code>export</code> 它们想要被外部访问的内容，并 <code>import</code> 它们所需要的内容。</li><li>可以通过将变量显式地分配给 <code>window</code> 的一个属性，使其成为窗口级别的全局变量，这样所有脚本都会看到它，无论脚本是否带有 <code>type=&quot;module&quot;</code>，但应尽量避免创建全局变量。</li><li>模块代码仅在第一次导入时被解析。</li><li><code>i<wbr>mport.meta</code> 对象包含关于当前模块的信息，它的内容取决于其所在的环境。</li><li>在一个模块中顶级 this 是 undefined，非模块脚本的顶级 this 是全局对象。</li><li>在浏览器中，模块脚本是被延迟的，所以要等到 HTML 文档被处理完成才会执行它。</li><li>对于非模块脚本 <code>async</code> 特性仅适用于外部脚本，异步脚本会在准备好后立即运行，独立于其他脚本或 HTML 文档，对于模块脚本，它也适用于内联脚本。</li><li>在浏览器中 <code>import</code> 必须给出相对或绝对的 URL 路径，没有任何路径的模块被称为裸模块。</li></ul><h3 id="_65-导出与导入" tabindex="-1"><a class="header-anchor" href="#_65-导出与导入" aria-hidden="true">#</a> 65 - 导出与导入</h3><ul><li>导出（export）和导入（import）</li><li>可以通过在声明之前放置 <code>export</code> 来标记任意声明为导出，无论声明的是变量，函数还是类都可以。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出数组</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Jan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Feb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mar&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Apr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Aug&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sep&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Oct&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Nov&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Dec&#39;</span><span class="token punctuation">]</span>

<span class="token comment">// 导出 const 声明的变量</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MODULES_BECAME_STANDARD_YEAR</span> <span class="token operator">=</span> <span class="token number">2020</span>

<span class="token comment">// 导出类</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导出与声明可以分开。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 📁 say.js</span>
<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bye, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 导出变量列表</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>sayHi<span class="token punctuation">,</span> sayBye<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把要导入的东西列在花括号 <code>import {...}</code> 中。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 📁 main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>sayHi<span class="token punctuation">,</span> sayBye<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./say.js&#39;</span>

<span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>
<span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果有很多要导入的内容，可以使用 <code>import * as &lt;obj&gt;</code> 将所有内容导入为一个对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 📁 main.js</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> say <span class="token keyword">from</span> <span class="token string">&#39;./say.js&#39;</span>

say<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>
say<span class="token punctuation">.</span><span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>import as</code>，可以使用 <code>as</code> 让导入具有不同的名字 <code>export as</code> 与之类似。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>sayHi <span class="token keyword">as</span> hi<span class="token punctuation">,</span> sayBye <span class="token keyword">as</span> bye<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>模块提供了一个特殊的默认导出 <code>export default</code> 语法，将 <code>export default</code> 放在要导出的实体前，每个文件应该只有一个 <code>export default</code>，然后将其导入而不需要花括号。</li><li>在某些情况下 <code>default</code> 关键词被用于引用默认的导出。</li><li>重新导出，语法 <code>export ... from ...</code> 允许导入内容，并立即将其导出。</li><li>要重新导出默认导出，必须明确写出 <code>export {default as User}</code> <code>export * from &#39;./user.js&#39;</code> 重新导出只导出了命名的导出，但是忽略了默认的导出。</li><li>动态导入 <code>import(module)</code> 表达式加载模块并返回一个 Promise，该 Promise resolve 为一个包含其所有导出的模块对象，可以在代码中的任意位置调用这个表达式，它不是一个函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> modulePath <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Which module to load?&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">import</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>module object<span class="token operator">&gt;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>loading error<span class="token punctuation">,</span> e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> <span class="token keyword">if</span> no such module<span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>动态导入在常规脚本中工作时不需要 <code>script type=&quot;module&quot;</code></li></ul><h3 id="_66-proxy-与-reflect" tabindex="-1"><a class="header-anchor" href="#_66-proxy-与-reflect" aria-hidden="true">#</a> 66 - Proxy 与 Reflect</h3><ul><li>Proxy 对象包装另一个对象并拦截诸如读取/写入属性和其他操作，可以选择自行处理它们，或者透明地允许该对象处理它们，Proxy 是对象的包装器，将代理上的操作转发到对象，并可以选择捕获其中一些操作。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>target</code> 是要包装的对象，可以是任何东西，包括函数。</li><li><code>handler</code> 是代理配置，带有捕捉器（traps，即拦截操作的方法）的对象，比如 <code>get</code> 捕捉器用于读取 <code>target</code> 的属性，<code>set</code> 捕捉器用于写入 <code>target</code> 的属性。</li><li>没有捕捉器时所有对 Proxy 的操作都直接转发给了 <code>target</code>，没有任何捕捉器 Proxy 是一个 <code>target</code> 的透明包装器。</li><li>常见的捕捉器是用于读取/写入的属性，要拦截读取操作 <code>handler</code> 应该有 <code>get(target, property, receiver)</code> 方法。</li><li><code>get(target, property, receiver)</code></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>目标对象</td></tr><tr><td>property</td><td>目标属性名</td></tr><tr><td>receiver</td><td>当目标属性是 getter 访问器属性则 receiver 就是本次读取属性所在的 this 对象</td></tr></tbody></table><ul><li>代理应该在所有地方都完全替代目标对象，目标对象被代理后，任何人都不应该再引用目标对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当写入属性时 <code>set</code> 捕捉器被触发 <code>set(target, property, value, receiver)</code></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>目标对象</td></tr><tr><td>property</td><td>目标属性名称</td></tr><tr><td>value</td><td>目标属性的值</td></tr><tr><td>receiver</td><td>与 get 捕捉器类似，仅与 setter 访问器属性相关，对于 set 操作，它必须在成功写入时返回 true</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> val
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>  <span class="token comment">// Proxy {0: 1}</span>

numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// TypeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>ownKeys</code> 捕捉器拦截 <code>for..in...</code> 的遍历。</li><li>使用 <code>in</code> 操作符来检查一个数字是否在 <code>range</code> 范围内 <code>has</code> 捕捉器会拦截 <code>in</code> 调用。</li><li><code>apply(target, thisArg, args)</code> 捕捉器能使代理以函数的方式被调用。</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>目标对象</td></tr><tr><td>thisArg</td><td>this 的值</td></tr><tr><td>args</td><td>参数列表</td></tr></tbody></table><ul><li>Reflect 是一个内建对象，可简化 Proxy 的创建，Reflect 对象使调用这些内部方法成为了可能，它的方法是内部方法的最小包装。</li><li>对于每个可被 Proxy 捕获的内部方法，在 Reflect 中都有一个对应的方法，其名称和参数与 Proxy 捕捉器相同，所以可以使用 Reflect 来将操作转发给原始对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span>
<span class="token punctuation">}</span>

user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">GET </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> val<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SET </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> val<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> name <span class="token operator">=</span> user<span class="token punctuation">.</span>name  <span class="token comment">// 打印 GET name 返回 &#39;John&#39;</span>
user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Pete&quot;</span>  <span class="token comment">// 打印 SET name=Pete 返回 &#39;Pete&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果一个捕捉器想要将调用转发给对象，则只需使用相同的参数调用 Reflect 就足够了。</li><li>第三个参数 <code>receiver</code> 它保证将正确的 this 传递给 <code>getter</code></li><li>Reflect 调用的命名与捕捉器的命名完全相同。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>许多内建对象，都使用了所谓的内部插槽，内建方法可以直接访问它们，而不通过 <code>[[Get]]/[[Set]]</code> 内部方法，所以 Proxy 无法拦截它们，内建对象被代理后，代理对象没有这些内部插槽，因此内建方法将会失败，但是可以通过 Reflect 和 <code>.bind</code> 解决，内建 Array 没有使用内部插槽，代理数组时没有这种问题。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  #name <span class="token operator">=</span> <span class="token string">&quot;Guest&quot;</span>

  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">value</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">:</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Guest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Proxy 无法拦截严格相等性检查 ===，没有办法拦截对于对象的严格相等性检查，一个对象只严格等于其自身，没有其他值。</li><li>一个可撤销的代理是可以被禁用的代理，<code>Proxy.revocable()</code> 方法可以用来创建一个可撤销的代理对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 该调用返回一个带有 proxy 和 revoke 函数的对象以将其禁用</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>proxy<span class="token punctuation">,</span> revoke<span class="token punctuation">}</span> <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">revocable</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;Valuable data&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>proxy<span class="token punctuation">,</span> revoke<span class="token punctuation">}</span> <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">revocable</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment">// Valuable data</span>

<span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// proxy 不再工作</span>
<span class="token function">alert</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment">// TypeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.revoke()</code> 的调用会从代理中删除对目标对象的所有内部引用，因此它们之间再无连接。</li></ul><h3 id="_67-eval" tabindex="-1"><a class="header-anchor" href="#_67-eval" aria-hidden="true">#</a> 67 - Eval</h3><ul><li>现代编程中，已经很少使用 <code>eval()</code></li><li>内建函数 <code>eval()</code> 允许执行一个代码字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token string">&#39;console.log(&quot;Hello&quot;)&#39;</span>
<span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>  <span class="token comment">// Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>eval()</code> 的结果是最后一条语句的结果，<code>eval()</code> 内的代码在当前词法环境中执行。</li><li>严格模式下 <code>eval()</code> 有属于自己的词法环境，因此不能从外部访问在 <code>eval()</code> 中声明的函数和变量，如果不启用严格模式，<code>eval()</code> 没有属于自己的词法环境，因此可以从外部访问变量。</li><li>如果 <code>eval()</code> 中的代码没有使用外部变量，请以 <code>window.eval()</code> 的形式调用 <code>eval()</code> 通过这种方式，该代码便会在全局作用域内执行。</li><li>如果 <code>eval()</code> 中的代码需要访问局部变量，可以使用 <code>new Function</code> 替代 <code>eval()</code>，并将它们作为参数传递。</li></ul><h3 id="_68-柯里化" tabindex="-1"><a class="header-anchor" href="#_68-柯里化" aria-hidden="true">#</a> 68 - 柯里化</h3><ul><li>柯里化是一种函数的转换，是一种关于函数的高阶技术，指将一个函数从可调用的 <code>f(a, b, c)</code> 转换为可调用的 <code>f(a)(b)(c)</code>，柯里化不会调用函数，它只是对函数进行转换。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用法</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token keyword">let</span> curriedSum <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">curriedSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>curry(func)</code> 的结果就是一个包装器 <code>function(a)</code></li><li>柯里化要求函数具有固定数量的参数，使用 <code>...rest</code> 参数的函数，例如 <code>f(...args)</code> 不能以这种方式进行柯里化。</li><li>柯里化使得函数可以被多参数变体调用，JS 实现通常都保持该函数可以被正常调用，并且如果参数数量不足，则返回偏函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> func<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">curried</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_69-reference-type" tabindex="-1"><a class="header-anchor" href="#_69-reference-type" aria-hidden="true">#</a> 69 - Reference Type</h3><ul><li>Reference Type 是 ECMA 中的一个规范类型，不能直接使用它，但它被用在 JS 语言内部。</li><li>Reference Type 的值是一个三个值的组合(base, name, strict)，其中 base 是对象，name 是属性名，strict 在 use strict 模式下为 true</li><li><code>obj.method()</code> 语句中，点 <code>.</code> 返回的不是一个函数，而是一个特殊的 Reference Type 的值。</li><li>Reference Type 是一个特殊的中间人内部类型，目的是从 <code>.</code> 传递信息给 <code>()</code> 调用，当 <code>()</code> 被在 Reference Type 上调用时，它们会接收到关于对象和对象的方法的完整信息，然后可以设置正确的 this。任何例如赋值 <code>hi = user.hi</code> 等其他的操作，都会将 Reference Type 作为一个整体丢弃掉，而会取 <code>user.hi</code>（一个函数）的值并继续传递，所以任何后续操作都丢失了 this，因此 this 的值仅在函数直接被通过点符号 <code>obj.method()</code> 或方括号 <code>obj[method]</code> 语法（此处它们作用相同）调用时才被正确传递，还有很多种解决这个问题的方式，例如 <code>func.bind()</code></li></ul><h3 id="_70-微任务与宏任务" tabindex="-1"><a class="header-anchor" href="#_70-微任务与宏任务" aria-hidden="true">#</a> 70 - 微任务与宏任务</h3><ul><li>浏览器中 JS 的执行流程和 Node.js 中的流程都是基于事件循环的，是一个在 JS 引擎等待任务、执行任务和进入休眠状态等待更多任务这几个状态之间转换的无限循环。</li><li>多个任务组成了一个队列，即所谓的宏任务队列，队列中的任务基于先进先出的原则执行。</li><li>引擎执行任务时永远不会进行渲染，如果任务执行需要很长一段时间也没关系，仅在任务完成后才会绘制对 DOM 的更改，如果一项任务执行花费的时间过长，浏览器将无法执行其他任务，例如处理用户事件。因此，在一定时间后，浏览器会抛出一个如页面未响应之类的警报，建议你终止这个任务，这种情况常发生在有大量复杂的计算或导致死循环的程序错误时。</li><li>每个宏任务之后，引擎会立即执行微任务队列中的所有任务，然后再执行其他的宏任务或渲染或进行其他任何操作。</li><li>微任务仅来自于的代码，它们通常是由 Promise 创建的，对 <code>.then()/catch()/finally()</code> 处理程序的执行会成为微任务，微任务也被用于 <code>async/await</code> 的幕后，因为它是 Promise 处理的另一种形式。</li><li>微任务会在执行任何其他事件处理或渲染或执行任何其他宏任务之前完成。</li><li>有一个特殊的函数 <code>queueMicrotask(func)</code> 它对 <code>func</code> 进行排队，以在微任务队列中执行。</li><li>安排一个新的宏任务，使用零延迟的 <code>setTimeout(f)</code>，它可被用于将繁重的计算任务拆分成多个部分，以使浏览器能够对用户事件作出反应，并在任务的各部分之间显示任务进度。此外，也被用于在事件处理程序中，将一个行为安排在事件被完全处理（冒泡完成）后。</li><li>安排一个新的微任务，使用 <code>queueMicrotask(f)</code>，Promise 处理程序也会通过微任务队列，在微任务之间没有 UI 或网络事件的处理，它们一个立即接一个地执行，所以可以使用 <code>queueMicrotask()</code> 来在保持环境状态一致的情况下，异步地执行一个函数。</li></ul><h2 id="二-dom-与-bom" tabindex="-1"><a class="header-anchor" href="#二-dom-与-bom" aria-hidden="true">#</a> （二）DOM 与 BOM</h2><h3 id="_01-介绍" tabindex="-1"><a class="header-anchor" href="#_01-介绍" aria-hidden="true">#</a> 01 - 介绍</h3><ul><li>Window 对象（根），代表着浏览器窗口，该对象提供了控制浏览器窗口的方法；文档对象模型（Document Object Model）简称 DOM，将所有页面内容表示为可以修改的对象；浏览器对象模型（Browser Object Model）简称 BOM，表示由浏览器（主机环境）提供的用于处理文档之外的所有内容的其他对象。</li><li>按照 DOM 规范，必须具有 <code>&lt;tbody&gt;</code> 标签，但 HTML 文本可能会忽略它，然后浏览器在创建 DOM 时，自动地创建了 <code>&lt;tbody&gt;</code></li><li>HTML 中的所有内容，甚至注释，都会成为 DOM 的一部分。</li><li>每个 HTML 标签都是一个对象，标签内的文本也是一个对象，DOM 将 HTML 表示为标签的树形结构，每个树的节点都是一个对象，标签被称为元素节点，元素内的文本称为文本节点。</li><li>一共有 12 种节点类型，通常用到的是其中的 4 种。</li></ul><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>document</td><td>DOM 的入口点</td></tr><tr><td>元素节点</td><td>HTML 标签</td></tr><tr><td>文本节点</td><td>标签中的文本、空格</td></tr><tr><td>注释节点</td><td>不会显示，但 JS 可以从 DOM 中读取</td></tr></tbody></table><p><strong>关于 Node （节点）和 Element （元素）</strong></p><ul><li>Node 中包含不同类型的节点，Element 是 Node 的一种，Element 继承于 Node，具有 Node 的方法，Element 一定是 Node 而 Node 不一定是 Element</li><li>Node 包括有：Element、Text、Comment...</li></ul><p><strong>关于 NodeList 和 HTMLCollection</strong></p><ul><li>NodeList 是节点的集合，既包含元素节点，也包括文本节点、注释节点等；HTMLCollection 是元素的集合，只包含元素节点。</li></ul><h3 id="_02-访问-dom" tabindex="-1"><a class="header-anchor" href="#_02-访问-dom" aria-hidden="true">#</a> 02 - 访问 DOM</h3><ul><li>对 DOM 的所有操作都是以 <code>document</code> 对象开始的。</li><li>如果一个脚本是在 <code>&lt;head&gt;</code> 中，那么脚本是访问不到 <code>document.body</code> 元素的，因为浏览器还没有读到它。</li><li><code>&lt;html&gt; == document.documentElement</code></li><li><code>&lt;body&gt; == document.body</code></li><li><code>&lt;head&gt; == document.head</code></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Node.childNodes</td><td>返回指定节点的子节点集合，该集合为即时更新的集合</td></tr><tr><td>Node.firstChild</td><td>返回指定节点的第一个子节点，如果无子节点，返回 null</td></tr><tr><td>Node.lastChild</td><td>返回指定节点的最后一个子节点，如果无子节点，返回 null</td></tr><tr><td>Node.nextSibling</td><td>返回其父节点的 childNodes 列表中的后一个节点，如果节点为最后一个节点，返回 null</td></tr><tr><td>Node.previousSibling</td><td>返回其父节点的 childNodes 列表中的前一个节点，如果节点为第一个节点，返回 null</td></tr><tr><td>Node.parentNode</td><td>返回指定的节点在 DOM 树中的父节点</td></tr><tr><td><strong>方法</strong></td><td><strong>描述</strong></td></tr><tr><td>Node.hasChildNodes()</td><td>检查指定节点是否有子节点</td></tr></tbody></table><ul><li><code>Node.childNodes</code> 的返回结果是一个集合，一个类数组的可迭代对象，可以使用 <code>for..of...</code> 来迭代它。</li></ul><h3 id="_03-搜索-dom" tabindex="-1"><a class="header-anchor" href="#_03-搜索-dom" aria-hidden="true">#</a> 03 - 搜索 DOM</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Document.getElementById(&#39;id&#39;)</td><td>匹配给定 ID 的元素，返回值是 Element 对象</td></tr><tr><td>Document.getElementsByClassName(&#39;class&#39;)</td><td>匹配给定 class 的元素，返回值是匹配元素的实时集合 HTMLCollection</td></tr><tr><td>Document.getElementsByTagName(&#39;tag&#39;)</td><td>匹配给定标签的元素，返回值是匹配元素的实时集合 HTMLCollection</td></tr><tr><td>Document.getElementsByName(&#39;name&#39;)</td><td>匹配给定 name 的节点，返回值是匹配节点的实时集合 NodeList</td></tr><tr><td>Document.querySelectorAll(&#39;selectors&#39;)</td><td>匹配给定 CSS 选择器的节点，返回值是所有匹配节点的静态集合 NodeList</td></tr><tr><td>Document.querySelector(&#39;selectors&#39;)</td><td>匹配给定 CSS 选择器的第一个元素，返回值是 Element 对象</td></tr><tr><td>Element.matches(&#39;selectors&#39;)</td><td>检查给定元素是否与给定的 CSS 选择器匹配，返回 true 或 false</td></tr><tr><td>Element.closest(&#39;selectors&#39;)</td><td>查找给定元素的该 CSS 选择器的最近祖先，元素自身也会被搜索</td></tr></tbody></table><ul><li>不要使用以 ID 命名的全局变量来访问元素。</li><li><code>.getElementsBy*</code> 方法都会返回一个实时的（live）集合，这样的集合始终反映的是文档的当前状态，并且在文档发生更改时会自动更新。</li><li><code>.querySelector*</code> 返回的是一个静态的集合，像元素的固定数组。</li></ul><h3 id="_04-节点属性" tabindex="-1"><a class="header-anchor" href="#_04-节点属性" aria-hidden="true">#</a> 04 - 节点属性</h3><ul><li>在规范中 DOM 类不是使用 JS 来描述的，而是一种特殊的接口描述语言（Interface description language），简写为 IDL</li><li>每个 DOM 节点都属于相应的内建类，DOM 节点是常规的 JS 对象，它们使用基于原型的类进行继承。</li><li><code>console.log(elem)</code> 显示元素的 DOM 树。</li><li><code>console.dir(elem)</code> 将元素显示为 DOM 对象，非常适合探索其属性。</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Node.nodeName</td><td>返回当前节点的名称</td></tr><tr><td>Element.tagName</td><td>返回当前元素的名称</td></tr><tr><td>Element.innerHTML</td><td>获取或设置 HTML 语法表示的元素的后代</td></tr><tr><td>Element.outerHTML</td><td>获取或设置 HTML 语法表示的元素及其后代</td></tr><tr><td>Element.innerText</td><td>返回节点及其后代的渲染文本内容，只展示页面出现的</td></tr><tr><td>Node.textContent</td><td>返回节点及其后代的所有文本内容，包括 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 元素中的内容</td></tr><tr><td>Element.data</td><td>返回当前元素的值</td></tr><tr><td>Node.nodeValue</td><td>返回当前节点的值</td></tr><tr><td>Element.hidden</td><td>元素的可见性</td></tr><tr><td>Element.value</td><td>表单元素中的数据</td></tr><tr><td>Element.href</td><td>超链接元素中的地址</td></tr><tr><td>Element.id</td><td>元素的 ID</td></tr></tbody></table><h3 id="_05-特性和属性" tabindex="-1"><a class="header-anchor" href="#_05-特性和属性" aria-hidden="true">#</a> 05 - 特性和属性</h3><ul><li>DOM 节点是常规的 JS 对象，可以更改它们。</li><li>当浏览器加载页面时，它会解析 HTML 并从中生成 DOM 对象。对于元素节点，大多数标准的 HTML 特性（attributes）会自动变成 DOM 对象的属性（properties），所以当一个元素有 id 或其他标准的特性，那么就会生成对应的 DOM 属性，但非标准的特性则不会，特性与属性映射并不是一一对应的。</li><li>所有特性都可以通过使用以下方法进行访问。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Element.hasAttribute(&#39;name&#39;)</td><td>检查特性是否存在</td></tr><tr><td>Element.getAttribute(&#39;name&#39;)</td><td>返回元素上指定的特性值</td></tr><tr><td>Element.setAttribute(&#39;name&#39;, value)</td><td>设置元素上指定的特性值</td></tr><tr><td>Element.removeAttribute(&#39;name&#39;)</td><td>移除元素上指定的特性值</td></tr><tr><td>Element.attributes</td><td>返回元素上指定特性的集合</td></tr></tbody></table><ul><li>特性的名称是大小写不敏感的，可以将任何东西赋值给特性，但是这些东西都会变成字符串类型的，而 DOM 属性不总是字符串类型的。</li><li>Attributes 集合是可迭代对象，该对象将所有元素的特性（标准和非标准的）作为 <code>name</code> 和 <code>value</code> 属性存储在对象中。</li><li>当一个标准的特性被改变，对应的属性也会自动更新。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// 特性 =&gt; 属性</span>
  input<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// id（被更新了）</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>id<span class="token punctuation">)</span>

  <span class="token comment">// 属性 =&gt; 特性</span>
  input<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&#39;newId&#39;</span>
  <span class="token comment">// newId（被更新了）</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>存在一些例外，例如 <code>input.value</code> 只能从特性同步到属性，反过来则不行，如果想从 HTML 中恢复原始值，那么该值就在特性中。</li><li>非标准的特性常常用于将自定义的数据从 HTML 传递到 JS，或者用于为 JS 标记 HTML 元素。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 标记这个 div 以在这显示 &quot;name&quot; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">show-info</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 标记这个 div 以在这显示 &quot;age&quot; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">show-info</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 这段代码找到带有标记的元素，并显示需要的内容</span>
  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Pete&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> div <span class="token keyword">of</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;[show-info]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在字段中插入相应的信息</span>
    <span class="token keyword">let</span> field <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;show-info&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 首先 &quot;name&quot; 变为 Pete，然后 &quot;age&quot; 变为 25</span>
    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> user<span class="token punctuation">[</span>field<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以 <code>data-</code> 开头的特性均被保留供程序员使用，它们可在 <code>dataset</code> 属性中使用。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">data-about</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Elephants<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 以驼峰形式调用</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>about<span class="token punctuation">)</span>  <span class="token comment">// Elephants</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>像 <code>data-order-state</code> 这样的多词特性可以以驼峰式进行调用 <code>dataset.orderState</code></li><li>总结：特性（attribute）是写在 HTML 中的内容，属性（property）是 DOM 对象中的内容，特性会同步到属性中，属性不一定同步到特性中。</li></ul><h3 id="_06-修改文档" tabindex="-1"><a class="header-anchor" href="#_06-修改文档" aria-hidden="true">#</a> 06 - 修改文档</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Document.createElement(&#39;tagName&#39;)</td><td>创建给定名称的 HTML 元素节点</td></tr><tr><td>Document.createTextNode(&#39;text&#39;)</td><td>创建给定内容的文本节点，可用于转义 HTML 字符</td></tr><tr><td>Element.append(...)</td><td>在子元素列表末尾插入给定的 Node 或 DOMString 对象</td></tr><tr><td>Element.prepend(...)</td><td>在子元素列表开头插入给定的 Node 或 DOMString 对象</td></tr><tr><td>Element.before(...)</td><td>在该元素之前插入给定的 Node 或 DOMString 对象</td></tr><tr><td>Element.after(...)</td><td>在该元素之后插入给定的 Node 或 DOMString 对象</td></tr><tr><td>Element.replaceWith(...)</td><td>把该元素替换为给定的 Node 或 DOMString 对象</td></tr><tr><td>Element.remove()</td><td>把对象从它所属的 DOM 树中删除</td></tr><tr><td>Node.appendChild(obj)</td><td>在子节点列表末尾插入给定的 Node 对象，并返回该追加的对象</td></tr><tr><td>Document.write(&#39;html&#39;)</td><td>将 html 就地马上写入页面，调用只在页面加载时工作</td></tr><tr><td>Element.insertAdjacentHTML(where, html)</td><td>将内容作为 HTML 代码插入</td></tr><tr><td>Element.insertAdjacentText(where, text)</td><td>将 text 字符串作为文本插入</td></tr><tr><td>Element.insertAdjacentElement(where, elem)</td><td>将内容作为元素插入</td></tr><tr><td>Node.cloneNode(true)</td><td>创建节点的副本，具有所有特性和子元素</td></tr><tr><td>Node.cloneNode(false)</td><td>创建节点的副本，但不包括子元素</td></tr></tbody></table><p><strong>关于 where</strong></p><ul><li><code>beforebegin</code> 将内容插入到 elem 之前。</li><li><code>afterend</code> 将内容插入到 elem 之后。</li><li><code>afterbegin</code> 将内容插入到 elem 开头。</li><li><code>beforeend</code> 将内容插入到 elem 末尾。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>

div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;alert&quot;</span>

div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&lt;strong&gt;Hi there!&lt;/strong&gt; You&#39;ve read an important message.&quot;</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果要将一个元素移动到另一个地方，则无需将其从原来的位置中删除，所有插入方法都会自动从旧位置删除该节点。</li><li><code>DocumentFragment</code> 是一个特殊的 DOM 节点，用作来传递节点列表的包装器。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">&quot;ul&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">function</span> <span class="token function">getListContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
    li<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

ul<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">getListContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_07-样式和类" tabindex="-1"><a class="header-anchor" href="#_07-样式和类" aria-hidden="true">#</a> 07 - 样式和类</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Element.className</td><td>获取或设置指定元素的 class 属性的值</td></tr><tr><td>Element.classList</td><td>返回元素 class 属性的动态 DOMTokenList 集合</td></tr><tr><td>Element.classList.add(class)</td><td>将给定的标记添加到列表中</td></tr><tr><td>Element.classList.remove(class)</td><td>将给定的标记移除列表</td></tr><tr><td>Element.classList.replace(class)</td><td>将给定的标记替换为新标记</td></tr><tr><td>Element.classList.toggle(class)</td><td>存在则删除标记并返回 false 不存在则添加标记并返回 true</td></tr><tr><td>Node.contains(class)</td><td>检查传入的节点是否为该节点的后代节点</td></tr><tr><td>Element.style</td><td>style 特性中所写内容的对象</td></tr><tr><td>Window.getComputedStyle(element, [pseudo])</td><td>该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有 CSS 属性的值，element 需要被读取样式值的元素，pseudo 伪元素结果是一个具有样式属性的对象，可以读取设置的样式</td></tr></tbody></table><ul><li><code>-moz-border-radius</code> 和 <code>-webkit-border-radius</code> 这样的浏览器前缀属性，遵循同样的规则：连字符 - 表示大写。</li><li><code>.getComputedStyle</code> 实际上返回的是属性的解析值。</li><li>JS 看不到 <code>:visited</code> 所应用的样式，此外 CSS 中也有一个限制，即禁止在 <code>:visited</code> 中应用更改几何形状的样式，这是为了确保一个不好的页面无法测试链接是否被访问，进而窥探隐私。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>button<span class="token punctuation">.</span>style<span class="token punctuation">.</span>MozBorderRadius <span class="token operator">=</span> <span class="token string">&#39;5px&#39;</span>
button<span class="token punctuation">.</span>style<span class="token punctuation">.</span>WebkitBorderRadius <span class="token operator">=</span> <span class="token string">&#39;5px&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_08-元素大小与滚动" tabindex="-1"><a class="header-anchor" href="#_08-元素大小与滚动" aria-hidden="true">#</a> 08 - 元素大小与滚动</h3><ul><li>元素具有以下几何属性。</li></ul><p><img src="https://pic.img.ski/1673228421.jpg" alt="元素几何属性.jpg"></p><table><thead><tr><th>几何属性</th><th>描述</th></tr></thead><tbody><tr><td>HTMLElement.offsetParent</td><td>返回指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table, td, th, body 元素</td></tr><tr><td>HTMLElement.offsetLeft/offsetTop</td><td>相对于 offsetParent 的左上角边缘的坐标</td></tr><tr><td>HTMLElement.offsetWidth/offsetHeight</td><td>元素的外部 width/height 边框尺寸计算在内</td></tr><tr><td>HTMLElement.clientLeft/clientTop</td><td>元素左边框的宽度，某些情况下也包括滚动条的宽度</td></tr><tr><td>HTMLElement.clientWidth/clientHeight</td><td>内容的 width/height 包括 padding 但不包括滚动条</td></tr><tr><td>HTMLElement.scrollLeft/scrollTop</td><td>从元素的左上角开始，滚动出元素的上半部分的 width/height</td></tr><tr><td>HTMLElement.scrollWidth/scrollHeight</td><td>内容的 width/height 就像 clientWidth/clientHeight 一样，但还包括元素的滚动出的不可见的部分</td></tr></tbody></table><ul><li>除了 <code>scrollLeft/scrollTop</code> 外，所有属性都是只读的，如果修改 <code>scrollLeft/scrollTop</code>，浏览器会滚动对应的元素。</li></ul><h3 id="_09-window-大小与滚动" tabindex="-1"><a class="header-anchor" href="#_09-window-大小与滚动" aria-hidden="true">#</a> 09 - Window 大小与滚动</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>document.documentElement.clientWidth/clientHeight</td><td>文档的可见部分大小（不包括滚动条）</td></tr><tr><td>document.documentElement.scrollWidth/scrollHeight</td><td>文档的完整大小（不包括滚动条）</td></tr><tr><td>document.documentElement.scrollLeft/scrollTop</td><td>文档的滚动状态</td></tr><tr><td>window.innerWidth/innerHeight</td><td>窗口的可见部分大小（包括滚动条）</td></tr><tr><td>window.pageXOffset/pageYOffset</td><td>页面当前滚动信息，window.scrollX/Y的别名</td></tr><tr><td>window.scrollBy(x, y, [behavior])</td><td>将页面滚动至相对于当前位置的 (x, y) 位置，可设置滚动行为：smooth、instant、auto</td></tr><tr><td>window.scrollTo(pageX, pageY)</td><td>将页面滚动至绝对坐标，使得可见部分的左上角具有相对于文档左上角的坐标 (pageX, pageY)</td></tr><tr><td>Element.scrollIntoView(top)</td><td>将滚动页面以使 Element 可见，如果 top=true 页面滚动，使 Element 出现在窗口顶部，如果 top=false 页面滚动，使 Element 出现在窗口底部</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 整个文档的 width height</span>
<span class="token keyword">let</span> scrollHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-坐标" tabindex="-1"><a class="header-anchor" href="#_10-坐标" aria-hidden="true">#</a> 10 - 坐标</h3><ul><li>相对于窗口：类似于 <code>position:fixed</code>，从窗口的顶部/左侧边缘计算得出，将这些坐标表示为 <code>clientX/clientY</code></li><li>相对于文档：类似于 <code>position:absolute</code> ，从文档的顶部/左侧边缘计算得出，将它们表示为 <code>pageX/pageY</code></li></ul><p><img src="https://pic.img.ski/1673243756.jpg" alt="坐标.jpg"></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Element.getBoundingClientRect()</td><td>返回最小矩形的窗口坐标，该矩形将 Element 作为内建 DOMRect 类的对象</td></tr><tr><td>Document.elementFromPoint(x, y)</td><td>返回在窗口坐标 (x, y) 处嵌套最多的元素，对于在窗口之外的坐标，返回 null</td></tr></tbody></table><p><img src="https://pic.img.ski/1673243779.jpg" alt="getBoundingClientRect.jpg"></p><p><img src="https://pic.img.ski/1673244904.jpg" alt="DOMRect.jpg"></p><ul><li>文档相对坐标从文档的左上角开始计算，而不是窗口。</li><li>窗口坐标非常适合和 <code>position: fixed</code> 一起使用，文档坐标非常适合和 <code>position: absolute</code> 一起使用。</li></ul><h3 id="_11-事件" tabindex="-1"><a class="header-anchor" href="#_11-事件" aria-hidden="true">#</a> 11 - 事件</h3><table><thead><tr><th>常见事件</th><th>描述</th></tr></thead><tbody><tr><td><strong>鼠标事件</strong></td><td></td></tr><tr><td>click</td><td>当鼠标点击一个元素时，当触摸屏设备触摸时</td></tr><tr><td>contextmenu</td><td>当鼠标右键点击一个元素时</td></tr><tr><td>mouseover/mouseout</td><td>当鼠标指针移入/离开一个元素时</td></tr><tr><td>mousedown/mouseup</td><td>当在元素按下/释放鼠标按钮时</td></tr><tr><td>mousemove</td><td>当鼠标移动时</td></tr><tr><td><strong>键盘事件</strong></td><td></td></tr><tr><td>keydown/keyup</td><td>当按键按下/松开时</td></tr><tr><td><strong>表单元素事件</strong></td><td></td></tr><tr><td>submit</td><td>当访问者提交表单时</td></tr><tr><td>focus</td><td>当访问者聚焦于一个元素时</td></tr><tr><td><strong>Document 事件</strong></td><td></td></tr><tr><td>DOMContentLoaded</td><td>当 HTML 的加载和处理均完成 DOM 被完全构建完成时</td></tr><tr><td><strong>CSS事件</strong></td><td></td></tr><tr><td>transitionend</td><td>当一个 CSS 动画完成时</td></tr></tbody></table><ul><li>处理程序可以设置在 HTML 中名为 <code>on&lt;event&gt;</code> 的特性中，最好创建一个 JS 函数，然后在 HTML 特性中调用这个函数。</li><li>可以使用 DOM 属性 <code>on&lt;event&gt;</code> 来分配处理程序，例如 <code>elem.onclick</code></li><li>错误警示，例如，函数应该是以 <code>sayThanks</code> 的形式进行赋值，而不是 <code>sayThanks()</code>，但在HTML标记中，需要括号。</li><li>不要对处理程序使用 <code>setAttribute</code>，因为特性总是字符串的，函数变成了一个字符串。</li><li><code>Element.addEventListener(event, handler, [options])</code> 多次调用 <code>addEventListener</code> 允许添加多个处理程序。</li><li>可以使用 <code>addEventListener</code> 将一个对象分配为事件处理程序，当事件发生时，就会调用该对象的 <code>handleEvent</code> 方法。</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>event</td><td>事件名</td></tr><tr><td>handler</td><td>处理程序</td></tr><tr><td>options</td><td>附加可选对象</td></tr><tr><td>-&gt; once</td><td>如果为 true 那么会在被触发后自动删除监听器</td></tr><tr><td>-&gt; passive</td><td>如果为 true 那么处理程序将不会调用 <code>.preventDefault()</code></td></tr><tr><td>-&gt; capture</td><td>事件处理的阶段（启动捕获）</td></tr></tbody></table><ul><li><code>Element.removeEventListener(event, handler, [options])</code> 移除处理程序，需要传入与分配的函数完全相同的函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Thanks!&#39;</span> <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>

input<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于某些事件，只能通过 <code>addEventListener</code> 设置处理程序。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 永远不会运行</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onDOMContentLoaded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;DOM built&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这种方式可以运行</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;DOM built&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当事件发生时，浏览器会创建一个 event 对象，将详细信息放入其中，并将其作为参数传递给处理程序。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;ClickMe&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;elem&quot;</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
elem<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 显示事件类型、元素和点击的坐标</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">+</span> <span class="token string">&quot; at &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Coordinates: &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>event 对象</th><th>描述</th></tr></thead><tbody><tr><td>.type</td><td>事件类型</td></tr><tr><td>.target</td><td>目标元素</td></tr><tr><td>.currentTarget</td><td>处理事件的元素</td></tr><tr><td>.clientX / .clientY</td><td>指针事件的指针的窗口相对坐标</td></tr><tr><td>.stopPropagation()</td><td>停止冒泡</td></tr><tr><td>.stopImmediatePropagation()</td><td>停止冒泡，并阻止当前元素上的处理程序运行</td></tr><tr><td>.preventDefault()</td><td>阻止浏览器默认行为</td></tr><tr><td>...</td><td></td></tr></tbody></table><ul><li>event 对象在 HTML 处理程序中也可用。</li></ul><h3 id="_12-冒泡与捕获" tabindex="-1"><a class="header-anchor" href="#_12-冒泡与捕获" aria-hidden="true">#</a> 12 - 冒泡与捕获</h3><ul><li>当一个事件发生在一个元素上时，它会首先运行在该元素上的处理程序，然后运行其父元素上的处理程序，然后一直向上到其他祖先上的处理程序，这就是冒泡。几乎所有事件都会冒泡，但例如 <code>focus</code> 事件不会冒泡。</li><li>如果有一个处理程序 <code>form.onclick</code> 那么它可以捕获表单内的所有点击，无论点击发生在哪里，它都会冒泡到 <code>&lt;form&gt;</code> 并运行处理程序。</li><li>事件传播的三个阶段： <br>（1）捕获阶段（Capturing phase），事件从 Window 向下走近元素； <br>（2）目标阶段（Target phase），事件到达目标元素； <br>（3）冒泡阶段（Bubbling phase），事件从元素上开始冒泡。</li><li>使用 <code>on&lt;event&gt;</code> 属性或使用 HTML 特性或使用两个参数的 <code>.addEventListener(event, handler)</code> 添加的处理程序，对捕获一无所知，它们仅在第二阶段和第三阶段运行，为了在捕获阶段捕获事件，需要将处理程序的 <code>capture</code> 选项设置为 true</li></ul><h3 id="_13-事件委托" tabindex="-1"><a class="header-anchor" href="#_13-事件委托" aria-hidden="true">#</a> 13 - 事件委托</h3><ul><li>它通常用于为许多相似的元素添加相同的处理，在容器上放一个处理程序，在处理程序中检查源元素 <code>event.target</code>，如果事件发生在感兴趣的元素内，那么处理该事件，但是事件必须冒泡。</li><li>可以使用事件委托将行为以声明方式添加到具有特殊特性和类的元素中，将自定义特性添加到描述其行为的元素，用文档范围级的处理程序追踪事件，如果事件发生在具有特定特性的元素上，则执行行为。</li><li><code>Element.closest(selector)</code> 匹配特定选择器且离当前元素最近的祖先元素（也可以是当前元素本身），如果匹配不到，则返回 null。</li></ul><h3 id="_14-浏览器默认行为" tabindex="-1"><a class="header-anchor" href="#_14-浏览器默认行为" aria-hidden="true">#</a> 14 - 浏览器默认行为</h3><ul><li>阻止浏览器默认行为主流的方式是使用 event 对象上的 <code>.preventDefault()</code> 方法，如果处理程序是使用 <code>on&lt;event&gt;</code> 分配的，那返回 false 也同样有效。</li><li>如果默认行为被阻止，那么 <code>event.defaultPrevented</code> 属性为 true 否则为 false</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;return false&quot;</span><span class="token operator">&gt;</span>Click here<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
<span class="token comment">// 或</span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;event.preventDefault()&quot;</span><span class="token operator">&gt;</span>Click here<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>addEventListener</code> 的可选项 <code>passive: true</code> 向浏览器发出信号，表明处理程序将不会调用 <code>.preventDefault()</code></li><li><code>event.stopPropagation()</code> 阻止冒泡可以使用 <code>event.defaultPrevented</code> 来代替，来通知其他事件处理程序该事件已经被处理。</li></ul><h3 id="_15-自定义事件" tabindex="-1"><a class="header-anchor" href="#_15-自定义事件" aria-hidden="true">#</a> 15 - 自定义事件</h3><ul><li>自定义事件可用于创建图形组件，这会有助于自动化测试。</li><li>使用自己的名称的自定义事件通常是出于架构的目的而创建的。</li><li>内建事件类形成一个层次结构，类似于 DOM 元素类，根是内建的 Event 类。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 返回的是 event 对象</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>事件类型，可以是像 click 的字符串，或像 my-event 的参数</td></tr><tr><td>options</td><td>具有两个可选属性的对象</td></tr><tr><td>-&gt; bubbles: true/false</td><td>如果为 true，事件会冒泡</td></tr><tr><td>-&gt; cancelable: true/false</td><td>如果为 true，那么默认行为就会被阻止</td></tr></tbody></table><ul><li>默认情况下，以上两者都为 false <code>{bubbles: false, cancelable: false}</code></li><li>事件对象被创建后，应该使用 <code>EventTarget.dispatchEvent(event)</code> 在元素上运行它。</li><li>对于来自真实用户操作的事件 <code>event.isTrusted</code> 属性为 true，对于脚本生成的事件 <code>event.isTrusted</code> 属性为 false</li><li>对于自定义事件，还可以使用 <code>CustomEvent</code> 构造器，它有一个 <code>detail</code> 的附加选项，应该将事件特定的数据分配给它，然后所有处理程序可以以 <code>event.detail</code> 的形式访问它。</li><li>事件中的事件是同步的，通常事件是在队列中处理的，但存在例外，即一个事件是在另一个事件中发起的。例如：使用 <code>EventTarget.dispatchEvent(event)</code>，这类事件将会被立即处理，即在新的事件处理程序被调用之后，恢复到当前的事件处理程序。</li></ul><h3 id="_16-鼠标事件" tabindex="-1"><a class="header-anchor" href="#_16-鼠标事件" aria-hidden="true">#</a> 16 - 鼠标事件</h3><ul><li>遵循 mousedown（按下） → mouseup（释放） → click（点击）的顺序调用处理程序。</li><li>与点击相关的事件始终具有 <code>button</code> 属性，该属性允许获取确切的鼠标按钮，可以使用 <code>button</code> 属性来区分是左键单击还是右键单击。</li><li>所有的鼠标事件都提供了两种形式的坐标，一种是相对于窗口的坐标 <code>clientX</code> 和 <code>clientY</code>，另一种是相对于文档的坐标 <code>pageX</code> 和 <code>pageY</code></li><li><code>mousedown</code> 的默认浏览器操作是文本选择，如果它对界面不利，则应避免它。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// oncopy 防止复制</span>
<span class="token operator">&lt;</span>div oncopy<span class="token operator">=</span><span class="token string">&quot;alert(&#39;禁止复制 哇哇哇&#39;); return false&quot;</span><span class="token operator">&gt;</span>
  试试复制我
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>mouseover</code> 事件的 event 对象。</li></ul><table><thead><tr><th>event</th><th>描述</th></tr></thead><tbody><tr><td>.target</td><td>鼠标移过的元素</td></tr><tr><td>.relatedTarget</td><td>鼠标来自的元素</td></tr></tbody></table><ul><li><code>event.relatedTarget</code> 属性可以为 null，意味着鼠标不是来自另一个元素，而是来自窗口之外，或者它离开了窗口。</li><li><code>mouseenter/mouseleave</code> 类似于 <code>mouseover/mouseout</code> 它们在鼠标指针进入/离开元素时触发，元素内部与后代之间的转换不会产生影响，事件 <code>mouseenter/mouseleave</code> 不会冒泡。</li><li>关于基础的拖放算法：在 <code>mousedown</code> 上，根据需要准备要移动的元素（也许创建一个它的副本，向其中添加一个类或其他任何东西），然后在 <code>mousemove</code> 上，通过更改 <code>position:absolute</code> 情况下的 <code>left/top</code> 来移动它，在 <code>mouseup</code> 上，执行与完成的拖放相关的所有行为。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 禁用浏览器的默认拖放处理</span>
elem<span class="token punctuation">.</span><span class="token function-variable function">ondragstart</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在拖动开始时，记住鼠标指针相对于元素的初始偏移 <code>shiftX/shiftY</code>，并在拖动过程中保持它不变。</li></ul><h3 id="_17-指针事件" tabindex="-1"><a class="header-anchor" href="#_17-指针事件" aria-hidden="true">#</a> 17 - 指针事件</h3><ul><li>指针事件具备和鼠标事件完全相同的属性。</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>.target</td><td>目标元素</td></tr><tr><td>.pointerId</td><td>触发当前事件的指针唯一标识符</td></tr><tr><td>.pointerType</td><td>指针的设备类型</td></tr><tr><td>.isPrimary</td><td>当指针为首要指针（多点触控时按下的第一根手指）时为 true</td></tr><tr><td>.width</td><td>指针（例如手指）接触设备的区域的宽度，对于不支持的设备如鼠标，这个值总是 1</td></tr><tr><td>.height</td><td>指针（例如手指）接触设备的区域的长度，对于不支持的设备，这个值总是 1</td></tr><tr><td>.pressure</td><td>触摸压力，是一个介于 0 到 1 之间的浮点数，对于不支持压力检测的设备，这个值总是 0.5 或 0</td></tr><tr><td>.tangentialPressure</td><td>归一化后的切向压力</td></tr><tr><td>.clientX/Y</td><td>指针在窗口中的位置</td></tr><tr><td>.tiltX/Y, twist</td><td>针对触摸笔的几个属性，用于描述笔和屏幕表面的相对位置</td></tr></tbody></table><ul><li><code>pointercancel</code> 事件将会在一个正处于活跃状态的指针交互由于某些原因被中断时触发，也就是在这个事件之后，该指针就不会继续触发更多事件了。</li><li><code>Element.setPointerCapture(pointerId)</code> 将给定的 pointerId 绑定到 Element，在调用之后，所有具有相同 pointerId 的指针事件都将 Element 作为目标（就像事件发生在 Element 上一样），无论这些 Element 在文档中的实际位置是什么，当 <code>Element.releasePointerCapture(pointerId)</code> 被调用，绑定会被移除，当 <code>pointerup</code> 或 <code>pointercancel</code> 事件出现时，绑定会被自动地移除。指针捕获可以被用于简化拖放类的交互。</li><li><code>gotpointercapture</code> 事件会在一个元素使用 <code>Element.setPointerCapture(pointerId)</code> 来启用捕获后触发。</li><li><code>lostpointercapture</code> 会在捕获被释放后触发，其触发可能是由于 <code>Element.releasePointerCapture(pointerId)</code> 的显式调用，或是 <code>pointerup/pointercancel</code> 事件触发后的自动调用。</li></ul><h3 id="_18-键盘事件" tabindex="-1"><a class="header-anchor" href="#_18-键盘事件" aria-hidden="true">#</a> 18 - 键盘事件</h3><ul><li>当一个按键被按下时，会触发 <code>keydown</code> 事件，而当按键被释放时，会触发 <code>keyup</code> 事件。</li><li><code>event.code</code> 和 <code>event.key</code> 属性允许获取物理按键代码和字符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>code<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>key<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token string">&#39;KeyZ&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>ctrlKey <span class="token operator">||</span> event<span class="token punctuation">.</span>metaKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Undo!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于由自动重复触发的事件，event 对象的 <code>event.repeat</code> 属性被设置为 true</li><li>跟踪 <code>oninput</code> 事件，即在任何修改后都会触发此事件，这样就可以检查新的 <code>input.value</code>，并在其无效时修改它/高亮显示 <code>&lt;input&gt;</code></li></ul><h3 id="_19-滚动事件" tabindex="-1"><a class="header-anchor" href="#_19-滚动事件" aria-hidden="true">#</a> 19 - 滚动事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 显示当前滚动</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;showScroll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不能通过在 <code>onscroll</code> 监听器中使用 <code>event.preventDefault()</code> 来阻止滚动，因为它会在滚动发生之后才触发，但是可以在导致滚动的事件上，例如在 <code>pageUp</code> 和 <code>pageDown</code> 的 <code>keydown</code> 事件上，使用 <code>event.preventDefault()</code> 来阻止滚动。</li></ul><h3 id="_20-聚焦与其他事件" tabindex="-1"><a class="header-anchor" href="#_20-聚焦与其他事件" aria-hidden="true">#</a> 20 - 聚焦与其他事件</h3><p><strong>聚焦</strong></p><ul><li>当元素聚焦时，会触发 <code>focus</code> 事件，当元素失去焦点时，会触发 <code>blur</code> 事件。</li><li><code>focus</code> 和 <code>blur</code> 事件不会向上冒泡，但会在捕获阶段向下传播。</li><li><code>Element.focus()</code> 和 <code>Element.blur()</code> 方法可以设置和移除元素上的焦点。</li><li>可以通过 <code>document.activeElement</code> 来获取当前所聚焦的元素。</li><li>使用 <code>focusin</code> 和 <code>focusout</code> 事件与 <code>focus/blur</code> 事件完全一样，只是它们会冒泡，必须使用 <code>Element.addEventListener()</code> 来分配它们，而不是 <code>on&lt;event&gt;</code></li><li>任何具有 <code>tabindex</code> 特性的元素，都会变成可聚焦的。该特性的 <code>value</code> 是当使用 Tab（或类似的东西）在元素之间进行切换时，元素存在顺序号，也就是说，如果有两个元素，第一个具有 <code>tabindex=&quot;1&quot;</code>，第二个具有 <code>tabindex=&quot;2&quot;</code>，然后当焦点在第一个元素的时候，按下 Tab 键，会使焦点移动到第二个元素身上，<code>tabindex=&quot;0&quot;</code> 会使该元素被与那些不具有 <code>tabindex</code> 的元素放在一起，<code>tabindex=&quot;-1&quot;</code> 只允许以编程的方式聚焦于元素。</li></ul><p><strong>更新</strong></p><ul><li>当元素更改完成时，将触发 <code>change</code> 事件，对于文本输入框，当其失去焦点时，就会触发 <code>change</code> 事件，单选和复选，会在选项更改后立即触发 <code>change</code> 事件。</li></ul><p><strong>输入</strong></p><ul><li>现代 HTML 允许使用 <code>input</code> 特性进行许多验证，例如 <code>required</code>、<code>pattern</code> 等。</li><li>每当用户对输入值进行修改后，就会触发 <code>input</code> 事件，与键盘事件不同，只要值改变了，<code>input</code> 事件就会触发，即使那些不涉及键盘行为的值的更改也是如此，例如，使用鼠标粘贴，或者使用语音识别来输入文本。另一方面，<code>input</code> 事件不会在那些不涉及值更改的键盘输入或其他行为上触发，例如，在输入时按方向键 <code>⇦ ⇨</code> 无法阻止 <code>oninput</code> 中的任何事件，无法使用 <code>event.preventDefault()</code>，已经太迟了，不会起任何作用了。</li></ul><p><strong>CV</strong></p><ul><li><code>cut/copy/paste</code> 这些事件发生于剪切/拷贝/粘贴一个值的时候，它们属于 ClipboardEvent 类，并提供了对剪切/拷贝/粘贴的数据的访问方法，也可以使用 <code>event.preventDefault()</code> 来中止行为，然后什么都不会被复制/粘贴。<code>event.clipboardData</code> 属性可以用于访问剪贴板。</li></ul><p><strong>提交</strong></p><ul><li>提交表单时，会触发 <code>submit</code> 事件，它通常用于在将表单发送到服务器之前对表单进行校验或者中止提交，并使用 JS 来处理表单。<code>form.submit()</code> 方法允许从 JS 启动表单发送，可以使用此方法动态地创建表单，并将其发送到服务器。</li><li>提交表单主要有两种方式，一种是点击 <code>&lt;input type=&quot;submit&quot;&gt;</code> 或 <code>&lt;input type=&quot;image&quot;&gt;</code>，另一种是在 <code>input</code> 字段中按下 Enter 键。</li><li>在输入框中使用 Enter 发送表单时，会在 <code>&lt;input type=&quot;submit&quot;&gt;</code> 上触发一次 <code>click</code> 事件。如果要手动将表单提交到服务器，可以调用 <code>form.submit()</code>，这样就不会产生 <code>submit</code> 事件。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token string">&#39;https://baidu.com/&#39;</span>
form<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token string">&#39;GET&#39;</span>
form<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;input name=&quot;s&quot; value=&quot;百度一下&quot;&gt;&#39;</span>

<span class="token comment">// 该表单必须在文档中才能提交</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>

form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-表单属性与方法" tabindex="-1"><a class="header-anchor" href="#_21-表单属性与方法" aria-hidden="true">#</a> 21 - 表单属性与方法</h3><ul><li>文档中的表单是特殊集合 <code>document.forms</code> 的成员，该集合为命名的集合：既是被命名了的，也是有序的，既可以使用名字，也可以使用在文档中的编号来获取表单。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>forms<span class="token punctuation">.</span>my  <span class="token comment">// name=&quot;my&quot; 的表单</span>
document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">// 文档中的第一个表单</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>表单中，任何元素都可以通过命名的集合 <code>form.elements.xxx</code> 来获取到。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>one<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>two<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">.</span>my
  <span class="token keyword">let</span> elem <span class="token operator">=</span> form<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>one
  <span class="token function">alert</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可能会有多个名字相同的元素，这种情况经常在处理单选按钮中出现，此时 <code>form.elements[name]</code> 将会是一个集合。</li><li>一个表单内会有一个或多个 <code>&lt;fieldset&gt;</code> 元素，它们也具有 <code>elements</code> 属性。</li><li>可以通过 <code>form[index/name]</code> 来访问元素，可以将 <code>form.elements.login</code> 写成 <code>form.login</code>，但是会有一个小问题：如果访问一个元素，然后修改它的 <code>name</code>，之后它仍然可以被通过旧的 <code>name</code> 访问到（当然也能通过新的 <code>name</code> 访问）。</li><li>对于任何元素，其对应的表单都可以通过 <code>Element.form</code> 访问到，即表单引用了所有元素，元素也引用了表单。</li><li>可以通过 <code>input.value</code>（字符串）或 <code>input.checked</code>（布尔值）来访问复选框 checkbox 和单选按钮 radio button 中的 <code>value</code></li><li><code>&lt;select&gt;</code> 元素有 3 个重要的属性：</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>.options</td><td>当前所选择的子元素的集合</td></tr><tr><td>.value</td><td>当前所选择的 value</td></tr><tr><td>.selectedIndex</td><td>当前所选择的编号</td></tr></tbody></table><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>select<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>apple<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Apple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pear<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Pear<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>banana<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Banana<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 下面三行做的都是同一件事</span>
  select<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>selected <span class="token operator">=</span> <span class="token boolean">true</span>
  select<span class="token punctuation">.</span>selectedIndex <span class="token operator">=</span> <span class="token number">2</span>
  select<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;banana&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于多选的值，在 <code>&lt;option&gt;</code> 子元素中添加/移除 <code>selected</code> 属性。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>select<span class="token punctuation">&quot;</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blues<span class="token punctuation">&quot;</span></span> <span class="token attr-name">selected</span><span class="token punctuation">&gt;</span></span>Blues<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rock<span class="token punctuation">&quot;</span></span> <span class="token attr-name">selected</span><span class="token punctuation">&gt;</span></span>Rock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classic<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 从 multi-select 中获取所有选定的 value</span>
  <span class="token keyword">let</span> selected <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>select<span class="token punctuation">.</span>options<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span>selected<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

  <span class="token function">alert</span><span class="token punctuation">(</span>selected<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建 option 元素</span>
<span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Option</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> value<span class="token punctuation">,</span> defaultSelected<span class="token punctuation">,</span> selected<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>当前所选中的文本</td></tr><tr><td>value</td><td>当前所选择的 value</td></tr><tr><td>defaultSelected</td><td>如果为 true 那么 selected 特性会被创建</td></tr><tr><td>selected</td><td>如果为 true 那么这个就会被选中</td></tr></tbody></table><ul><li><code>defaultSelected</code> 和 <code>selected</code> 的区别是 <code>defaultSelected</code> 设置的是 HTML 特性，可以使用 <code>option.getAttribute(&#39;selected&#39;)</code> 来获得，而 <code>selected</code> 设置的是选项是否被选中。</li></ul><h3 id="_22-页面生命周期" tabindex="-1"><a class="header-anchor" href="#_22-页面生命周期" aria-hidden="true">#</a> 22 - 页面生命周期</h3><ul><li>HTML 页面的生命周期包含三个重要事件： <br>（1）DOMContentLoaded：浏览器已完全加载 HTML 并构建了 DOM 树，但像 <code>&lt;img&gt;</code> 和样式表之类外部资源可能未加载完成。 <br>（2）load：浏览器不仅加载完成了 HTML 还加载完成了所有外部资源，图片、样式等。 <br>（3）beforeunload/unload：当用户正要离开和已经离开页面时。</li><li><code>DOMContentLoaded</code> 事件：DOM 已经就绪，因此处理程序可以查找 DOM 节点，并初始化接口。事件发生在 <code>document</code> 对象上，必须使用 <code>addEventListener</code> 来捕获它。</li><li><code>load</code> 事件：外部资源已加载完成，样式已被应用，图片大小也已知了。<code>window</code> 对象上的 <code>load</code> 事件，可以通过 <code>onload</code> 属性获取此事件。</li><li><code>beforeunload</code> 事件：用户正在离开，可以检查用户是否保存了更改，并询问他是否真的要离开。如果访问者触发了离开页面的导航或试图关闭窗口处理程序将要求进行更多确认。<code>event.preventDefault()</code> 在 <code>beforeunload</code> 处理程序中不起作用。</li><li><code>unload</code> 事件：用户几乎已经离开了，但是仍然可以启动一些操作。<code>window</code> 对象上的 <code>unload</code> 事件就会被触发，可以在那里做一些不涉及延迟的操作，例如关闭相关的弹出窗口、发送统计数据。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 它在后台发送数据，转换到另外一个页面不会有延迟：浏览器离开页面，但仍然在执行 sendBeacon</span>
<span class="token keyword">let</span> analyticsData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* 带有收集数据的对象 */</span> <span class="token punctuation">}</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;unload&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// navigator.sendBeacon() 方法可用于通过 HTTP POST 将少量数据异步传输到 Web 服务器</span>
  navigator<span class="token punctuation">.</span><span class="token function">sendBeacon</span><span class="token punctuation">(</span><span class="token string">&quot;/analytics&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>analyticsData<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>document.readyState</code> 属性可以提供当前加载状态的信息。</li><li><code>readystatechange</code> 事件，会在状态发生改变时触发。</li></ul><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>loading</td><td>文档正在被加载</td></tr><tr><td>interactive</td><td>文档被全部读取</td></tr><tr><td>complete</td><td>文档被全部读取，并且所有资源都已加载完成</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 仍在加载，等待事件</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> work<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// DOM 已就绪</span>
  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-脚本" tabindex="-1"><a class="header-anchor" href="#_23-脚本" aria-hidden="true">#</a> 23 - 脚本</h3><ul><li>当浏览器加载 HTML 时遇到 <code>&lt;script&gt;&lt;/script&gt;</code> 标签，浏览器就不能继续构建 DOM，它必须立刻执行此脚本，对于外部脚本 <code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code> 也是一样的，浏览器必须等脚本下载完，并执行结束，之后才能继续处理剩余的页面。这将导致脚本不能访问到位于它们下面的 DOM 元素，无法给它们添加处理程序等。如果页面顶部有一个笨重的脚本，它会阻塞页面，在该脚本下载并执行结束前，用户都不能看到页面内容。</li><li>可以把脚本放在页面底部，它可以访问到它上面的元素，并且不会阻塞页面显示内容。</li><li><code>&lt;script&gt;</code> 的特性： <ul><li><code>defer</code> 特性告诉浏览器不要等待脚本，浏览器将继续处理 HTML，构建 DOM，脚本会在后台下载，等 DOM 构建完成后，脚本才会执行。不会阻塞页面，脚本总是要等到 DOM 解析完毕，但在 <code>DOMContentLoaded</code> 事件之前执行。脚本保持其相对顺序，就像常规脚本一样，特性仅适用于外部脚本。</li><li><code>async</code> 特性意味着脚本是完全独立的，浏览器不会因脚本而阻塞（与 <code>defer</code> 类似），其他脚本不会等待 <code>async</code> 脚本加载完成，同样 <code>async</code> 脚本也不会等待其他脚本。<code>DOMContentLoaded</code> 事件和异步脚本不会彼此等待，<code>DOMContentLoaded</code> 事件可能会发生在异步脚本之前（如果异步脚本在页面完成后才加载完成），<code>DOMContentLoaded</code> 事件也可能发生在异步脚本之后（如果异步脚本很短，或者是从 HTTP 缓存中加载的）。脚本会在后台加载，并在加载就绪时运行，DOM 和其他脚本不会等待它们，它们也不会等待其它的东西，特性仅适用于外部脚本。</li></ul></li><li>可以使用 JS 动态地创建一个脚本，并将其附加到文档中。默认情况下，动态脚本的行为是异步的，如果显式地设置了 <code>script.async = false</code>，则可以改变这个规则</li><li>在实际开发中，<code>defer</code> 用于需要整个 DOM 的脚本，适用于脚本的相对执行顺序很重要的时候。<code>async</code> 用于独立脚本，例如计数器或广告，这些脚本的相对执行顺序无关紧要。</li></ul><h3 id="_24-资源加载" tabindex="-1"><a class="header-anchor" href="#_24-资源加载" aria-hidden="true">#</a> 24 - 资源加载</h3><ul><li>浏览器允许跟踪外部资源的加载，脚本、图片、<code>iframe</code>等。<code>onload</code> 成功加载，<code>onerror</code> 出现 error</li><li><code>script.onload</code> 它会在脚本加载并执行完成时触发：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js&quot;</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>

script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 显示库的版本</span>
  <span class="token function">alert</span><span class="token punctuation">(</span> _<span class="token punctuation">.</span><span class="token constant">VERSION</span> <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>script.onerror</code> 发生在脚本加载期间的 error 会被 error 事件跟踪到：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;https://example.com/404.js&quot;</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>

script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Error loading &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>onload</code>、<code>onerror</code> 事件仅跟踪加载本身。基本上适用于具有外部 <code>src</code> 的任何资源。</li><li>大多数资源在被添加到文档中后，便开始加载，但是 <code>&lt;img&gt;</code> 是个例外，它要等到获得 <code>src (*)</code> 后才开始加载，对于 <code>&lt;iframe&gt;</code> 加载完成时会触发 <code>iframe.onload</code> 事件，无论是成功加载还是出现 error</li><li>要允许跨源访问 <code>&lt;script&gt;</code> 标签需要具有 crossorigin 特性，并且远程服务器必须提供特殊的 header</li><li>三个级别的跨源访问： <br>（1）无 <code>crossorigin</code> 特性：禁止访问； <br>（2）<code>crossorigin = &quot;anonymous&quot;</code>：如果服务器发送回带有的源的 header <code>Access-Control-Allow-Origin</code> 则允许访问。浏览器不会将授权信息和 cookie 发送到远程服务器。 <br>（3）<code>crossorigin= &quot;use-credentials&quot;</code>：如果服务器发送回带有的源的 header <code>Access-Control-Allow-Origin</code> 和 <code>Access-Control-Allow-Credentials: true</code> 则允许访问。浏览器会将授权信息和 cookie 发送到远程服务器。</li></ul><h3 id="_25-dom-变动观察器" tabindex="-1"><a class="header-anchor" href="#_25-dom-变动观察器" aria-hidden="true">#</a> 25 - DOM 变动观察器</h3><ul><li>MutationObserver 是一个内建对象，它观察 DOM 元素，并在检测到更改时触发回调。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 选择需要观察变动的节点</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;some-id&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 观察器的配置（需要观察什么变动）</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">childList</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">subtree</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>

<span class="token comment">// 当观察到变动时执行的回调函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mutationsList<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Use traditional &#39;for loops&#39; for IE 11</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> mutation <span class="token keyword">of</span> mutationsList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;childList&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A child node has been added or removed.&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;attributes&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The &#39;</span> <span class="token operator">+</span> mutation<span class="token punctuation">.</span>attributeName <span class="token operator">+</span> <span class="token string">&#39; attribute was modified.&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一个观察器实例并传入回调函数</span>
<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>

<span class="token comment">// 以上述配置开始观察目标节点</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> config<span class="token punctuation">)</span>

<span class="token comment">// 之后，可停止观察</span>
observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>observe 参数</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>被观察的节点</td></tr><tr><td>config</td><td>布尔选项的对象，表示将对哪些更改做出反应，childList、attributes 和 characterData 中，必须有一个参数为 true</td></tr><tr><td>-&gt; subtree: true</td><td>监听以 target 为根节点的整个子树</td></tr><tr><td>-&gt; childList: true</td><td>监听 target 节点中发生的节点的新增与删除</td></tr><tr><td>-&gt; attributes: true</td><td>观察所有监听的节点属性值的变化</td></tr><tr><td>-&gt; attributeFilter</td><td>一个用于声明哪些属性名会被监听的数组，如果不声明该属性，所有属性的变化都将触发通知</td></tr><tr><td>-&gt; attributeOldValue: true</td><td>记录上一次被监听的节点的属性变化</td></tr><tr><td>-&gt; characterData: true</td><td>监听声明的 target 节点上所有字符的变化</td></tr><tr><td>-&gt; characterDataOldValue:true</td><td>记录前一个被监听的节点中发生的文本变化</td></tr></tbody></table><ul><li>在发生任何更改后，将执行回调，更改被作为一个 MutationRecord 对象列表，传入第一个参数，而观察器自身作为第二个。</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>.type</td><td>变动类型</td></tr><tr><td>.target</td><td>更改发生处</td></tr><tr><td>.addedNodes/removedNodes</td><td>添加/删除的节点</td></tr><tr><td>.previousSibling/nextSibling</td><td>添加/删除的节点的上一个/下一个兄弟节点</td></tr><tr><td>.attributeName/attributeNamespace</td><td>被更改的特性的名称/命名空间（用于 XML）</td></tr><tr><td>.oldValue</td><td>之前的值，仅适用于特性或文本更改</td></tr></tbody></table><ul><li>使用 MutationObserver，可以监测到不需要的元素何时出现在 DOM 中，并将其删除。</li><li>可以使用 MutationObserver 来自动检测何时在页面中插入了代码段，并高亮显示它们。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>MutationObserver.observe()</td><td>根据需求开始观察</td></tr><tr><td>MutationObserver.disconnect()</td><td>观察者停止观察变动</td></tr><tr><td>MutationObserver.takeRecords()</td><td>返回已检测到但尚未由观察者的回调函数处理的所有匹配 DOM 更改的列表，使变更队列保持为空</td></tr></tbody></table><h3 id="_26-选择与范围" tabindex="-1"><a class="header-anchor" href="#_26-选择与范围" aria-hidden="true">#</a> 26 - 选择与范围</h3><ul><li>Range 对象表示一个包含节点与文本节点的一部分的文档片段 <code>let range = new Range()</code></li></ul><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td>.startContainer</td><td>返回开始的节点</td></tr><tr><td>.endContainer</td><td>返回终点的节点</td></tr><tr><td>.startOffset</td><td>返回在 startContainer 中的起始位置的数字</td></tr><tr><td>.endOffset</td><td>返回终点在 endContainer 中的终点位置的数字</td></tr><tr><td>.collapsed</td><td>返回起始位置是否相同</td></tr><tr><td>.commonAncestorContainer</td><td>返回包含 startContainer 和 endContainer 的最深一级的节点</td></tr><tr><td></td><td></td></tr><tr><td>.setStart(node, offset)</td><td>边界起点</td></tr><tr><td>.setEnd(node, offset)</td><td>边界终点</td></tr><tr><td>.setStartBefore(node)</td><td>将起点设置在 node 前面</td></tr><tr><td>.setStartAfter(node)</td><td>将起点设置在 node 后面</td></tr><tr><td>.setEndBefore(node)</td><td>将终点设置为 node 前面</td></tr><tr><td>.setEndAfter(node)</td><td>将终点设置为 node 后面</td></tr><tr><td>.selectNode(node)</td><td>设置范围以选择整个 node</td></tr><tr><td>.selectNodeContents(node)</td><td>设置范围以选择整个 node 的内容</td></tr><tr><td>.collapse(toStart)</td><td>如果 toStart = true 则设置 end = start，从而折叠范围</td></tr><tr><td>.cloneRange()</td><td>创建一个具有相同起点/终点的新范围 Range 对象</td></tr><tr><td>.deleteContents()</td><td>从文档中删除范围中的内容</td></tr><tr><td>.extractContents()</td><td>从文档中删除范围中的内容，并将删除的内容作为 DocumentFragment 返回</td></tr><tr><td>.cloneContents()</td><td>复制范围中的内容，并将复制的内容作为 DocumentFragment 返回</td></tr><tr><td>.insertNode(node)</td><td>在范围的起始处将 node 插入文档</td></tr><tr><td>.surroundContents(node)</td><td>使用 node 将所选范围中的内容包裹起来，要使此操作有效，则该范围必须包含其中所有元素的开始和结束标签</td></tr></tbody></table><ul><li>如果 node 是一个文本节点，那么 offset 则必须是其文本中的位置。如果 node 是一个元素节点，那么 offset 则必须是子元素的编号，不是必须在 <code>setStart</code> 和 <code>setEnd</code> 中使用相同的节点。一个范围可能会跨越很多不相关的节点，唯一要注意的是终点要在起点之后。</li><li>文档选择是由 Selection 对象表示的，可通过 <code>window.getSelection()</code> 或 <code>document.getSelection()</code> 来获取，一个选择可以包括零个或多个范围。</li></ul><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td>.anchorNode</td><td>返回该选区起点所在的节点</td></tr><tr><td>.focusNode</td><td>返回该选区终点所在的节点</td></tr><tr><td>.anchorOffset</td><td>返回一个数字，其表示的是选区起点在 anchorNode 中的位置偏移量</td></tr><tr><td>.focusOffset</td><td>返回一个数字，其表示的是选区终点在 focusNode 中的位置偏移量</td></tr><tr><td>.isCollapsed</td><td>返回一个布尔值，用于判断选区的起始点和终点是否在同一个位置</td></tr><tr><td>.rangeCount</td><td>返回该选区所包含的连续范围的数量</td></tr><tr><td></td><td></td></tr><tr><td>.getRangeAt(i)</td><td>获取第 i 个范围，返回选区包含的指定区域的引用</td></tr><tr><td>.collapse(node, offset)</td><td>用一个新的范围替换选定的范围，该新范围从给定的 node 处开始到偏移 offset 处结束</td></tr><tr><td>.setPosition(node, offset)</td><td>collapse 的别名</td></tr><tr><td>.extend(node, offset)</td><td>将选择的焦点移到给定的 node 位置偏移 offset</td></tr><tr><td>.modify()</td><td>修改当前的选区</td></tr><tr><td>.collapseToStart()</td><td>折叠（替换为空范围）到选择起点</td></tr><tr><td>.collapseToEnd()</td><td>折叠到选择终点</td></tr><tr><td>.selectAllChildren(node)</td><td>选择 node 的所有子节点</td></tr><tr><td>.addRange(range)</td><td>将 range 添加到选择中，如果选择已有关联的范围将忽略该调用</td></tr><tr><td>.removeRange(range)</td><td>从选择中删除 range</td></tr><tr><td>.removeAllRanges()</td><td>删除所有范围</td></tr><tr><td>.empty()</td><td>removeAllRanges 的别名</td></tr><tr><td>.deleteFromDocument()</td><td>从文档中删除所选择的内容</td></tr><tr><td>.toString()</td><td>返回当前选区存文本内容</td></tr><tr><td>.containsNode(node, allowPartialContainment = false)</td><td>检查选择中是否包含 node（特别是如果第二个参数是 true 的话）</td></tr><tr><td>.setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset)</td><td>用给定的起点 anchorNode/anchorOffset 和终点 focusNode/focusOffset 来替换选择范围，选中它们之间的所有内容</td></tr><tr><td>Element.onselectstart</td><td>当在元素 Element 上或在其内部开始选择时</td></tr><tr><td>Document.onselectionchange</td><td>当选择发生变化或开始时</td></tr></tbody></table><ul><li>诸如 <code>input</code> 和 <code>textarea</code> 等表单元素提供了专用的选择 API，没有 Selection 或 Range 对象。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>input.onselect</td><td>当某个东西被选择时触发</td></tr><tr><td>input.selectionStart</td><td>选择的起始位置（可写）</td></tr><tr><td>input.selectionEnd</td><td>选择的结束位置（可写）</td></tr><tr><td>input.selectionDirection</td><td>选择方向 forward、backward、none（例如使用鼠标双击进行的选择）</td></tr><tr><td>input.select()</td><td>选择文本控件中的所有内容（可以是 textarea 而不是 input）</td></tr><tr><td>input.setSelectionRange(start, end, [direction])</td><td>在给定方向上（可选），从 start 一直选择到 end</td></tr><tr><td>input.setRangeText(replacement, [start], [end], [selectionMode])</td><td>用新文本替换范围中的文本</td></tr></tbody></table><h3 id="_27-弹窗" tabindex="-1"><a class="header-anchor" href="#_27-弹窗" aria-hidden="true">#</a> 27 - 弹窗</h3><ul><li>弹窗（popup）是向用户显示其他文档的最古老的方法之一，<code>window.open(url, name, params)</code> 它将打开一个具有给定 URL 的新窗口。</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>要在新窗口中加载的 URL</td></tr><tr><td>name</td><td>新窗口的名称</td></tr><tr><td>params</td><td>新窗口的配置字符串，它包括设置用逗号分隔，参数之间不能有空格，例如：width=200,height=100</td></tr></tbody></table><ul><li>默认情况下，浏览器会打开一个新标签页，但如果提供了窗口大小，那么浏览器将打开一个弹窗。</li><li>弹窗是一个独立的窗口，具有自己的独立 JS 环境，因此，使用弹窗打开一个不信任的第三方网站是安全的。</li><li>如果弹窗是在用户触发的事件处理程序（如 <code>onclick</code>）之外调用的，大多数浏览器都会阻止此类弹窗。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">scrollbars=no,resizable=no,
  status=no,location=no,
  toolbar=no,menubar=no,
  width=600,height=300,
  left=100,top=100</span><span class="token template-punctuation string">\`</span></span>
<span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>open</code> 调用会返回对新窗口的引用，它可以用来操纵弹窗的属性，更改位置，甚至更多操作。</li><li>只有在窗口是同源的时，窗口才能自由访问彼此的内容。</li></ul><table><thead><tr><th>弹窗方法</th><th>描述</th></tr></thead><tbody><tr><td>window.opener</td><td>访问 opener 窗口，除了弹窗之外，对其他所有窗口来说均为 null</td></tr><tr><td>window.close()</td><td>关闭一个窗口</td></tr><tr><td>window.closed</td><td>检查一个窗口是否被关闭</td></tr><tr><td>window.moveBy(x,y)</td><td>将窗口相对于当前位置向右移动 x 像素，并向下移动 y 像素，允许负值（向上/向左移动）</td></tr><tr><td>window.moveTo(x,y)</td><td>将窗口移动到屏幕上的坐标 (x,y) 处</td></tr><tr><td>window.resizeBy(width, height)</td><td>根据给定的相对于当前大小的 width/height 调整窗口大小，允许负值</td></tr><tr><td>window.resizeTo(width, height)</td><td>将窗口调整为给定的大小</td></tr><tr><td>window.scrollBy(x,y)</td><td>相对于当前位置，将窗口向右滚动 x 像素，并向下滚动 y 像素，允许负值</td></tr><tr><td>window.scrollTo(x,y)</td><td>将窗口滚动到给定坐标 (x,y)</td></tr><tr><td>Element.scrollIntoView(top = true)</td><td>滚动窗口，使 elem 显示在 elem.scrollIntoView(false) 的顶部（默认）或底部</td></tr></tbody></table><ul><li>如果窗口不是通过 <code>window.open()</code> 创建的，那么大多数浏览器都会忽略 <code>window.close()</code>，因此 <code>close()</code> 只对弹窗起作用。</li></ul><h3 id="_28-跨窗口通信" tabindex="-1"><a class="header-anchor" href="#_28-跨窗口通信" aria-hidden="true">#</a> 28 - 跨窗口通信</h3><ul><li>如果两个 URL 具有相同的协议、域和端口，则称它们是同源的。</li><li>一个 <code>&lt;iframe&gt;</code> 标签承载了一个单独的嵌入的窗口，它具有自己的 <code>document</code> 和 <code>window</code>。当访问嵌入的窗口中的东西时，浏览器会检查是否具有相同的源，如果不是，则会拒绝访问（对 <code>location</code> 进行写入是一个例外，它是会被允许的）。</li><li>如果窗口的二级域相同，可以使浏览器忽略该差异，使得它们可以被作为同源的来对待，以便进行跨窗口通信，每个这样的窗口都应该执行下面这行代码：<code>document.domain = &#39;xxxxx.com&#39;</code> 该属性正在被从规范中删除，跨窗口通信是建议的替代方案。</li><li>不应该对尚未加载完成的 <code>&lt;iframe&gt;</code> 的文档进行处理，因为那是错误的文档。</li><li>一个 <code>&lt;iframe&gt;</code> 内可能嵌套了其他的 <code>&lt;iframe&gt;</code>，相应的 <code>window</code> 对象会形成一个层次结构。</li></ul><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td>iframe.contentWindow</td><td>获取 <code>&lt;iframe&gt;</code> 中的 window</td></tr><tr><td>window.frames[0]/.name</td><td>获取 <code>&lt;iframe&gt;</code> 中的 window 的另一种方式</td></tr><tr><td>iframe.contentDocument</td><td>获取 <code>&lt;iframe&gt;</code> 中的 document</td></tr><tr><td>window.frames</td><td>子窗口的集合</td></tr><tr><td>window.parent</td><td>对父（外部）窗口的引用</td></tr><tr><td>window.top</td><td>对最顶级父窗口的引用</td></tr></tbody></table><ul><li><code>sandbox</code> 特性允许在 <code>&lt;iframe&gt;</code> 中禁止某些特定行为，以防止其执行不被信任的代码。它通过将 <code>&lt;iframe&gt;</code> 视为非同源的，或者应用其他限制来实现 <code>&lt;iframe&gt;</code> 的沙盒化，对于 <code>&lt;iframe sandbox src=&quot;...&quot;&gt;</code> 有一个应用于其上的默认的限制集，但是可以通过提供一个以空格分隔的限制列表作为特性的值，来放宽这些限制，该列表中的各项为不应该应用于这个 <code>&lt;iframe&gt;</code> 的限制，例如：<code>&lt;iframe sandbox=&quot;allow-forms allow-popups&quot;&gt;</code>。一个空的 <code>sandbox</code> 特性会施加最严格的限制，但是用一个以空格分隔的列表，列出要移除的限制。</li></ul><table><thead><tr><th>value</th><th>描述</th></tr></thead><tbody><tr><td>allow-same-origin</td><td>默认情况下 sandbox 会为 <code>&lt;iframe&gt;</code> 强制实施不同来源的策略，具有所有隐含的脚本限制，此选项会移除这些限制</td></tr><tr><td>allow-top-navigation</td><td>允许 <code>&lt;iframe&gt;</code> 更改 parent.location</td></tr><tr><td>allow-forms</td><td>允许在 <code>&lt;iframe&gt;</code> 中提交表单</td></tr><tr><td>allow-scripts</td><td>允许在 <code>&lt;iframe&gt;</code> 中运行脚本</td></tr><tr><td>allow-popups</td><td>允许在 <code>&lt;iframe&gt;</code> 中使用 window.open 打开弹窗</td></tr></tbody></table><ul><li><code>window.postMessage</code> 接口允许窗口之间相互通信，无论它们来自什么源。</li><li>想要发送消息的窗口需要调用接收窗口的 <code>postMessage</code> 方法。例如，如果想把消息发送给 win，应该调用 <code>win.postMessage(data, targetOrigin)</code>，data 是要发送的数据，可以是任何对象，数据会被通过使用结构化序列化算法进行克隆，IE 浏览器只支持字符串，因此需要对复杂的对象调用 <code>JSON.stringify</code> 方法进行处理，以支持该浏览器，targetOrigin 是指定目标窗口的源，以便只有来自给定的源的窗口才能获得该消息。</li><li>为了接收消息，目标窗口应该在 <code>message</code> 事件上有一个处理程序，当 <code>postMessage</code> 被调用时触发该事件（并且 <code>targetOrigin</code> 检查成功）。此时 <code>event</code> 对象具有几个特殊属性：data 是从 <code>postMessage</code> 传递来的数据，origin 是发送方的源，source 是对发送方窗口的引用。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">!=</span> <span class="token string">&#39;http://xxx.com&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 来自未知的源的内容忽略它</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;received: &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>data <span class="token punctuation">)</span>
  <span class="token comment">// 可以使用 event.source.postMessage(...) 向回发送消息</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_29-点击劫持攻击" tabindex="-1"><a class="header-anchor" href="#_29-点击劫持攻击" aria-hidden="true">#</a> 29 - 点击劫持攻击</h3><ul><li>点击劫持攻击允许恶意页面以用户的名义点击受害网站，例如在用户操作界面放置伪装的 <code>&lt;frame&gt;</code> 提供恶意访问攻击。</li><li>服务器端设置 header <code>X-Frame-Options</code> 可以允许或禁止在 <code>&lt;frame&gt;</code> 中显示页面，它必须被完全作为 HTTP-header 发送。如果浏览器在 HTML <code>&lt;meta&gt;</code> 标签中找到它，则会忽略它，因此 <code>&lt;meta http-equiv=&quot;X-Frame-Options&quot;...&gt;</code> 没有任何作用。</li></ul><table><thead><tr><th>header</th><th>描述</th></tr></thead><tbody><tr><td>DENY</td><td>始终禁止在 <code>&lt;frame&gt;</code> 中显示此页面</td></tr><tr><td>SAMEORIGIN</td><td>允许在和父文档同源的 <code>&lt;frame&gt;</code> 中显示此页面</td></tr><tr><td>ALLOW-FROM domain</td><td>允许在来自给定域的父文档的 <code>&lt;frame&gt;</code> 中显示此页面</td></tr></tbody></table><ul><li><code>X-Frame-Options</code> 有一个副作用，其他的网站即使有充分的理由也无法在 <code>&lt;frame&gt;</code> 中显示页面。</li><li>samesite cookie 特性也可以阻止点击劫持攻击，<code>samesite</code> 特性的 cookie 仅在网站是通过直接方式打开（而不是通过 <code>&lt;frame&gt;</code> 或其他方式）的情况下才发送到网站。</li></ul><h3 id="_30-二进制" tabindex="-1"><a class="header-anchor" href="#_30-二进制" aria-hidden="true">#</a> 30 - 二进制</h3><p><strong>ArrayBuffer 对象</strong></p><ul><li>基本的二进制对象是 ArrayBuffer 是对固定长度的连续内存空间的引用。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个长度为 16 的 buffer</span>
<span class="token comment">// 它会分配一个 16 字节的连续内存空间，并用 0 进行预填充</span>
<span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span>  <span class="token comment">// 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TypedArray 对象</strong></p><ul><li>操作 ArrayBuffer 需要使用视图对象。</li></ul><table><thead><tr><th>视图对象</th><th>描述</th></tr></thead><tbody><tr><td>Uint8Array / Uint16Array / Uint32Array</td><td>用于 8 位、16 位、32 位无符号整数</td></tr><tr><td>Int8Array / Int16Array / Int32Array</td><td>用于有符号整数，可以为负数</td></tr><tr><td>Float32Array、Float64Array</td><td>用于 32 位、 64 位的有符号浮点数</td></tr><tr><td>Uint8ClampedArray</td><td>用于 8 位整数，在赋值时便固定其值</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个长度为 16 的 buffer</span>
<span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>

<span class="token comment">// 将 buffer 视为一个 32 位整数的序列 数组</span>
<span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>Uint32Array<span class="token punctuation">.</span><span class="token constant">BYTES_PER_ELEMENT</span><span class="token punctuation">)</span>  <span class="token comment">// 每个整数 4 个字节</span>
<span class="token function">alert</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// 它存储了 4 个整数</span>
<span class="token function">alert</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span>  <span class="token comment">// 16 字节中的大小</span>

<span class="token comment">// 写入一个值</span>
view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123456</span>

<span class="token comment">// 遍历值</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment">// 123456 0 0 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>所有这些视图的通用术语是 TypedArray，它们共享同一方法和属性集，没有称为 TypedArray 的全局属性，也没有直接可用的 TypedArray 构造函数，但是有很多不同的全局属性，其值是指定元素类型的类型化数组构造函数，如上。类型化数组的行为类似于常规数组，具有索引并且是可迭代的。参数有 5 种变体：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">TypedArray</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token punctuation">[</span>byteOffset<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">TypedArray</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">TypedArray</span><span class="token punctuation">(</span>typedArray<span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">TypedArray</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">TypedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>TypedArray 具有常规的 Array 方法，可以遍历、<code>map</code>、<code>slice</code>、<code>find</code>、<code>reduce</code> 等，没有 <code>splice</code> 无法删除一个值，因为类型化数组是缓冲区（buffer）上的视图，并且缓冲区是固定的、连续的内存区域，所能做的就是分配一个零值，也无 <code>concat</code> 方法。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>arr.set(fromArr, [offset])</td><td>从 offset（默认为 0）开始，将 fromArr 中的所有元素复制到 arr</td></tr><tr><td>arr.subarray([begin, end])</td><td>创建一个从 begin 到 end（不包括）相同类型的新视图，这类似于 <code>slice</code> 方法，但不复制任何内容，只是创建一个新视图，以对给定片段的数据进行操作</td></tr></tbody></table><p><strong>DataView 对象</strong></p><ul><li>DataView 是在 ArrayBuffer 上的一种特殊的超灵活未类型化视图，它允许以任何格式访问任何偏移量（offset）的数据。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token punctuation">[</span>byteOffset<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>byteLength<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>buffer</td><td>底层的 ArrayBuffer， 与类型化数组不同 DataView 不会自行创建缓冲区（buffer），需要事先准备好</td></tr><tr><td>byteOffset</td><td>视图的起始字节位置，默认为 0</td></tr><tr><td>byteLength</td><td>视图的字节长度，默认至 buffer 的末尾</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 4 个字节的二进制数组，每个都是最大值 255</span>
<span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>buffer

<span class="token keyword">let</span> dataView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>

<span class="token comment">// 在偏移量为 0 处获取 8 位数字</span>
<span class="token function">alert</span><span class="token punctuation">(</span>dataView<span class="token punctuation">.</span><span class="token function">getUint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 255</span>

<span class="token comment">// 在偏移量为 0 处获取 16 位数字，它由 2 个字节组成，一起解析为 65535</span>
<span class="token function">alert</span><span class="token punctuation">(</span>dataView<span class="token punctuation">.</span><span class="token function">getUint16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 65535（最大的 16 位无符号整数）</span>

<span class="token comment">// 在偏移量为 0 处获取 32 位数字</span>
<span class="token function">alert</span><span class="token punctuation">(</span>dataView<span class="token punctuation">.</span><span class="token function">getUint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 4294967295（最大的 32 位无符号整数）</span>

<span class="token comment">// 将 4 个字节的数字设为 0，即将所有字节都设为 0</span>
dataView<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TextDecoder / TextEncoder 对象</strong></p><ul><li>TextDecoder 对象在给定缓冲区（buffer）和编码格式（encoding）的情况下，允许将值读取为实际的 JS 字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>label</td><td>编码格式，默认为 utf-8，但同时也支持 big5，windows-1251 等</td></tr><tr><td>options</td><td>可选对象</td></tr><tr><td>-&gt; fatal: true</td><td>如果为 true 则无效（不可解码）字符抛出异常，否则（默认）用字符 \\uFFFD 替换无效字符</td></tr><tr><td>-&gt; gnoreBOM: true</td><td>如果为 true 则 BOM（可选的字节顺序 Unicode 标记）</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 解码</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>input<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>input</td><td>要被解码的 BufferSource</td></tr><tr><td>options</td><td>可选对象</td></tr><tr><td>-&gt; stream</td><td>对于解码流为 true，则将传入的数据块（chunk）作为参数重复调用 decoder，在这种情况下，多字节的字符可能偶尔会在块与块之间被分割，这个选项告诉 TextDecoder 记住未完成的字符，并在下一个数据块来的时候进行解码</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> uint8Array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>uint8Array<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>TextEncoder 对象做相反的事情，将字符串转换为字节。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.encode(str)</td><td>从字符串返回 Uint8Array</td></tr><tr><td>.encodeInto(str, destination)</td><td>将 str 编码到 destination 中，该目标必须为 Uint8Array</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> uint8Array <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>uint8Array<span class="token punctuation">)</span>  <span class="token comment">// 72 101 108 108 111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Blob 对象</strong></p><ul><li>Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>blobParts<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>blobParts</td><td>是 Blob / BufferSource / String 类型值的数组</td></tr><tr><td>options</td><td>可选对象</td></tr><tr><td>-&gt; type</td><td>Blob 类型，通常是 MIME 类型，例如 image/png</td></tr><tr><td>-&gt; endings</td><td>是否转换换行符，使 Blob 对应于当前操作系统的换行符（\\r\\n 或 \\n），默认为 transparent（啥也不做），不过也可以是 native（转换）</td></tr></tbody></table><ul><li>MIME 指媒体类型，是一种标准，其通用结构为 <code>type/subtype</code></li></ul><table><thead><tr><th>MIME 媒体类型</th><th>描述</th></tr></thead><tbody><tr><td>text/plain</td><td>文本文件默认值，即使它意味着未知的文本文件，但浏览器认为是可以直接展示的</td></tr><tr><td>text/html</td><td></td></tr><tr><td>text/css</td><td></td></tr><tr><td>text/javascript</td><td></td></tr><tr><td>image/gif</td><td></td></tr><tr><td>image/png</td><td></td></tr><tr><td>image/jpeg</td><td></td></tr><tr><td>image/bmp</td><td></td></tr><tr><td>image/webp</td><td></td></tr><tr><td>image/x-icon</td><td></td></tr><tr><td>image/svg+xml</td><td></td></tr><tr><td>audio/midi</td><td></td></tr><tr><td>audio/mpeg</td><td></td></tr><tr><td>audio/webm</td><td></td></tr><tr><td>audio/ogg</td><td></td></tr><tr><td>audio/wav</td><td></td></tr><tr><td>video/webm</td><td></td></tr><tr><td>video/ogg</td><td></td></tr><tr><td>application/octet-stream</td><td>应用程序文件的默认值，意思是未知的应用程序文件，浏览器一般不会自动执行或询问执行</td></tr><tr><td>application/pkcs12</td><td></td></tr><tr><td>application/vnd.mspowerpoint</td><td></td></tr><tr><td>application/xhtml+xml</td><td></td></tr><tr><td>application/xml</td><td></td></tr><tr><td>application/pdf</td><td></td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 提取 blob 片段</span>
blob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">[</span>byteStart<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>byteEnd<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>contentType<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>byteStart</td><td>起始字节，默认为 0</td></tr><tr><td>byteEnd</td><td>最后一个字节，默认为最后</td></tr><tr><td>contentType</td><td>新 blob 的 type，默认与源 blob 相同</td></tr></tbody></table><ul><li>无法直接在 blob 中更改数据，但可以通过 <code>.slice</code> 获得 blob 的多个部分，从这些部分创建新的 Blob 对象，将它们组成新的 blob</li><li>（1）Blob 用作 URL，Blob 可以很容易用作 <code>&lt;a&gt;</code>、<code>&lt;img&gt;</code> 或其他标签的 URL，来显示它们的内容。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- download 特性强制浏览器下载而不是导航 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello.txt<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>#<span class="token punctuation">&#39;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>link<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Download<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

link<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>URL.createObjectURL()</code> 取一个 blob，并为其创建一个唯一的 URL，形式为 <code>blob:&lt;origin&gt;/&lt;uuid&gt;</code> 也就是 <code>link.href</code> 的值的样子。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">blob</span><span class="token operator">:</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>javascript<span class="token punctuation">.</span>com<span class="token operator">/</span>1e67e00e<span class="token operator">-</span>860d<span class="token operator">-</span>40a5<span class="token operator">-</span>89ae<span class="token operator">-</span>6ab0cbee6273
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>浏览器内部为每个通过 <code>URL.createObjectURL()</code> 生成的 URL 存储了一个 URL → Blob 的映射，因此，此类 URL 很短，但可以访问 Blob。生成的 URL 仅在当前文档打开的状态下才有效，它允许引用 <code>&lt;img&gt;</code>、<code>&lt;a&gt;</code> 中的 Blob，以及基本上任何其他期望 URL 的对象。虽然这里有 Blob 的映射，但 Blob 本身只保存在内存中的，浏览器无法释放它。</li><li><code>URL.revokeObjectURL(url)</code> 从内部映射中移除引用，因此允许 Blob 被删除（如果没有其他引用的话），并释放内存。</li><li><code>URL.createObjectURL()</code> 的一个替代方法是将 Blob 转换为 base64-编码的字符串。这种编码将二进制数据表示为一个由 0 到 64 的 ASCII 码组成的字符串。</li><li>（2）Image 转换为 Blob，图像操作是通过 <code>&lt;canvas&gt;</code> 元素来实现的，使用 <code>canvas.drawImage</code> 在 Canvas 上绘制图像（或图像的一部分）。调用 <code>canvas.toBlob(callback, format, quality)</code> 创建一个 Blob，并在创建完成后使用其运行 callback</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取任何图像</span>
<span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 生成同尺寸的 &lt;canvas&gt;</span>
<span class="token keyword">let</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span>
canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> img<span class="token punctuation">.</span>clientWidth
canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> img<span class="token punctuation">.</span>clientHeight

<span class="token keyword">let</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 向其中复制图像（此方法允许剪裁图像）</span>
context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// context.rotate()，并在 canvas 上做很多其他事情</span>

<span class="token comment">// toBlob 是异步操作，结束后会调用 callback</span>
canvas<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// blob 创建完成，下载它</span>
  <span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
  link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">&#39;example.png&#39;</span>

  link<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
  link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 删除内部 blob 引用，这样浏览器可以从内存中将其清除</span>
  <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>（3）Blob 转换为 ArrayBuffer，如果需要执行低级别的处理时，可以从 <code>blob.arrayBuffer()</code> 中获取最低级别的 ArrayBuffer</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从 bolb 获取 arrayBuffer</span>
<span class="token keyword">const</span> bufferPromise <span class="token operator">=</span> <span class="token keyword">await</span> blob<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 或</span>
blob<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">buffer</span> <span class="token operator">=&gt;</span> <span class="token comment">/* 处理 ArrayBuffer */</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>（4）Blob 转换为 Stream，Stream 是一种特殊的对象，可以从它那里逐部分地读取（或写入）。Blob 接口里的 <code>.stream()</code> 方法返回一个 ReadableStream，在被读取时可以返回 Blob 中包含的数据。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从 blob 获取可读流（readableStream）</span>
<span class="token keyword">const</span> readableStream <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> stream <span class="token operator">=</span> readableStream<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对于每次迭代：value 是下一个 blob 数据片段</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> done<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取完毕 stream 里已经没有数据了</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;all blob processed.&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 对刚从 blob 中读取的数据片段做一些处理</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>File / FileReader 对象</strong></p><ul><li>File 对象继承自 Blob，并扩展了与文件系统相关的功能。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileParts<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>fileParts</td><td>Blob / BufferSource / String 类型值的数组</td></tr><tr><td>fileName</td><td>文件名</td></tr><tr><td>options</td><td>可选对象</td></tr><tr><td>-&gt; lastModified</td><td>最后一次修改的时间戳（整数日期）</td></tr></tbody></table><ul><li>常见的是从 <code>&lt;input type=&quot;file&quot;&gt;</code> 或拖放或其他浏览器接口来获取文件。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">showFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">function</span> <span class="token function">showFile</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> file <span class="token operator">=</span> input<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">File name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Last modified: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>file<span class="token punctuation">.</span>lastModified<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输入 input 可以选择多个文件，因此 <code>input.files</code> 是一个类数组对象。</li><li>FileReader 对象，其唯一目的是从 Blob（因此也从 File）对象中读取数据。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.readAsArrayBuffer(blob)</td><td>将数据读取为二进制格式的 ArrayBuffer</td></tr><tr><td>.readAsText(blob, [encoding])</td><td>将数据读取为给定编码（默认为 utf-8 编码）的文本字符串</td></tr><tr><td>.readAsDataURL(blob)</td><td>读取二进制数据，并将其编码为 base64 的 dataUrl</td></tr><tr><td>.abort()</td><td>取消操作</td></tr></tbody></table><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> file <span class="token operator">=</span> input<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

  <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

  reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  reader<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在很多情况下，不必读取文件内容，就像处理 Blob 一样，可以使用 <code>URL.createObjectURL(file)</code> 创建一个短的 URL，并将其赋给 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 这样，文件便可以下载文件或者将其呈现为图像，作为 Canvas 等的一部分，如果要通过网络发送一个 File，像 XMLHttpRequest 或 fetch 等网络 API 本身就接受 File 对象。</li></ul><h3 id="_31-localstorge-sessionstorage" tabindex="-1"><a class="header-anchor" href="#_31-localstorge-sessionstorage" aria-hidden="true">#</a> 31 - LocalStorge / SessionStorage</h3><ul><li>Web 存储对象 localStorage 和 sessionStorage 允许在浏览器上保存键 / 值对。</li><li>与 cookie 不同，Web 存储对象不会随每个请求被发送到服务器，因此，可以保存更多数据，大多数现代浏览器都允许保存至少 5 MB 的数据，并且具有用于配置数据的设置。还有一点和 cookie 不同，服务器无法通过 HTTP header 操纵存储对象，一切都是在 JS 中完成的，存储绑定到源（域/协议/端口三者），也就是说，不同协议或子域对应不同的存储对象，它们之间无法访问彼此数据。</li><li>两个存储对象都提供相同的方法和属性：</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.setItem(key, value)</td><td>存储键 / 值对</td></tr><tr><td>.getItem(key)</td><td>按照键获取值</td></tr><tr><td>.key(index)</td><td>获取该索引下的键名</td></tr><tr><td>.removeItem(key)</td><td>删除键及其对应的值</td></tr><tr><td>.clear()</td><td>删除所有数据</td></tr><tr><td>.length</td><td>存储的内容的长度</td></tr></tbody></table><ul><li>localStorage 的特点是：在同源的所有标签页和窗口之间共享数据。数据不会过期，它在浏览器重启甚至系统重启后仍然存在。键和值都必须是字符串，如果是任何其他类型，例数字或对象，它会被自动转换为字符串。</li><li>sessionStorage 的特点是：数据只存在于当前浏览器标签页，具有相同页面的另一个标签页中将会有不同的存储。但在同一标签页下的 <code>&lt;iframe&gt;</code> 之间是共享的（假如它们来自相同的源）。数据在页面刷新后仍然保留，但在关闭/重新打开浏览器标签页后不会被保留。</li><li>当 localStorage 或 sessionStorage 中的数据更新后，storage 事件就会触发，此时 event 对象具有以下属性：</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>.key</td><td>发生更改的数据的 key，如果调用的是 .clear() 方法，则为 null</td></tr><tr><td>.oldValue</td><td>旧值，如果是新增数据，则为 null</td></tr><tr><td>.newValue</td><td>新值，如果是删除数据，则为 null</td></tr><tr><td>.url</td><td>发生数据更新的文档的 url</td></tr><tr><td>.storageArea</td><td>发生数据更新的 localStorage 或 sessionStorage 对象</td></tr></tbody></table><h3 id="_32-indexeddb" tabindex="-1"><a class="header-anchor" href="#_32-indexeddb" aria-hidden="true">#</a> 32 - IndexedDB</h3><ul><li><p>IndexedDB 是一个浏览器内建的数据库，通过支持多种类型的键，来存储几乎可以是任何类型的值。支持键值范围查询、索引，和 localStorage 相比它可以存储更大的数据量。IndexedDB 适用于离线应用，可与 ServiceWorkers 和其他技术相结合使用。</p></li><li><p>打开数据库 <code>let openRequest = indexedDB.open(name, version)</code></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>数据库的名称</td></tr><tr><td>version</td><td>一个正整数版本，默认为 1，调用之后会返回</td></tr></tbody></table><ul><li>监听 openRequest 对象上的事件。</li></ul><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>success</td><td>数据库准备就绪</td></tr><tr><td>error</td><td>打开失败</td></tr><tr><td>upgradeneeded</td><td>数据库已准备就绪，但其版本已过时</td></tr></tbody></table><ul><li>如果本地数据库版本低于 <code>.open()</code> 中指定的版本，会触发一个特殊事件 upgradeneeded，可以根据需要比较版本并升级数据结构。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> openRequest <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;store&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

openRequest<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果客户端没有数据库则触发</span>
  <span class="token comment">// ...执行初始化...</span>
<span class="token punctuation">}</span>

openRequest<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> openRequest<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

openRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> db <span class="token operator">=</span> openRequest<span class="token punctuation">.</span>result
  <span class="token comment">// 继续使用 db 对象处理数据库</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>删除数据库 <code>let deleteRequest = indexedDB.deleteDatabase(name)</code></li><li><code>deleteRequest.onsuccess/onerror</code> 用于追踪（tracks）结果。</li><li>versionchange 事件会在过时的数据库对象上触发。需要监听这个事件，关闭对旧版本数据库的连接，还应该建议访问者重新加载页面，以加载最新的代码。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> openRequest <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;store&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

openRequest<span class="token punctuation">.</span>onupgradeneeded <span class="token operator">=</span> <span class="token operator">...</span>
openRequest<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token operator">...</span>

openRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> db <span class="token operator">=</span> openRequest<span class="token punctuation">.</span>result

  db<span class="token punctuation">.</span><span class="token function-variable function">onversionchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Database is outdated, please reload the page.&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ……数据库已经准备好，请使用它……</span>
<span class="token punctuation">}</span>

openRequest<span class="token punctuation">.</span><span class="token function-variable function">onblocked</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果正确处理了 onversionchange 事件，这个事件就不应该触发</span>
  <span class="token comment">// 这意味着还有另一个指向同一数据库的连接</span>
  <span class="token comment">// 并且在 db.onversionchange 被触发后，该连接没有被关闭</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>对象库是 IndexedDB 的核心概念，在其他数据库中对应的对象称为表或集合，它是储存数据的地方。一个数据库可能有多个存储区，尽管被命名为对象库，但也可以存储原始类型。有一种对象不能被存储，即循环引用的对象，此类对象不可序列化，也不能进行 <code>JSON.stringify</code></p></li><li><p>库中的每个值都必须有唯一的键 key，键的类型必须为数字、日期、字符串、二进制或数组。它是唯一的标识符，所以可以通过键来搜索/删除/更新值。</p></li><li><p>创建对象库 <code>let objectStore = db.createObjectStore(name, [keyOptions])</code></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>存储区名称</td></tr><tr><td>keyOptions</td><td>可选对象</td></tr><tr><td>-&gt; keyPath</td><td>对象属性的路径，IndexedDB 将以此路径作为键，例如 id</td></tr><tr><td>-&gt; autoIncrement</td><td>如果为 true，则自动生成新存储的对象的键，键是一个不断递增的数字</td></tr></tbody></table><ul><li>在 upgradeneeded 处理程序中，只有在创建数据库版本时，对象库被才能被创建/修改。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> openRequest <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;db&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">// 创建/升级 数据库而无需版本检查</span>
openRequest<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>db<span class="token punctuation">.</span>objectStoreNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>删除对象库 <code>db.deleteObjectStore(&#39;books&#39;)</code></li><li>事务是一组操作，要么全部成功，要么全部失败。所有数据操作都必须在 IndexedDB 中的事务内进行。</li><li>启动事务 <code>db.transaction(store, [type])</code></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>store</td><td>事务要访问的库名称，要访问多个库，则是库名称的数组</td></tr><tr><td>type</td><td>事务类型</td></tr><tr><td>-&gt; readonly</td><td>只读，默认值</td></tr><tr><td>-&gt; readwrite</td><td>只能读取和写入数据，而不能创建/删除/更改对象库</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">&quot;books&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 获取对象库进行操作</span>
<span class="token keyword">let</span> books <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&quot;books&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token literal-property property">created</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> request <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>

request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Book added to the store&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象库支持两种存储值的方法：</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.put(value, [key])</td><td>将 value 添加到存储区，仅当对象库没有 keyPath 或 autoIncrement 时，才提供 key，如果已经存在具有相同键的值，则将替换该值</td></tr><tr><td>.add(value, [key])</td><td>与 put 相同，但是如果已经有一个值具有相同的键，则请求失败，并生成一个名为 ConstraInterror 的错误</td></tr></tbody></table><ul><li>当所有事务的请求完成，并且微任务队列为空时，它将自动提交。为了检测到成功完成的时刻，可以监听 <code>transaction.oncomplete</code> 事件。</li><li>要手动中止事务，调用 <code>transaction.abort()</code> 取消请求里所做的所有修改，并触发 <code>transaction.onabort</code> 事件。</li><li>失败的请求将自动中止事务，并取消所有的更改。</li><li>自己去处理失败事务（例如尝试另一个请求）并让它继续执行，而不是取消现有的更改。可以调用 <code>request.onerror</code> 处理程序，在其中调用 <code>event.preventDefault()</code> 防止事务中止。</li><li>IndexedDB 事件冒泡：请求 → 事务 → 数据库。可以通过在 <code>request.onerror</code> 中使用 <code>event.stopPropagation()</code> 来停止冒泡，从而停止 <code>db.onerror</code> 事件。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>error<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;ConstraintError&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Book with such id already exists&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 处理错误</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 不要中止事务</span>
    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 不要让错误冒泡, 停止它的传播</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 什么都不做</span>
    <span class="token comment">// 事务将中止</span>
    <span class="token comment">// 可以解决 transaction.onabort 中的错误</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象库有两种主要的搜索类型：通过键值或键值范围。</li><li>在 books 存储中，将是 <code>book.id</code> 的值或值的范围。通过另一个对象字段，例如 <code>book.price</code>，这需要一个额外的数据结构，名为索引（index）</li><li>IDBKeyRange 对象，指定一个可接受的键值范围，IDBKeyRange 对象是通过下列调用创建的：</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>IDBKeyRange.lowerBound(lower, [open])</td><td>表示：≥ lower（如果 open 是 true，表示 &gt; lower）</td></tr><tr><td>IDBKeyRange.upperBound(upper, [open])</td><td>表示：≤ upper（如果 open 是 true，表示 &lt; upper）</td></tr><tr><td>IDBKeyRange.bound(lower, upper, [lowerOpen], [upperOpen])</td><td>表示: 在 lower 和 upper 之间（如果 open 为 true，则相应的键不包括在范围中）</td></tr><tr><td>IDBKeyRange.only(key)</td><td>仅包含一个键的范围 key，很少使用</td></tr></tbody></table><ul><li>要进行实际的搜索，有以下方法，它们接受一个可以是精确键值或键值范围的 query 参数：</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>store.get(query)</td><td>按键或范围搜索第一个值</td></tr><tr><td>store.getAll([query], [count])</td><td>搜索所有值，如果 count 给定，则按 count 进行限制</td></tr><tr><td>store.getKey(query)</td><td>搜索满足查询的第一个键，通常是一个范围</td></tr><tr><td>store.getAllKeys([query], [count])</td><td>搜索满足查询的所有键，通常是一个范围，如果 count 给定，则最多为 count</td></tr><tr><td>store.count([query])</td><td>获取满足查询的键的总数，通常是一个范围</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取一本书</span>
books<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 获取 &#39;css&#39; &lt;= id &lt;= &#39;html&#39; 的书</span>
books<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span><span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 获取 id &lt; &#39;html&#39; 的书</span>
books<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>IDBKeyRange<span class="token punctuation">.</span><span class="token function">upperBound</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 获取所有书</span>
books<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 获取所有 id &gt; &#39;js&#39; 的键</span>
books<span class="token punctuation">.</span><span class="token function">getAllKeys</span><span class="token punctuation">(</span>IDBKeyRange<span class="token punctuation">.</span><span class="token function">lowerBound</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象内部存储的值是按键对值进行排序的，因此请求的返回值，是按照键的顺序排列的。</li><li>索引是存储的附加项，用于跟踪给定的对象字段。对于该字段的每个值，它存储有该值的对象的键列表。</li><li>创建索引 <code>objectStore.createIndex(name, keyPath, [options])</code></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>索引名称</td></tr><tr><td>keyPath</td><td>索引应该跟踪的对象字段的路径（将根据该字段进行搜索）</td></tr><tr><td>option</td><td>可选对象</td></tr><tr><td>-&gt; unique</td><td>如果为true，则存储中只有一个对象在 keyPath 上具有给定值，如果尝试添加重复项，索引将生成错误</td></tr><tr><td>-&gt; multiEntry</td><td>只有 keypath 上的值是数组时才使用。默认情况下，索引将默认把整个数组视为键。但是如果 multiEntry 为 true，那么索引将为该数组中的每个值保留一个存储对象的列表，所以数组成员成为了索引键</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>openRequest<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在 versionchange 事务中，必须在这里创建索引</span>
  <span class="token keyword">let</span> books <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&#39;price_idx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>delete</code> 方法查找要由查询删除的值，调用格式类似于 <code>getAll</code>。<code>books.delete(query)</code> 通过查询删除匹配的值，<code>books.clear()</code> 删除所有内容。</li><li>像 <code>getAll/getAllKeys</code> 这样的方法，会返回一个键/值数组。光标是一种特殊的对象，它在给定查询的情况下遍历对象库，一次返回一个键/值，从而节省内存。由于对象库是按键在内部排序的，因此光标按键顺序（默认为升序）遍历存储。</li><li>类似于 getAll，但带有光标 <code>let request = store.openCursor(query, [direction])</code> 获取键，而不是值（例如 getAllKeys）</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>query</td><td>是一个键值或键值范围，与 getAll 相同</td></tr><tr><td>direction</td><td>可选参数</td></tr><tr><td>-&gt; next</td><td>默认值，光标从有最小索引的记录向上移动</td></tr><tr><td>-&gt; prev</td><td>相反的顺序，从有最大的索引的记录开始下降</td></tr><tr><td>-&gt; nextunique/prevunique</td><td>同上，但是跳过键相同的记录，仅适用于索引上的光标</td></tr></tbody></table><ul><li>光标对象的主要区别在于 <code>request.onSuccess</code> 多次触发，每个结果触发一次。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.advance(count)</td><td>将光标向前移动 count 次，跳过值</td></tr><tr><td>.continue([key])</td><td>将光标移至匹配范围中的下一个值（如果给定键，紧接键之后）</td></tr></tbody></table>`,629),d=n("li",null,"无论是否有更多的值匹配光标调用 onsuccess，结果中，可以获得指向下一条记录的光标，或者 undefined",-1),r=n("li",null,"索引是允许按对象字段进行搜索，在索引上的光标与在对象存储上的光标完全相同，它们通过一次返回一个值来节省内存。",-1),k={href:"https://github.com/jakearchibald/idb",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token keyword">await</span> idb<span class="token punctuation">.</span><span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&#39;store&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token parameter">db</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>db<span class="token punctuation">.</span>oldVersion <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行初始化</span>
    db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;readwrite&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> books <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>

  <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>complete

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;jsbook saved&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 错误处理</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;unhandledrejection&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> request <span class="token operator">=</span> event<span class="token punctuation">.</span>target  <span class="token comment">// IndexedDB 本机请求对象</span>
  <span class="token keyword">let</span> error <span class="token operator">=</span> event<span class="token punctuation">.</span>reason  <span class="token comment">//  未处理的错误对象，与 request.error 相同</span>
  <span class="token comment">// ……报告错误……</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>浏览器一旦执行完成当前的代码和微任务之后，事务就会自动提交，因此，如果在事务中间放置一个类似 fetch 的宏任务，事务只是会自动提交，而不会等待它执行完成，所以下一个请求会失败。</li></ul><h3 id="_33-动画" tabindex="-1"><a class="header-anchor" href="#_33-动画" aria-hidden="true">#</a> 33 - 动画</h3><ul><li>贝塞尔曲线用于计算机图形绘制形状，贝塞尔曲线由控制点定义。</li><li>时间函数 <code>steps(number of steps, [start/end])</code> 允许让动画分段进行，<code>number of steps</code> 表示需要拆分为多少段。</li><li>transitionend 的事件对象 event 有几个特定的属性：</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>.propertyName</td><td>当前完成动画的属性，这在同时为多个属性加上动画时会很有用</td></tr><tr><td>.elapsedTime</td><td>动画完成的时间（按秒计算），不包括 transition-delay</td></tr></tbody></table><ul><li>使用 <code>setInterval()</code> 重复调用一个函数或执行一个代码片段来控制动画：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>elem<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timePassed <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start

    train<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> timePassed <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>timePassed <span class="token operator">&gt;</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>let requestId = requestAnimationFrame(callback)</code> 告诉浏览器执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。会让 callback 函数在浏览器每次重绘的最近时间运行。返回值 requestId 可用来取消回调，取消回调的周期执行 <code>cancelAnimationFrame(requestId)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>timing<span class="token punctuation">,</span> draw<span class="token punctuation">,</span> duration<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// timeFraction 从 0 增加到 1</span>
    <span class="token keyword">let</span> timeFraction <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> duration
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeFraction <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> timeFraction <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token comment">// 计算当前动画状态</span>
    <span class="token keyword">let</span> progress <span class="token operator">=</span> <span class="token function">timing</span><span class="token punctuation">(</span>timeFraction<span class="token punctuation">)</span>

    <span class="token function">draw</span><span class="token punctuation">(</span>progress<span class="token punctuation">)</span>  <span class="token comment">// 绘制</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeFraction <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>animate()</code> 函数接受 3 个描述动画的基本参数：</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>timing</td><td>时序函数</td></tr><tr><td>draw</td><td>获取动画完成状态并绘制的函数</td></tr><tr><td>duration</td><td>动画总时间，比如 1000</td></tr></tbody></table><ul><li>时序函数是类似 CSS 属性 <code>transition-timing-function</code>，传入一个已过去的时间与总时间之比的小数（0 代表开始，1 代表结束），返回动画完成度（类似 Bezier 曲线中的 y）。</li><li>值 <code>progress = 0</code> 表示开始动画状态，<code>progress = 1</code> 表示结束状态，这是实际绘制动画的函数。</li><li>（1）n 次幂的抛物线：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">quad</span><span class="token punctuation">(</span><span class="token parameter">timeFraction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>timeFraction<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>（2）圆弧：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">circ</span><span class="token punctuation">(</span><span class="token parameter">timeFraction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span>timeFraction<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>（3）反弹、弓箭射击：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> timeFraction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>timeFraction<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> timeFraction <span class="token operator">-</span> x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>（4）弹跳：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bounce</span><span class="token punctuation">(</span><span class="token parameter">timeFraction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">+=</span> b<span class="token punctuation">,</span> b <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeFraction <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">-</span> <span class="token number">6</span> <span class="token operator">*</span> a <span class="token operator">-</span> <span class="token number">11</span> <span class="token operator">*</span> timeFraction<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>（5）伸缩：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">elastic</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> timeFraction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>timeFraction <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> timeFraction<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>变换函数 <code>makeEaseOut()</code>，接受一个常规时序函数 <code>timing</code> 并返回一个封装器，里面封装了 <code>timing</code> 函数：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 接受时序函数，返回变换后的变体</span>
<span class="token keyword">function</span> <span class="token function">makeEaseOut</span><span class="token punctuation">(</span><span class="token parameter">timing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">timeFraction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token function">timing</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> timeFraction<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在动画的开头和结尾都显示效果，该变换称为 easeInOut：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeEaseInOut</span><span class="token punctuation">(</span><span class="token parameter">timing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">timeFraction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeFraction <span class="token operator">&lt;</span> <span class="token number">.5</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">timing</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> timeFraction<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
    <span class="token keyword">else</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token function">timing</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> timeFraction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_34-web-components" tabindex="-1"><a class="header-anchor" href="#_34-web-components" aria-hidden="true">#</a> 34 - Web Components</h3><ul><li>一个组件有自己的 JS 类与 DOM 结构，并且只由自己的类管理，无法被外部代码操作。API 指事件、类方法等，让组件可以与其他组件交互。</li><li>可以通过描述带有自己的方法、属性和事件等的类来创建自定义 HTML 元素。在 Custom elements（自定义标签）定义完成之后，可以将其和 HTML 的内建标签一同使用。</li><li>Custom elements 有两种：一种是 Autonomous custom elements（自主自定义标签），全新的元素，继承自 HTMLElement 抽象类；另一种是Customized built-in elements（自定义内建元素），继承内建的 HTML 元素，比如自定义 HTMLButtonElement 等。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyElement</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 元素在这里创建</span>
  <span class="token punctuation">}</span>

  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在元素被添加到文档之后，浏览器会调用这个方法</span>
    <span class="token comment">// 如果一个元素被反复添加到文档／移除文档，那么这个方法会被多次调用</span>
  <span class="token punctuation">}</span>

  <span class="token function">disconnectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在元素从文档移除的时候，浏览器会调用这个方法</span>
    <span class="token comment">// 如果一个元素被反复添加到文档／移除文档，那么这个方法会被多次调用</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">observedAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token comment">/* 属性数组，这些属性的变化会被监视 */</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">attributeChangedCallback</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当上面数组中的属性发生变化的时候，这个方法会被调用</span>
  <span class="token punctuation">}</span>

  <span class="token function">adoptedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在元素被移动到新的文档的时候，这个方法会被调用</span>
    <span class="token comment">// document.adoptNode 会用到, 非常少见</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 还可以添加更多的元素方法和属性</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注册元素，让浏览器知道新定义的类是为 &lt;my-element&gt; 服务的</span>
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;my-element&quot;</span><span class="token punctuation">,</span> MyElement<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Custom element 名称必须包括一个短横线,，比如 <code>my-element</code> 和 <code>super-button</code> 都是有效的元素名，这是为了确保 Custom element 和内建 HTML 元素之间不会发生命名冲突。</li><li>为了监视这些属性，可以在 <code>observedAttributes()</code> static getter 中提供属性列表。当这些属性发生变化的时候，<code>attributeChangedCallback</code> 会被调用。出于性能优化的考虑，其他属性变化的时候并不会触发这个回调方法。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">class</span> <span class="token class-name">TimeFormatted</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;datetime&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;year&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;month&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      <span class="token literal-property property">day</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;day&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      <span class="token literal-property property">hour</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;hour&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minute</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;minute&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      <span class="token literal-property property">second</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;second&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      <span class="token literal-property property">timeZoneName</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;time-zone-name&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">undefined</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>rendered<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rendered <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">observedAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;datetime&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;year&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;month&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;day&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hour&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;minute&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;second&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;time-zone-name&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">attributeChangedCallback</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;time-formatted&quot;</span><span class="token punctuation">,</span> TimeFormatted<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time-formatted</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elem<span class="token punctuation">&quot;</span></span> <span class="token attr-name">hour</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>numeric<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minute</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>numeric<span class="token punctuation">&quot;</span></span> <span class="token attr-name">second</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>numeric<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time-formatted</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;datetime&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 HTML 解析器构建 DOM 的时候，会按照先后顺序处理元素，先处理父级元素再处理子元素。如果需要子元素，可以使用延迟时间为零的 <code>setTimeout</code> 来推迟访问子元素。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 这个按钮在被点击的时候说 hello</span>
<span class="token keyword">class</span> <span class="token class-name">HelloButton</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLButtonElement</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;hello-button&#39;</span><span class="token punctuation">,</span> HelloButton<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">extends</span><span class="token operator">:</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello-button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Shadow DOM 为封装而生，可以让一个组件拥有自己的影子 DOM 树，这个 DOM 树不能在主文档中被任意访问，可能拥有局部样式规则，还有其他特性。</li><li>一个 DOM 元素可以有以下两类 DOM 子树，一类是 Light tree（光明树），即常规 DOM 子树，由 HTML 子元素组成，另一类是 Shadow tree（影子树），一个隐藏的 DOM 子树，不在 HTML 中反映，无法被察觉。</li><li>如果一个元素同时有以上两种子树，那么浏览器只渲染 Shadow tree，但是同样可以设置两种树的组合。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;show-hello&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> HTMLElement <span class="token punctuation">{</span>
  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> shadow <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    shadow<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;p&gt;
      Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
    &lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>show-hello</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>John<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>show-hello</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Element.attachShadow({mode: …})</code> 可以创建一个 Shadow tree，这里有两个限制，一是在每个元素中，只能创建一个 Shadow root，二是 Element 必须是自定义元素，或者是以下元素的其中一个：<code>「article」</code>、<code>「aside」</code>、<code>「blockquote」</code>、<code>「body」</code>、<code>「div」</code>、<code>「footer」</code>、<code>「h1…h6」</code>、<code>「header」</code>、<code>「main」</code>、<code>「nav」</code>、<code>「p」</code>、<code>「section」</code>、<code>「span」</code>，其他元素，如 <code>&lt;img&gt;</code>，不能容纳 Shadow tree。mode 选项可以设定封装层级，必须是以下两个值之一：</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>open</td><td>Shadow root 可以通过 <code>elem.shadowRoot</code> 访问，任何代码都可以访问 Element 的 Shadow tree</td></tr><tr><td>closed</td><td><code>elem.shadowRoot</code> 永远是 null，只能通过 <code>attachShadow</code> 返回的指针来访问 Shadow DOM（并且可能隐藏在一个 class 中）</td></tr></tbody></table><ul><li>浏览器原生的 Shadow tree，比如 <code>&lt;input type=&quot;range&quot;&gt;</code> 是封闭的，没有任何方法可以访问它们。</li><li>Shadow DOM 元素对于 Light DOM 中的 <code>querySelector</code> 不可见。Shadow DOM 中的元素可能与 Light DOM 中某些元素的 id 冲突，这些元素必须在 Shadow tree 中独一无二，Shadow DOM 有自己的样式，外部样式规则在 Shadow DOM 中不产生作用。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token comment">/* 文档样式对 #elem 内的 shadow tree 无作用 */</span>
  <span class="token selector">p</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elem<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  elem<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// shadow tree 有自己的样式</span>
  elem<span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;style&gt; p { font-weight: bold } &lt;/style&gt;
    &lt;p&gt;Hello, John!&lt;/p&gt;
  </span><span class="token template-punctuation string">\`</span></span>

  <span class="token comment">// &lt;p&gt; 只对 shadow tree 里面的查询可见</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// 0</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// 1</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>内建的 <code>&lt;template&gt;</code> 元素用来存储 HTML 模板，浏览器将忽略它的内容，仅检查语法的有效性，但可以在 JS 中访问和使用它来创建其他元素。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">&quot;tmpl&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span> p <span class="token punctuation">{</span> font<span class="token operator">-</span>weight<span class="token operator">:</span> bold <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">&quot;message&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;elem&quot;</span><span class="token operator">&gt;</span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  elem<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    elem<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    elem<span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    elem<span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;Hello from the shadows!&quot;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&lt;template&gt;</code> 的内容可以是任何语法正确的 HTML，<code>&lt;template&gt;</code> 内容被视为超出文档范围，因此它不会产生任何影响。可以在 JS 中访问 <code>template.content</code>，将其克隆以在新组件中重复使用。</li><li>通常，如果一个元素含有 Shadow DOM，那么其 Light DOM 就不会被展示出来，插槽允许在 Shadow DOM 中显示 Light DOM 子元素。Shadow DOM 支持 <code>&lt;slot&gt;</code> 元素，由 Light DOM 中的内容自动填充。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;user-card&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> HTMLElement <span class="token punctuation">{</span>
  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;div&gt;Name:
        &lt;slot name=&quot;username&quot;&gt;&lt;/slot&gt;
      &lt;/div&gt;
      &lt;div&gt;Birthday:
        &lt;slot name=&quot;birthday&quot;&gt;&lt;/slot&gt;
      &lt;/div&gt;
    </span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-card</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>John Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>birthday<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>01.01.2001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-card</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&lt;slot name=&quot;X&quot;&gt;</code> 定义了一个插入点，一个带有 <code>slot=&quot;X&quot;</code> 的元素被渲染的地方。属性仅仅对 Shadow host 的直接子代有效，对于嵌套元素它将被忽略。</li><li>如果在 Light DOM 里有多个相同插槽名的元素，那么它们会被一个接一个地添加到插槽中。</li><li>如果在一个 <code>&lt;slot&gt;</code> 内部放点什么，它将成为后备内容，如果 Light DOM 中没有相应填充物的话浏览器就展示它。</li><li>Shadow DOM 中第一个没有名字的 <code>&lt;slot&gt;</code> 是一个默认插槽，它从 Light DOM 中获取没有放置在其他位置的所有节点。</li><li>如果添加/删除了插槽元素，浏览器将监视插槽并更新渲染。如果组件想知道插槽的更改，那么可以用 slotchange 事件。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-menu</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>menu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Candy menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-menu</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;custom-menu&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> HTMLElement <span class="token punctuation">{</span>
  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;menu&quot;&gt;
      &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;
      &lt;ul&gt;&lt;slot name=&quot;item&quot;&gt;&lt;/slot&gt;&lt;/ul&gt;
    &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;slotchange&#39;</span><span class="token punctuation">,</span>
      <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;slotchange: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  menu<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&#39;beforeEnd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;li slot=&quot;item&quot;&gt;Lollipop&lt;/li&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  menu<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;[slot=&quot;title&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;New menu&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>node.assignedSlot</code> 返回 node 分配给的 <code>&lt;slot&gt;</code> 元素。</li><li><code>slot.assignedNodes({flatten: true/false})</code> 分配给插槽的 DOM 节点。默认情况下，flatten 选项为 false，如果显式地设置为 true，则它将更深入地查看扁平化 DOM ，如果嵌套了组件，则返回嵌套的插槽，如果未分配节点，则返回备用内容。</li><li><code>slot.assignedElements({flatten: true/false})</code> 分配给插槽的 DOM 元素，与上面相同，但仅元素节点。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-menu</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>menu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Candy menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lollipop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Fruit Toast<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-menu</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;custom-menu&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> HTMLElement <span class="token punctuation">{</span>
  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;menu&quot;&gt;
      &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;
      &lt;ul&gt;&lt;slot name=&quot;item&quot;&gt;&lt;/slot&gt;&lt;/ul&gt;
    &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>

    <span class="token comment">// 插槽能被添加/删除/代替</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;slotchange&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> slot <span class="token operator">=</span> e<span class="token punctuation">.</span>target
      <span class="token keyword">if</span> <span class="token punctuation">(</span>slot<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&#39;item&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> slot<span class="token punctuation">.</span><span class="token function">assignedElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">elem</span> <span class="token operator">=&gt;</span> elem<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Items: &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// items 在 1 秒后更新</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  menu<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&#39;beforeEnd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;li slot=&quot;item&quot;&gt;Cup Cake&lt;/li&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Shadow DOM 可以包含 <code>&lt;style&gt;</code> 和 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;…&quot;&gt;</code> 标签，在后一种情况下，样式表是 HTTP 缓存的，因此不会为使用同一模板的多个组件重新下载样式表。</p></li><li><p><code>:host</code> 选择器允许选择 Shadow 宿主（包含 Shadow 树的元素）</p></li><li><p>Shadow 宿主（ <code>&lt;custom-dialog&gt;</code> 本身）驻留在 Light DOM 中，因此它受到文档 CSS 规则的影响。如果在局部的 <code>:host</code> 和文档中都给一个属性设置样式，那么文档样式优先。唯一的例外是当局部属性被标记 <code>!important</code> 时，对于这样的属性，局部样式优先。</p></li><li><p><code>:host(selector)</code> 与 <code>:host</code> 相同，但仅在 Shadow 宿主与 selector 匹配时才应用样式。</p></li><li><p><code>:host-context(selector)</code> 与 <code>:host</code> 相同，但仅当外部文档中的 Shadow 宿主或它的任何祖先节点与 selector 匹配时才应用样式。</p></li><li><p>占槽元素来自 Light DOM，所以它们使用文档样式，局部样式不会影响占槽内容。如果想要在组件中设置占槽元素的样式，有两种选择：首先可以对 <code>&lt;slot&gt;</code> 本身进行样式化，并借助 CSS 继承；另一个选项是使用 <code>::slotted(selector)</code> 伪类，它根据两个条件来匹配元素，这是一个占槽元素，来自于 Light DOM，插槽名并不重要，任何占槽元素都可以，但只能是元素本身，而不是它的子元素 ，该元素与 selector 匹配，<code>::slotted</code> 选择器不能用于任何插槽中更深层的内容，<code>::sloated</code> 只能在 CSS 中使用，不能在 <code>querySelector</code> 中使用。</p></li><li><p>自定义 CSS 属性存在于所有层次，包括 Light DOM 和 Shadow DOM</p></li><li><p>Shadow tree 背后的思想是封装组件的内部实现细节：</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-card</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-card</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;user-card&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> HTMLElement <span class="token punctuation">{</span>
    <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;p&gt;
        &lt;button&gt;Click me&lt;/button&gt;
      &lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span>
        <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Inner target: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Outer target: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当事件在组件外部捕获时，Shadow DOM 中发生的事件将会以 <code>host</code> 元素作为目标。事件重定向是一件很棒的事情，因为外部文档并不需要知道组件的内部情况，从它的角度来看，事件是发生在 <code>&lt;user-card&gt;</code></li><li>如果事件发生在 <code>slotted</code> 元素上，实际存在于 Light DOM 上，则不会发生重定向。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-card</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userCard<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>John Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-card</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;user-card&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> HTMLElement <span class="token punctuation">{</span>
  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
      &lt;b&gt;Name:&lt;/b&gt; &lt;slot name=&quot;username&quot;&gt;&lt;/slot&gt;
    &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span>
      <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Inner target: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

userCard<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Outer target: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果单击事件发生在 John Smith 上，则对于内部和外部处理程序来说，其目标是 <code>&lt;span slot=&quot;username&quot;&gt;</code>，这是 Light DOM 中的元素，所以没有重定向。另一方面，如果单击事件发生在源自 Shadow DOM 的元素上，例如，在 Name 上，然后当它冒泡出 Shadow DOM 后，其 <code>event.target</code> 将重置为 <code>&lt;user-card&gt;</code></li><li>出于事件冒泡的目的，使用扁平 DOM。如果有一个 <code>slot</code> 元素，并且事件发生在它的内部某个地方，那么它就会冒泡到 <code>&lt;slot&gt;</code> 并继续向上，使用 <code>event.composedPath()</code> 获得原始事件目标的完整路径以及所有 Shadow 元素。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-card</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userCard<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  #shadow-root
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>John Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-card</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于 <code>&lt;span slot=&quot;username&quot;&gt;</code> 上的点击事件，会调用 <code>event.composedPath()</code> 并返回一个数组 <code>[span, slot, div, shadow-root, user-card, body, html, document, window]</code>，在组合之后，这正是扁平 DOM 中目标元素的父链。</li><li>Shadow 树详细信息仅提供给 <code>{mode:&#39;open&#39;}</code> 树，如果 Shadow 树是用 <code>{mode: &#39;closed&#39;}</code> 创建的，那么组合路径就从 <code>host</code> 开始<code>user-card</code> 及其更上层。</li><li>大多数事件能成功冒泡到 Shadow DOM 边界，很少有事件不能冒泡到 Shadow DOM 边界。这由 <code>composed</code> 事件对象属性控制，如果 <code>composed</code> 是 true，那么事件就能穿过边界，否则它仅能在 Shadow DOM 内部捕获。内建事件大部分都是 <code>composed: true</code> 的。</li><li>当发送自定义事件，需要设置 <code>bubbles</code> 和 <code>composed</code> 属性都为 true 以使其冒泡并从组件中冒泡出来。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
outer<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> inner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
outer<span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>inner<span class="token punctuation">)</span>

<span class="token comment">/*
div(id=outer)
  #shadow-dom
    div(id=inner)
*/</span>

document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">)</span>

inner<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">bubbles</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">composed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token string">&quot;composed&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

inner<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">bubbles</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">composed</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token string">&quot;not composed&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-正则表达式" tabindex="-1"><a class="header-anchor" href="#三-正则表达式" aria-hidden="true">#</a> （三）正则表达式</h2><ul><li>正则表达式是搜索和替换字符串的一种强大方式，通过内建的 RegExp(regular expression) 类的对象来实现并与字符串集成。正则表达式包含模式和可选的修饰符。</li><li>创建一个正则表达式对象，一种方式是 <code>regexp = new RegExp(&quot;pattern&quot;, &quot;flags&quot;)</code>，另一种方式是 <code>regexp = /pattern/gmi</code></li><li><code>.match()</code> 方法检索返回一个字符串匹配正则表达式的结果。</li><li><code>.test()</code> 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。</li></ul><p><strong>修饰符</strong></p><ul><li>正则表达式的修饰符会影响搜索结果，有 6 个修饰符：</li></ul><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>/i</td><td>搜索时不区分大小写</td></tr><tr><td>/g</td><td>搜索时会查找所有的匹配项</td></tr><tr><td>/m</td><td>启用多行模式</td></tr><tr><td>/s</td><td>启用 dotall 模式，允许点 <code>.</code> 匹配换行符 <code>\\n</code></td></tr><tr><td>/u</td><td>启用完整的 unicode 支持</td></tr><tr><td>/y</td><td>启用粘滞模式</td></tr></tbody></table><p><strong>字符类</strong></p><ul><li>字符类是一个特殊的符号，匹配特定的任何符号：</li></ul><table><thead><tr><th>种类</th><th>描述</th></tr></thead><tbody><tr><td><strong>字符类</strong></td><td></td></tr><tr><td>\\d</td><td>数字，包括 0 到 9 的字符</td></tr><tr><td>\\s</td><td>空格，包括空格、制表符 \\t、换行符 \\n、其他少数稀有字符，例如 \\v \\f \\r</td></tr><tr><td>\\w</td><td>单字字符，包括拉丁字母、数字、下划线 _</td></tr><tr><td><strong>反向字符类</strong></td><td></td></tr><tr><td>\\D</td><td>非数字，除 \\d 以外的任何字符</td></tr><tr><td>\\S</td><td>非空格，除 \\s 以外的任何字符</td></tr><tr><td>\\W</td><td>非单字字符，除 \\w 以外的任何字符</td></tr><tr><td><strong>特殊字符类</strong></td><td></td></tr><tr><td>.</td><td>与除换行符之外的任何字符匹配，表示任何字符，而不是缺少字符，必须有一个与之匹配的字符</td></tr><tr><td><strong>其他</strong></td><td></td></tr><tr><td>\\s\\S</td><td>空格或非空格，即任何东西</td></tr><tr><td>\\d\\D</td><td>数字或非数字，即任何东西</td></tr></tbody></table><ul><li>带有 <code>/s</code> 标志时点字符类严格匹配任何字符。</li><li>空格是一个字符，与其他字符同等重要。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;I love HTML5!&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s\\w\\w\\w\\w\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// HTML5</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;A\\nB&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">A[\\s\\S]B</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// A（换行）B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Unicode</strong></p><ul><li>JS 使用 Unicode 编码对字符串进行编码。大多数字符使用 2 个字节编码，但这种方式只能编码最多 65536 个字符， 4 个字节对一些罕见的字符进行编码，例如：😀</li><li>默认情况下，正则表达式同样把一个 4 个字节的长字符当成一对 2 个字节长的字符。<code>/u</code> 当一个正则表达式使用这个修饰符后，4 个字节长的字符将被正确地处理。</li><li>查找具有某种属性的字符，写作 <code>\\p{…}</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x\\p{Hex_Digit}\\p{Hex_Digit}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;number: xAF&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// xAF</span>

<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{sc=Han}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello Привет 你好 123_456</span><span class="token template-punctuation string">\`</span></span>
<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 你,好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>锚点</strong></p><ul><li>锚点：插入符号 <code>^</code> 匹配文本开头，美元符号 <code>$</code>  则匹配文本末尾。锚点属于测试，它们的宽度为零。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Mary had a little lamb&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^Mary</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>

<span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&quot;it&#39;s fleece was white as snow&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">snow$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>两个锚点 <code>^...$</code> 放在一起被用于测试一个字符串是否完全匹配一个模式，比如，测试用户的输入是否符合正确的格式。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> goodInput <span class="token operator">=</span> <span class="token string">&quot;12:34&quot;</span>
<span class="token keyword">let</span> badInput <span class="token operator">=</span> <span class="token string">&quot;12:345&quot;</span>

<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d\\d:\\d\\d$</span><span class="token regex-delimiter">/</span></span>
<span class="token function">alert</span><span class="token punctuation">(</span>regexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>goodInput<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span>regexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>badInput<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 <code>/m</code> 可以开启多行模式，这仅仅会影响 <code>^</code> 和 <code>$</code> 锚符的行为。在多行模式下，它们不仅仅匹配文本的开始与结束，还匹配每一行的开始与结束。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /^\\d+/gm 将匹配每一行的开头数字</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">1st place: Winnie
2nd place: Piglet
33rd place: Eeyore</span><span class="token template-punctuation string">\`</span></span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1, 2, 33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认情况下，锚符 <code>^</code> 仅匹配文本的开头，在多行模式下，它匹配行的开头。</li><li>要寻找新的一行的话，不仅可以使用锚符 <code>^</code> 和 <code>$</code>，也可以使用换行符 <code>\\n</code>。它和锚符的第一个不同点是它不像锚符那样，它会消耗掉 <code>\\n</code> 并且将其加入到匹配结果中，还有一个不同点，换行符 <code>\\n</code> 不会匹配字符串结尾。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">1st place: Winnie
2nd place: Piglet
33rd place: Eeyore</span><span class="token template-punctuation string">\`</span></span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gim</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment">// Winnie\\n,Piglet\\n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>边界词</strong></p><ul><li>词边界 <code>\\b</code> 是一种检查，就像锚点一样，当正则表达式引擎遇到 <code>\\b</code> 时，它会检查字符串中的位置是否是词边界。</li><li>有三种不同的位置可作为词边界：第一种是在字符串开头，如果第一个字符是单词字符 <code>\\w</code>。第二种是在字符串中的两个字符之间，其中一个是单词字符 <code>\\w</code>，另一个不是。第三种是在字符串末尾，如果最后一个字符是单词字符 <code>\\w</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Java!&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\bJava\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Java</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, JavaScript!&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\bJava\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>\\b</code> 既可以用于单词，也可以用于数字，例如，模式 <code>\\b\\d\\d\\b</code> 查找独立的两位数。</li><li>词边界 <code>\\b</code> 不适用于非拉丁字母。</li></ul><p><strong>转义</strong></p><ul><li>如果要把特殊字符作为常规字符来使用，只需要在它前面加个反斜杠，这种方式也被叫做转义一个字符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Chapter 5.1&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d\\.\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 5.1</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;function g()&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">g\\(\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// g()</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;1\\\\2&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\\\</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// \\</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// /</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// /</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>斜杠符号 <code>/</code> 并不是一个特殊符号，但是它被用于在 JS 中开启和关闭正则匹配 <code>/...pattern.../</code>，所以也应该转义它。</li><li>调用 <code>new RegExp()</code> 会获得一个没有反斜杠的字符串，要修复这个问题，需要双斜杠，因为引用会把 <code>\\\\</code> 变为 <code>\\</code></li><li>一个反斜杠 <code>\\</code>  是用来表示匹配字符类的，所以它是一个特殊字符。</li></ul><p><strong>集合与范围</strong></p><ul><li>在方括号 <code>[…]</code> 中的几个字符或字符类意味着搜索给定的字符中的任意一个这被叫做一个集合。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 查找 [t 或 m]，然后再匹配 op</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Mop top&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[tm]op</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Mop, top</span>

<span class="token comment">// 查找 V，然后匹配 [o 或 i]，之后再匹配 la</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Voila&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">V[oi]la</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>尽管在集合中有多个字符，但它们在匹配中只会对应其中的一个。</li><li>方括号也可以包含字符范围，比如说 <code>[a-z]</code> 会匹配从 a 到 z 范围内的字母，<code>[0-5]</code> 表示从 0 到 5 的数字。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Exception 0xAF&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x[0-9A-F][0-9A-F]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// xAF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>[0-9A-F]</code> 表示两个范围：搜索一个字符，满足数字 0 到 9 或字母 A 到 F</li><li>可以在 <code>[…]</code> 里面使用字符类，<code>\\d</code> 和 <code>[0-9]</code> 相同，<code>\\w</code> 和 <code>[a-zA-Z0-9_]</code> 相同，<code>\\s</code> 和 <code>[\\t\\n\\v\\f\\r]</code> 外加少量罕见的 unicode 空格字符相同。</li><li>更通用的模式，该模式可以查找任何语言中的文字字符使用 Unicode 属性：<code>[\\p{Alpha}\\p{M}\\p{Nd}\\p{Pc}\\p{Join_C}]</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\p{Alpha}\\p{M}\\p{Nd}\\p{Pc}\\p{Join_C}]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi 你好 12</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment">// H,i,你,好,1,2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类似 <code>[^…]</code>的排除范围匹配，通过在匹配查询的开头添加插入符号 <code>^</code> 来表示，它会匹配所有除了给定的字符之外的任意字符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;alice15 @gmail.com&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\d\\sA-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// @ .</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在方括号表示中，绝大多数特殊字符可以在不转义的情况下使用。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-().^+]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;1 + 2 - 3&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// + -</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果集合中有代理对，则需要标志 <code>/u</code> 以使其正常工作。</li><li>没有标志 <code>/u</code> 的代理对被视为两个字符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;𝒳&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[𝒳𝒴]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 𝒳</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>量词</strong></p><ul><li>用来形容所需要的数量的词被称为量词，最明显的量词便是一对引号间的数字 <code>{n}</code>。在一个字符后跟着一个量词，用来指出具体需要的数量，<code>\\d{5}</code> 表示 5 位的数字，如同 <code>\\d\\d\\d\\d\\d</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m 12345 years old&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{5}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 12345</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>某个范围的位数 <code>{3,5}</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m not 12, but 1234 years old&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{3,5}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1234</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可以省略上限，那么正则表达式 <code>\\d{3,}</code> 就会查找位数大于或等于 3 的数字。大多数常用的量词都可以有缩写，如下。</li><li><code>?</code> 代表零个或一个，相当于 <code>{0,1}</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Should I write color or colour?&quot;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">colou?r</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// color, colour</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>*</code>代表着零个或多个，相当于 <code>{0,}</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;100 10 1&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d0*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 100, 10, 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>+</code> 代表一个或多个，相当于 <code>{1,}</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;+7(903)-123-45-67&quot;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 7,903,123,45,67</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>贪婪量词与惰性量词</strong></p><ul><li>贪婪搜索：为了查找到一个匹配项，正则表达式引擎采用了以下算法，对于字符串中的每一个字符用这个模式来匹配此字符若无匹配，移至下一个字符。在贪婪模式下（默认），量词都会尽可能地重复多次。</li><li>懒惰模式：懒惰模式中的量词与贪婪模式中的是相反的，它想要重复最少次数。能够通过在量词之后添加一个问号 <code>?</code> 来启用它。通常，一个问号 <code>?</code> 就是一个它本身的量词（0 或 1），但如果添加另一个量词（甚至可以是它自己），就会有不同的意思，它将匹配的模式从贪婪转为懒惰。懒惰模式只能够通过带 <code>?</code> 的量词启用，其它的量词依旧保持贪婪模式。</li></ul><p><strong>捕获组</strong></p><ul><li>模式的一部分可以用括号括起来 <code>(...)</code>，这称为捕获组，将允许匹配的一部分作为结果数组中的单独项，如果将量词放在括号后，则它将括号视为一个整体。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Gogogo now!&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(go)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment">// Gogogo</span>

<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+\\.)+\\w+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;site.com my.site.com&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment">// site.com,my.site.com</span>

<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-.\\w]+@([\\w-]+\\.)+[\\w-]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;my@mail.com @ his@site.com.uk&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// my@mail.com, his@site.com.uk</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>括号从左到右编号，正则引擎会记住它们各自匹配的内容，并允许在结果中获得它。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;Hello, world!&lt;/h1&gt;&#39;</span>

<span class="token keyword">let</span> tag <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(.*?)&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>tag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &lt;h1&gt;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>tag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// h1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>括号可以嵌套，在这种情况下，编号也从左到右。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;span class=&quot;my&quot;&gt;&#39;</span>

<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(([a-z]+)\\s*([^&gt;]*))&gt;</span><span class="token regex-delimiter">/</span></span>

<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &lt;span class=&quot;my&quot;&gt;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// span class=&quot;my&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// span</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// class=&quot;my&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>即使组是可选的并且在匹配项中不存在（例如，具有数量词 (...)?），也存在相应的 result 数组项，并且等于 undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> match <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a(z)?(c)?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// 3</span>
<span class="token function">alert</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// a（完全匹配）</span>
<span class="token function">alert</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// undefined</span>
<span class="token function">alert</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// undefined</span>

<span class="token keyword">let</span> match <span class="token operator">=</span> <span class="token string">&#39;ac&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a(z)?(c)?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// 3</span>
<span class="token function">alert</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// ac（完全匹配）</span>
<span class="token function">alert</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// undefined，因为 (z)? 没匹配项</span>
<span class="token function">alert</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>搜索所有具有组的匹配项 <code>.matchAll()</code></li><li>当搜索所有匹配项（标志 g）时，<code>.match()</code> 方法不会返回组的内容。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt; &lt;h2&gt;&#39;</span>

<span class="token keyword">let</span> tags <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(.*?)&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span>  <span class="token comment">// &lt;h1&gt;,&lt;h2&gt;</span>
<span class="token comment">// 结果是一个匹配数组，但没有每个匹配项的详细信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>由 <code>.matchAll()</code> 所返回的每个匹配，其格式与不带标志 <code>/g</code> 的 <code>.match()</code> 所返回的格式相同，它是一个具有额外的 index（字符串中的匹配索引）属性和 input（源字符串）的数组。</li><li>调用 <code>.matchAll()</code> 不会执行搜索，相反它返回一个可迭代的对象，最初没有结果。每当对它进行迭代时才会执行搜索，例如在循环中。因此这将根据需要找到尽可能多的结果，而不是全部。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt; &lt;h2&gt;&#39;</span><span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(.*?)&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>  <span class="token comment">// [object RegExp String Iterator]</span>

<span class="token function">alert</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// undefined (*)</span>

results <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>  <span class="token comment">// let&#39;s turn it into array</span>

<span class="token function">alert</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &lt;h1&gt;,h1 (1st tag)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &lt;h2&gt;,h2 (2nd tag)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计算括号很不方便，但有一个更好的选择，即给括号起个名字，是通过在开始括号之后立即放置 <code>?&lt;name&gt;</code> 来完成的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> dateRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;[0-9]{4})-(?&lt;month&gt;[0-9]{2})-(?&lt;day&gt;[0-9]{2})</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;2019-04-30&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> groups <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>dateRegexp<span class="token punctuation">)</span><span class="token punctuation">.</span>groups

<span class="token function">alert</span><span class="token punctuation">(</span>groups<span class="token punctuation">.</span>year<span class="token punctuation">)</span>  <span class="token comment">// 2019</span>
<span class="token function">alert</span><span class="token punctuation">(</span>groups<span class="token punctuation">.</span>month<span class="token punctuation">)</span>  <span class="token comment">// 04</span>
<span class="token function">alert</span><span class="token punctuation">(</span>groups<span class="token punctuation">.</span>day<span class="token punctuation">)</span>  <span class="token comment">// 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> dateRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;[0-9]{4})-(?&lt;month&gt;[0-9]{2})-(?&lt;day&gt;[0-9]{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;2019-10-30 2020-01_01&quot;</span>

<span class="token keyword">let</span> results <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>dateRegexp<span class="token punctuation">)</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> result <span class="token keyword">of</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">}</span> <span class="token operator">=</span> result<span class="token punctuation">.</span>groups

  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 第一个 alert：30.10.2019</span>
  <span class="token comment">// 第二个 01.01.2020</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法 <code>str.replace(regexp, replacement)</code> 用 replacement 替换 str 中匹配 regexp 的所有捕获组。这使用 <code>$n</code> 来完成，其中 n 是组号，代表第 n 个捕获组。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;John Bull&quot;</span>
<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+) (\\w+)</span><span class="token regex-delimiter">/</span></span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexp<span class="token punctuation">,</span> <span class="token string">&#39;$2, $1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Bull, John</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于命名括号，引用为 <code>$&lt;name&gt;</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;[0-9]{4})-(?&lt;month&gt;[0-9]{2})-(?&lt;day&gt;[0-9]{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;2019-10-30, 2020-01_01&quot;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexp<span class="token punctuation">,</span> <span class="token string">&#39;$&lt;day&gt;.$&lt;month&gt;.$&lt;year&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 30.10.2019, 01.01.2020</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>非捕获组 <code>?:</code> 有时需要括号才能正确应用量词，但不希望它们的内容出现在结果中，可以通过在开头添加 <code>?:</code> 来排除组。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Gogogo John!&quot;</span>

<span class="token comment">// ?: 从捕获组中排除 &#39;go&#39;</span>
<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:go)+ (\\w+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// Gogogo John（完全匹配）</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// John</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>反向引用</strong></p><ul><li>按编号反向引用 <code>\\N</code>，可以使用 <code>\\N</code> 在模式中引用一个组，其中 N 是组号。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">He said: &quot;She&#39;s the one!&quot;.</span><span class="token template-punctuation string">\`</span></span>

<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([&#39;&quot;])(.*?)\\1</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// &quot;She&#39;s the one!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在模式中用 <code>\\1</code>，在替换项中用 <code>$1</code></li><li>按命名反向引用 <code>\\k&lt;name&gt;</code>，要引用命名组，可以使用 <code>\\k&lt;name&gt;</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">He said: &quot;She&#39;s the one!&quot;.</span><span class="token template-punctuation string">\`</span></span>

<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;quote&gt;[&#39;&quot;])(.*?)\\k&lt;quote&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// &quot;She&#39;s the one!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>选择 OR</strong></p><ul><li>选择是正则表达式中的一个术语，实际上是一个简单的或。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">html|php|css|java(script)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;First HTML appeared, then CSS, then JavaScript&quot;</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// HTML,CSS,JavaScript</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>选择符号并非在字符级别生效，而是在表达式级别。正则表达式 <code>A|B|C</code> 意思是命中 A、B 或 C 其一均可。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([01]\\d|2[0-3]):[0-5]\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;00:00 10:10 23:59 25:99 1:2&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 00:00,10:10,23:59</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>断言</strong></p><ul><li>前瞻断言 <code>x(?=y)</code>，它表示仅在后面是 y 的情况匹配 x</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;1 turkey costs 30€&quot;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+(?=€)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 30（正确地跳过了单个的数字 1）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>前瞻否定断言 <code>x(?!y)</code>，意思是查找 x, 但是仅在不被 y 跟随的情况下匹配成功。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;2 turkeys cost 60€&quot;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+(?!€)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 2（正确地跳过了价格）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>后瞻断言也是类似的，只不过它是在相反的方向上进行条件判断。它只允许匹配前面有特定字符串的模式。</li><li>后瞻肯定断言 <code>(?&lt;=y)x</code>, 匹配 x 仅在前面是 y 的情况。</li><li>后瞻否定断言 <code>(?&lt;!y)x</code>, 匹配 x, 仅在前面不是 y 的情况。</li><li>如果想要捕捉整个环视表达式或其中的一部分，那也是有可能的，只需要将其包裹在另加的括号中。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;1 turkey costs 30€&quot;</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+(?=(€|kr))</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">// €|kr 两边有额外的括号</span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 30, €</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>回溯</strong></p><ul><li>灾难性回溯，又译作回溯陷阱，有 2 种处理它的思路：一是，重写正则表达式，尽可能减少其中排列组合的数量；二是，使用前瞻断言来防止回溯。</li></ul><p><strong>粘性修饰符</strong></p><ul><li><code>/y</code> 标志允许在源字符串中的指定位置执行搜索。</li><li><code>regexp.exec()</code> 是 <code>str.matchAll()</code> 方法的替代方法，与其他方法不同可以设置自己的 lastIndex，从给定位置开始搜索。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;let varName = &quot;value&quot;&#39;</span>
<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>  <span class="token comment">// 如果没有标志 g，属性 lastIndex 会被忽略</span>
regexp<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">let</span> word <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>  <span class="token comment">// varName</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>标记 <code>/y</code> 使 <code>regexp.exec()</code> 正好在 lastIndex 位置，而不是在它之前，也不是在它之后。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;let varName = &quot;value&quot;&#39;</span>
<span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span>

regexp<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">3</span>
<span class="token function">alert</span><span class="token punctuation">(</span>regexp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// null（位置 3 有一个空格，不是单词）</span>

regexp<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">4</span>
<span class="token function">alert</span><span class="token punctuation">(</span>regexp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// varName（在位置 4 的单词）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正则与字符串的方法</strong></p><ul><li><code>str.match(regexp)</code> 方法在字符串 str 中找到匹配 regexp 的字符。它有 3 种模式： <br>（1）如果 regexp 不带有 g 标记，则它以数组的形式返回第一个匹配项，其中包含分组和属性 index（匹配项的位置）、input（输入字符串，等于 str）； <br>（2）如果 regexp 带有 g 标记，则它将所有匹配项的数组作为字符串返回，而不包含分组和其他详细信息； <br>（3）如果没有匹配项，则无论是否带有标记 g，都将返回 null</li><li><code>str.matchAll(regexp)</code> 是 <code>str.match()</code> 变体，主要用来搜索所有组的所有匹配项。与 match 相比有 3 个区别： <br>（1）它返回包含匹配项的可迭代对象，而不是数组，可以用 <code>Array.from</code> 从中得到一个常规数组； <br>（2）每个匹配项均以包含分组的数组形式返回（返回格式与不带 g 标记的 <code>str.match</code> 相同）； <br>（3）如果没有结果，则返回的不是 <code>null</code>，而是一个空的可迭代对象。</li><li><code>str.split(regexp|substr, limit)</code>，使用正则表达式（或子字符串）作为分隔符来分割字符串。</li><li><code>str.search(regexp)</code>，返回第一个匹配项的位置，如果未找到，则返回 -1、重要限制 <code>search()</code> 仅查找第一个匹配项。</li><li><code>str.replace(str|regexp, str|func)</code>，这是用于搜索和替换的通用方法，是最有用的方法之一。当 <code>replace()</code> 的第一个参数是字符串时，它仅替换第一个匹配项，应使用带 g 标记的正则表达式 。第二个参数是一个替代字符串，对于需要智能替换的场景，第二个参数可以是一个函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;html and css&quot;</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">html|css</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment">// HTML and CSS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>regexp.exec(str)</code> 方法返回字符串 str 中的 regexp 匹配项。与以前的方法不同，它是在正则表达式而不是字符串上调用的。如果没有 g，那么返回的第一个匹配与 <code>str.match(regexp)</code> 完全相同。如果有标记 g，那么会返回第一个匹配项，并将紧随其后的位置保存在属性 <code>regexp.lastIndex</code> 中。下一次同样的调用会从位置 <code>regexp.lastIndex</code> 开始搜索，返回下一个匹配项，并将其后的位置保存在 <code>regexp.lastIndex</code> 中，以此类推。如果没有匹配项，则返回 null，并将 <code>regexp.lastIndex</code> 重置为 0。 重复调用会挨个返回所有的匹配项，属性 <code>regexp.lastIndex</code> 用来跟踪当前的搜索位置。</li><li><code>regexp.test(str)</code> 查找匹配项，然后返回 true/false 表示是否存在。如果正则表达式带有标记 g，则从 <code>regexp.lastIndex</code> 属性中查找，并更新此属性，就像 <code>regexp.exec()</code> 一样。</li><li>如果在不同的源字符串上应用相同的全局表达式，可能会出现错误的结果，因为 <code>regexp.test()</code> 的调用会增加 <code>regexp.lastIndex</code> 属性值，因此在另一个字符串中的搜索可能是从非 0 位置开始的。</li></ul><h2 id="四-ajax" tabindex="-1"><a class="header-anchor" href="#四-ajax" aria-hidden="true">#</a> （四）Ajax</h2><blockquote><p>Ajax (Asynchronous JavaScript And XML) 称为异步的 JS 和 XML，可以在浏览器中向服务器发送异步请求，最大优势是无刷新获取数据。</p></blockquote><h3 id="_01-http-协议" tabindex="-1"><a class="header-anchor" href="#_01-http-协议" aria-hidden="true">#</a> 01 - HTTP 协议</h3><table><thead><tr><th>请求报文</th><th>内容</th></tr></thead><tbody><tr><td>请求行</td><td>请求类型、URL 请求路径、HTTP 协议版本</td></tr><tr><td>请求头</td><td>Host、Cookie、Content-type、User-Agent...</td></tr><tr><td>空行</td><td>(必选)</td></tr><tr><td>请求体</td><td>(可选) GET 请求为空、POST 请求可携带内容</td></tr></tbody></table><table><thead><tr><th>响应报文</th><th>内容</th></tr></thead><tbody><tr><td>响应行</td><td>状态码、状态字符串、HTTP 版本</td></tr><tr><td>响应头</td><td>Content-type、Content-length、Content-encoding...</td></tr><tr><td>空行</td><td>(必选)</td></tr><tr><td>响应体</td><td>响应的内容...</td></tr></tbody></table><table><thead><tr><th>状态码</th><th>内容</th></tr></thead><tbody><tr><td>成功 2**</td><td>200 OK、201 Created、202 Accepted、203 Non-Authoritative Information、204 No Content、205 Reset Content、206 Partial Content、207 Multi-Status</td></tr><tr><td>重定向 3**</td><td>300 Multiple Choices、301 Moved Permanently、302 Move Temporarily、303 See Other、304 Not Modifled、305 Use Proxy、306 Switch Proxy、307 Temporary Redirect</td></tr><tr><td>请求错误 4**</td><td>400 Bad Request、401 Unauthorized、402 Payment Required、403 Forbidden、404 Not Found、405 Method Not Allowed、406 Not Acceptable、407 Proxy Authentication Reauired、408 Request Timeout、409 Conflict、410 Gone、411 Length Required、412 Precondition Failed、413 Request-URL Too Long、415 Unsupported Media Type、416 Requested Range Not Satisfiable、417 Expectation Failed、418 I&#39;m a teapot、421 Misdirected Request、422 Unprocessable Entity、423 Locked、424 Failed Dependency、425 Too Early、426 Upgrade Required、449 Retry With、451 Unavailable For Legal Reasons</td></tr><tr><td>服务器错误 5** 6**</td><td>500 Internal Server Error、501 Not Implemented、502 Bad Gateway、503 Service Unavailable、504 Gateway Timeout、505 HTTP Version Not Supported、506 Variant Also Negotiates、507 Insufficient Storage、509 Bandwidth Limit Exceeded、510 Not Extended、600 Unparseable Response Headers</td></tr></tbody></table><h3 id="_02-服务端" tabindex="-1"><a class="header-anchor" href="#_02-服务端" aria-hidden="true">#</a> 02 - 服务端</h3><blockquote><p>以 Node 的 Express 为例</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置响应头</span>
  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 设置响应体</span>
  response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Ajax&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:8080&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_03-客户端" tabindex="-1"><a class="header-anchor" href="#_03-客户端" aria-hidden="true">#</a> 03 - 客户端</h3><h4 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> GET</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1、创建对象</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 2、初始化 设置请求方法和 URL</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:8080/server?a=10&amp;b=20&amp;c=30&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 3、发送请求</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 4、事件绑定 处理服务端返回的结果</span>
  <span class="token comment">// readyState 是 xhr 对象中的属性，表示状态：</span>
  <span class="token comment">// 0 表示未初始化、1 表示 open 方法完毕、2 表示 send 完毕、</span>
  <span class="token comment">// 3 表示服务返回部分结果、4 表示服务已经返回所有结果</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断（服务端返回了所有的结果）</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断响应状态码 200 404 403 401 500</span>
      <span class="token comment">// 2xx 代表成功</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理结果 行、头、空行、体</span>
        <span class="token comment">// 响应行</span>
        <span class="token comment">// console.log(xhr.status)  // 状态码</span>
        <span class="token comment">// console.log(xhr.statusText) // 状态字符串</span>
        <span class="token comment">// console.log(xhr.getAllResponseHeaders())  // 所有响应头</span>
        <span class="token comment">// console.log(xhr.response)  // 响应体</span>
        result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="post" tabindex="-1"><a class="header-anchor" href="#post" aria-hidden="true">#</a> POST</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">)</span>
result<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseover&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1、创建对象</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 2、初始化 设置类型与 URL</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:8080/server&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 3、发送请求 可携带内容</span>
  <span class="token comment">// xhr.send(&#39;a=90&amp;b=80&amp;c=70&#39;)</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;a:1,b:2,b:3&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 4、事件绑定</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span><span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理返回的结果</span>
        result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_04-设置请求头" tabindex="-1"><a class="header-anchor" href="#_04-设置请求头" aria-hidden="true">#</a> 04 - 设置请求头</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置请求头</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 自定义请求头 需要服务端做相应的设置</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Xiaofan&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_05-响应-json-数据" tabindex="-1"><a class="header-anchor" href="#_05-响应-json-数据" aria-hidden="true">#</a> 05 - 响应 JSON 数据</h3><h4 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/json-server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置响应头 允许跨域</span>
  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 设置响应头 接受所有的响应头</span>
  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 响应一个数据</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xiaofan&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 对象进行字符串转换</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token comment">// 设置响应体</span>
  response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">)</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 设置响应体的类型</span>
  xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>

  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:8080/json-server&#39;</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// result.innerHTML = xhr.response</span>

        <span class="token comment">// 手动对数据进行转换</span>
        <span class="token comment">// let data = JSON.parse(xhr.response)</span>
        <span class="token comment">// console.log(data)</span>

        <span class="token comment">// 自动转换 需要设置响应体的类型</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>

        <span class="token comment">// result.innerHTML = data.name</span>
        result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">.</span>name
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_06-网络超时与异常" tabindex="-1"><a class="header-anchor" href="#_06-网络超时与异常" aria-hidden="true">#</a> 06 - 网络超时与异常</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 超时设置 2s 设置</span>
  xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span>
  <span class="token comment">// 超时回调</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;网络超时，请稍后重试&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 网络异常回调</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你的网络似乎出了一些问题&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:8080/delay&#39;</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_07-取消请求" tabindex="-1"><a class="header-anchor" href="#_07-取消请求" aria-hidden="true">#</a> 07 - 取消请求</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span>
btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:8080/delay&#39;</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 取消请求</span>
btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_08-重复请求" tabindex="-1"><a class="header-anchor" href="#_08-重复请求" aria-hidden="true">#</a> 08 - 重复请求</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 是否正在发送 AJAX 请求</span>
<span class="token keyword">let</span> isSending <span class="token operator">=</span> <span class="token boolean">false</span>

btn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断标识变量</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isSending<span class="token punctuation">)</span> xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 修改标识变量的值</span>
  isSending <span class="token operator">=</span> <span class="token boolean">true</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:8080/delay&#39;</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      isSending <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_09-属性-方法-事件" tabindex="-1"><a class="header-anchor" href="#_09-属性-方法-事件" aria-hidden="true">#</a> 09 - 属性/方法/事件</h3><p><strong>属性总结</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>.readyState</td><td>返回请求状态码</td></tr><tr><td>.status</td><td>返回请求响应码</td></tr><tr><td>.statusText</td><td>返回带有文本的响应码</td></tr><tr><td>.response</td><td>返回响应体</td></tr><tr><td>.responseText</td><td>返回字符串形式的响应体</td></tr><tr><td>.responseXML</td><td>返回 XML 形式的响应体</td></tr><tr><td>.responseURL</td><td>返回序列化的响应 URL</td></tr><tr><td>.upload</td><td>返回上传进度</td></tr><tr><td>.responseType</td><td>设置响应类型</td></tr><tr><td>.timeout</td><td>设置超时时间</td></tr><tr><td>.withCredentials</td><td>设置跨域是否应携带授权信息</td></tr></tbody></table><ul><li>设置响应格式：</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>&quot;&quot;</td><td>默认响应格式为字符串</td></tr><tr><td>&quot;text&quot;</td><td>响应格式为字符串</td></tr><tr><td>&quot;arraybuffer&quot;</td><td>响应格式为 ArrayBuffer</td></tr><tr><td>&quot;blob&quot;</td><td>响应格式为 Blob</td></tr><tr><td>&quot;document&quot;</td><td>响应格式为 XML document（可以使用 XPath 和其他 XML 方法）或 HTML document（基于接收数据的 MIME 类型）</td></tr><tr><td>&quot;json&quot;</td><td>响应格式为 JSON（自动解析）</td></tr></tbody></table><p><strong>方法总结</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.open()</td><td>初始化请求</td></tr><tr><td>.send()</td><td>发送请求</td></tr><tr><td>.abort()</td><td>中止请求</td></tr><tr><td>.setRequestHeader()</td><td>设置请求头</td></tr><tr><td>.getAllResponseHeaders()</td><td>获取所有响应头</td></tr><tr><td>.overrideMimeType()</td><td>覆写服务器返回的 MIME 类型</td></tr></tbody></table><p><strong>事件总结</strong></p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>.onreadystatechange</td><td>当 readyState 属性发生变化时触发</td></tr><tr><td>.onabort</td><td>当请求被停止时触发</td></tr><tr><td>.ontimeout</td><td>当请求超时时触发</td></tr><tr><td>.onload</td><td>当请求完成（即使 HTTP 状态为 400 或 500 等）并且响应已完全下载时触发</td></tr><tr><td>.onloadend</td><td>当请求结束时触发</td></tr><tr><td>.onloadstart</td><td>当接受到响应数据时触发</td></tr><tr><td>.onerror</td><td>当无法发出请求，例如网络中断或者无效的 URL 时触发</td></tr><tr><td>.onprogress</td><td>在下载响应期间定期触发，报告已经下载了多少</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;URL&#39;</span><span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 分析响应的 HTTP 状态</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>xhr<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>xhr<span class="token punctuation">.</span>statusText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>  <span class="token comment">// 例如 404: Not Found</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done, got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>  <span class="token comment">// response 是服务器响应</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

xhr<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>loaded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>loaded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>  <span class="token comment">// 没有 Content-Length</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Request failed&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>XMLHttpRequest</code> 可以使用和 <code>fetch</code> 相同的 CORS 策略进行跨源请求。默认情况下不会将 cookie 和 HTTP 授权发送到其他域。要启用它们，可以将 <code>xhr.withCredentials</code> 设置为 true</li></ul><h3 id="_10-恢复上传" tabindex="-1"><a class="header-anchor" href="#_10-恢复上传" aria-hidden="true">#</a> 10 - 恢复上传</h3><ul><li>要恢复上传，需要确切地知道服务器接收的字节数，而且只有服务器能告诉，因此将发出一个额外的请求：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Uploader</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>file<span class="token punctuation">,</span> onProgress<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>file <span class="token operator">=</span> file
    <span class="token keyword">this</span><span class="token punctuation">.</span>onProgress <span class="token operator">=</span> onProgress

    <span class="token comment">// 创建唯一标识文件的 fileId</span>
    <span class="token comment">// 还可以添加用户会话标识符（如果有的话），以使其更具唯一性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fileId <span class="token operator">=</span> file<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>size <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>lastModified
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">getUploadedBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;X-File-Id&#39;</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileId
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t get uploaded bytes: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token operator">+</span>text
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>startByte <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUploadedBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;upload&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>

    <span class="token comment">// 发送文件 id，以便服务器知道要恢复哪个文件</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;X-File-Id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileId<span class="token punctuation">)</span>
    <span class="token comment">// 发送要从哪个字节开始恢复，因此服务器知道正在恢复</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;X-Start-Byte&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startByte<span class="token punctuation">)</span>

    xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onProgress</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startByte <span class="token operator">+</span> e<span class="token punctuation">.</span>loaded<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startByte <span class="token operator">+</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;send the file, starting from&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startByte<span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startByte<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// return</span>
    <span class="token comment">// true —— 如果上传成功，</span>
    <span class="token comment">// false —— 如果被中止</span>
    <span class="token comment">// 出现 error 时将其抛出</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;upload end status:&quot;</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status <span class="token operator">+</span> <span class="token string">&quot; text:&quot;</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Upload failed: &quot;</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// onabort 仅在 xhr.abort() 被调用时触发</span>
      xhr<span class="token punctuation">.</span><span class="token function-variable function">onabort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>xhr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五-axios" tabindex="-1"><a class="header-anchor" href="#五-axios" aria-hidden="true">#</a> （五）Axios</h2><blockquote><p>基于 promise 的网络请求库</p></blockquote><h3 id="_01-get" tabindex="-1"><a class="header-anchor" href="#_01-get" aria-hidden="true">#</a> 01 - GET</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 发起 get 请求</span>
  axios
    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:8080/axios-get&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;marry&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 处理成功的情况</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 处理错误情况</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 总会执行</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_02-post" tabindex="-1"><a class="header-anchor" href="#_02-post" aria-hidden="true">#</a> 02 - POST</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>

  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:8080/axios-post&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">&#39;marry&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_03-通用方式" tabindex="-1"><a class="header-anchor" href="#_03-通用方式" aria-hidden="true">#</a> 03 - 通用方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>

  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 请求方法，默认 get</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;http://127.0.0.1:8080&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/axios-post&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// URL参数</span>
      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">vip</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;sun&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 跨域是否需要携带凭证</span>
      <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token comment">// 超时</span>
      <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_04-响应结构" tabindex="-1"><a class="header-anchor" href="#_04-响应结构" aria-hidden="true">#</a> 04 - 响应结构</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
	data: {...},
	status: 200,
	statusText: OK,
	headers: {...},
	config: {...},
	request: {...}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_05-拦截器" tabindex="-1"><a class="header-anchor" href="#_05-拦截器" aria-hidden="true">#</a> 05 - 拦截器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// 配置全局默认值</span>
  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:8080&#39;</span>
  <span class="token comment">// 添加请求拦截器</span>
  axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;正在发送请求...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> config
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求发生了错误&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 添加响应拦截器</span>
  axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;响应成功！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;发生了一些错误，响应失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 请求方法，默认 get</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/axios-post&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// URL参数</span>
      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">vip</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;sun&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 跨域是否需要携带凭证</span>
      <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token comment">// 超时</span>
      <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_06-错误处理" tabindex="-1"><a class="header-anchor" href="#_06-错误处理" aria-hidden="true">#</a> 06 - 错误处理</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/12345&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 请求成功发出且服务器也响应了状态码，但状态代码超出了 2xx 的范围</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 请求已经成功发起，但没有收到响应</span>
      <span class="token comment">// \`error.request\` 在浏览器中是 XMLHttpRequest 的实例，</span>
      <span class="token comment">// 而在node.js中是 http.ClientRequest 的实例</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 发送请求时出了点问题</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_07-取消请求-1" tabindex="-1"><a class="header-anchor" href="#_07-取消请求-1" aria-hidden="true">#</a> 07 - 取消请求</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>

  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:8080&#39;</span>

  <span class="token comment">// 创建控制器器对象</span>
  <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  btn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">,</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/axios-all&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;sun&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  btn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取消请求</span>
    controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_08-跨域" tabindex="-1"><a class="header-anchor" href="#_08-跨域" aria-hidden="true">#</a> 08 - 跨域</h3><h4 id="_01-jsonp" tabindex="-1"><a class="header-anchor" href="#_01-jsonp" aria-hidden="true">#</a> 01 - JSONP</h4><ul><li>通过 <code>script</code> 标签本身可跨域的特性返回的结果应该是一个函数的执行，函数的参数就是服务端要给客户端的数据，函数本身的定义是在客户端中，数据和函数的调用在服务端中。仅支持 GET 请求。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 检测用户名是否存在</span>
  app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&#39;/check-username&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">exist</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;用户名已经存在&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将数据转换为字符串</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token comment">// 返回结果</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">handle(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">//-------------------------------------------------</span>

  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      input<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">&#39;1px solid red&#39;</span>
      p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>msg
    <span class="token punctuation">}</span>

    input<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取用户输入的值</span>
      <span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value
      <span class="token comment">// 向服务器发送请求</span>
      <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>
      script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:8080/check-username&#39;</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:8080/jquery-json-server?callback=?&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          名称：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;br/&gt;
          校区：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>city<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

  <span class="token comment">//---------------------------------------------------------------</span>

  app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&#39;/jquery-json-server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;城市&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;上海&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;武汉&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token keyword">let</span> cb <span class="token operator">=</span> request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback

  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cb<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_02-cors" tabindex="-1"><a class="header-anchor" href="#_02-cors" aria-hidden="true">#</a> 02 - CORS</h4>`,223),m=n("li",null,"Cross-Origin Resource Sharing 跨域资源共享，是官方的跨域解决方案。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些站点可以访问哪些资源",-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"},g=a(`<h2 id="六、fetch" tabindex="-1"><a class="header-anchor" href="#六、fetch" aria-hidden="true">#</a> 六、Fetch</h2><h3 id="_01-使用" tabindex="-1"><a class="header-anchor" href="#_01-使用" aria-hidden="true">#</a> 01 - 使用</h3><ul><li><code>fetch()</code> 方法是一种现代通用的方法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>要访问的 URL</td></tr><tr><td>options</td><td>可选参数</td></tr><tr><td>method</td><td></td></tr><tr><td>header</td><td></td></tr></tbody></table><ul><li>没有 <code>options</code>，这就是一个简单的 GET 请求，下载 url 的内容。</li></ul><p><strong>获取响应通常需要经过两个阶段：</strong></p><ul><li>第一阶段：当服务器发送了响应头（<code>response header</code>），<code>fetch</code> 返回的 <code>promise</code> 就使用内建的 <code>Response class</code> 对象来对响应头进行解析。可以在 <code>response</code> 的属性中看到 HTTP 状态：</li></ul><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>status</td><td>HTTP 状态码，例如 200：OK。布尔值，如果 HTTP 状态码为 200-299，则为 true</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 如果 HTTP 状态码为 200-299</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取 response body</span>
  <span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP-Error: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Response header</code> 位于 <code>response.headers</code> 中的一个类似于 <code>Map</code> 的 <code>header</code> 对象，它不是真正的 <code>Map</code>，但是它具有类似的方法，可以按名称（<code>name</code>）获取各个 <code>header</code>，或迭代它们。</p></blockquote><ul><li>第二阶段：为了获取 <code>response body</code>，需要使用一个其他的方法调用。<code>Response</code> 提供了多种基于 <code>promise</code> 的方法，来以不同的格式访问 <code>body</code>：（只能选择一种读取 <code>body</code> 的方法）</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>response.text()</td><td>读取 response，并以文本形式返回 response</td></tr><tr><td>response.json()</td><td>将 response 解析为 JSON 格式</td></tr><tr><td>response.formData()</td><td>以 FormData 对象的形式返回 response</td></tr><tr><td>response.blob()</td><td>以 Blob（具有类型的二进制数据）形式返回 response</td></tr><tr><td>response.arrayBuffer()</td><td>以 ArrayBuffer（低级别的二进制数据）形式返回 response</td></tr><tr><td>response.body</td><td>是 ReadableStream 对象，它允许你逐块读取 body</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.github.com/repos/javascript-tutorial/en.javascript.info/commits&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取一个 header</span>
<span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// application/json; charset=utf-8</span>

<span class="token comment">// 迭代所有 header</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>要在 <code>fetch</code> 中设置 <code>request header</code>，可以使用 <code>headers</code> 选项。它有一个带有输出 <code>heade</code>r 的对象，有些 <code>header</code> 保证了 HTTP 的正确性和安全性，所以它们仅由浏览器控制。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>protectedUrl<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Authentication</span><span class="token operator">:</span> <span class="token string">&#39;secret&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>POST 请求：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">&#39;Smith&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/article/fetch/post/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json;charset=utf-8&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果请求的 body 是字符串，则 Content-Type 会默认设置为 text/plain;charset=UTF-8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>发送图片：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">&quot;canvasElem&quot;</span> width<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> height<span class="token operator">=</span><span class="token string">&quot;80&quot;</span> style<span class="token operator">=</span><span class="token string">&quot;border:1px solid&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;Submit&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;submit()&quot;</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    canvasElem<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> ctx <span class="token operator">=</span> canvasElem<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> canvasElem<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/article/fetch/post/image&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> blob
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 服务器给出确认信息和图片大小作为响应</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_02-formdata" tabindex="-1"><a class="header-anchor" href="#_02-formdata" aria-hidden="true">#</a> 02 - FormData</h3><ul><li>关于发送 HTML 表单的：带有或不带文件，带有其他字段等，如果提供了 HTML <code>form</code> 元素，它会自动捕获 <code>form</code> 元素字段。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">[</span>form<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>FormData</code> 的特殊之处在于网络方法，例如 <code>fetch</code> 可以接受一个 <code>FormData</code> 对象作为 <code>body</code>，它会被编码并发送出去，带有 <code>Content-Type: multipart/form-data</code></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>formData.append(name, value)</td><td>添加具有给定 name 和 value 的表单字段</td></tr><tr><td>formData.append(name, blob, fileName)</td><td>添加一个字段，就像是 <code>&lt;input type=&quot;file&quot;&gt;</code></td></tr><tr><td>，第三个参数 fileName 设置文件名（而不是表单字段名），因为它是用户文件系统中文件的名称</td><td></td></tr><tr><td>formData.delete(name)</td><td>移除带有给定 name 的字段</td></tr><tr><td>formData.get(name)</td><td>获取带有给定 name 的字段值</td></tr><tr><td>formData.has(name)</td><td>如果存在带有给定 name 的字段，则返回 true，否则返回 false</td></tr><tr><td>formData.set(name, value)</td><td></td></tr><tr><td>formData.set(name, blob, fileName)</td><td></td></tr></tbody></table><ul><li>一个表单可以包含多个具有相同 <code>name</code> 的字段。<code>set</code> 方法，语法与 <code>append</code> 相同，不同之处在于 <code>.set</code> 移除所有具有给定 <code>name</code> 的字段，然后附加一个新字段。</li><li>可以使用 <code>for..of</code> 循环迭代 <code>formData</code> 字段。</li><li>表单始终以 <code>Content-Type: multipart/form-data</code> 来发送数据，这个编码允许发送文件。因此 <code>&lt;input type=&quot;file&quot;&gt;</code> 字段也能被发送，类似于普通的表单提交。</li><li>通常更方便的发送图片的方式不是单独发送，而是将其作为表单的一部分，并带有附加字段（例如 <code>name</code> 和其他 <code>metadata</code>）一起发送。</li></ul><h3 id="_03-下载进度" tabindex="-1"><a class="header-anchor" href="#_03-下载进度" aria-hidden="true">#</a> 03 - 下载进度</h3><ul><li><code>fetch</code> 方法允许去跟踪下载进度。到目前为止，<code>fetch</code> 方法无法跟踪上传进度。要跟踪下载进度，可以使用 <code>response.body</code> 属性。它是 <code>ReadableStream</code> 的一个特殊的对象，它可以逐块（chunk）提供 <code>body</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代替 response.json() 以及其他方法</span>
<span class="token keyword">const</span> reader <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在 body 下载时，一直为无限循环</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 当最后一块下载完成时，done 值为 true</span>
  <span class="token comment">// value 是块字节的 Uint8Array</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>done<span class="token punctuation">,</span> value<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>要将进度打印出来，只需要将每个接收到的片段 <code>value</code> 的长度（<code>length</code>）加到 <code>counter</code> 即可。</li><li>流读取器（<code>stream reader</code>）<code>response.body.getReader()</code></li></ul><h3 id="_04-中止" tabindex="-1"><a class="header-anchor" href="#_04-中止" aria-hidden="true">#</a> 04 - 中止</h3><ul><li><code>AbortController</code>，它不仅可以中止 <code>fetch</code>，还可以中止其他异步任务。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>具有单个方法 <code>abort()</code>，和单个属性 <code>signal</code>，可以在这个属性上设置事件监听器。</li><li>当 <code>abort()</code> 被调用时：<code>controller.signal</code> 就会触发 <code>abort</code> 事件，<code>controller.signal.aborted</code> 属性变为 <code>true</code></li><li>需要处理两部分：一部分是通过在 <code>controller.signal</code> 上添加一个监听器，来执行可取消操作；另一部分是触发取消在需要的时候调用 <code>controller.abort()</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1 秒后中止</span>
<span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/article/fetch-abort/demo/hang&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&#39;AbortError&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// handle abort()</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Aborted!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>AbortController</code> 是可伸缩的，允许一次取消多个 <code>fetch</code></li></ul><h3 id="_05-跨源请求" tabindex="-1"><a class="header-anchor" href="#_05-跨源请求" aria-hidden="true">#</a> 05 - 跨源请求</h3><ul><li>有两种类型的跨源请求：安全请求、所有其他请求。</li><li>安全的方法：<code>GET</code>，<code>POST</code> 或 <code>HEAD</code>，安全的 <code>header</code>，仅允许自定义下列 <code>header</code>：</li></ul><table><thead><tr><th>header</th><th>值</th></tr></thead><tbody><tr><td>Accept</td><td></td></tr><tr><td>Accept-Language</td><td></td></tr><tr><td>Content-Language</td><td></td></tr><tr><td>Content-Type</td><td>application/x-www-form-urlencoded，multipart/form-data 或 text/plain</td></tr></tbody></table><ul><li>与非安全请求本质区别在于，可以使用 <code>&lt;form&gt;</code> 或 <code>&lt;script&gt;</code> 进行安全请求，而无需任何其他特殊方法:</li></ul><table><thead><tr><th>非安全请求</th><th></th></tr></thead><tbody><tr><td>Step 1</td><td>预检请求（preflight request）</td></tr><tr><td>Step 2</td><td>预检响应（preflight response）</td></tr><tr><td>Step 3</td><td>实际请求（actual request）</td></tr><tr><td>Step 4</td><td>实际响应（actual response）</td></tr></tbody></table><ul><li>如果一个请求是跨源的，浏览器始终会向其添加 <code>Origin header</code>，<code>Origin</code> 包含了确切的源（<code>domain/protocol/port</code>），没有路径（path），服务器可以检查 <code>Origin</code>，如果同意接受这样的请求，就会在响应中添加一个特殊的 <code>header Access-Control-Allow-Origin</code>，该 <code>header</code> 包含了允许的源，或者一个星号 ，然后响应成功，否则报错。</li><li>对于跨源请求，默认情况下，JavaScript 只能访问“安全的” <code>response header</code>：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code></li><li>要授予 JavaScript 对任何其他 <code>response header</code> 的访问权限，服务器必须发送 <code>Access-Control-Expose-Headers header</code>。它包含一个以逗号分隔的应该被设置为可访问的非安全 <code>header</code> 名称列表。</li><li>默认情况下，由 JavaScript 代码发起的跨源请求不会带来任何凭据（<code>cookies</code> 或者 HTTP 认证（HTTP authentication））</li><li>要在 <code>fetch</code> 中发送凭据，需要添加 <code>credentials: &quot;include&quot;</code> 选项：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://another.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&quot;include&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果服务器同意接受带有凭据的请求，则除了 <code>Access-Control-Allow-Origin</code> 外，服务器还应该在响应中添加 <code>header Access-Control-Allow-Credentials: true</code></li></ul><h3 id="_06-fetch-api" tabindex="-1"><a class="header-anchor" href="#_06-fetch-api" aria-hidden="true">#</a> 06 - Fetch API</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// POST，PUT，DELETE，等。</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内容类型 header 值通常是自动设置的</span>
    <span class="token comment">// 取决于 request body</span>
    <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text/plain;charset=UTF-8&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token keyword">undefined</span>  <span class="token comment">// string，FormData，Blob，BufferSource，或 URLSearchParams</span>
  <span class="token literal-property property">referrer</span><span class="token operator">:</span> <span class="token string">&quot;about:client&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 或 &quot;&quot; 以不发送 Referer header，</span>
  <span class="token comment">// 或者是当前源的 url</span>
  <span class="token literal-property property">referrerPolicy</span><span class="token operator">:</span> <span class="token string">&quot;no-referrer-when-downgrade&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// no-referrer，origin，same-origin...</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;cors&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// same-origin，no-cors</span>
  <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&quot;same-origin&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// omit，include</span>
  <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// no-store，reload，no-cache，force-cache，或 only-if-cached</span>
  <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&quot;follow&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// manual，error</span>
  <span class="token literal-property property">integrity</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 一个 hash，像 &quot;sha256-abcdef1234567890&quot;</span>
  <span class="token literal-property property">keepalive</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// true</span>
  <span class="token literal-property property">signal</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>  <span class="token comment">// AbortController 来中止请求</span>
  <span class="token literal-property property">window</span><span class="token operator">:</span> window  <span class="token comment">// null</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_07-url对象" tabindex="-1"><a class="header-anchor" href="#_07-url对象" aria-hidden="true">#</a> 07 - URL对象</h3><ul><li>内建的 <code>URL</code> 类提供了用于创建和解析 <code>URL</code> 的便捷接口，没有任何一个网络方法一定需要使用 <code>URL</code> 对象，字符串就足够了。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>base<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>完整的 URL，或者仅路径（如果设置了 base）</td></tr><tr><td>base</td><td>可选的 base URL：如果设置了此参数，且参数 url 只有路径，则会根据这个 base 生成 URL</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> url1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;https://javascript.info/profile/admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> url2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;/profile/admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://javascript.info&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://javascript.info/profile/admin</span>
<span class="token function">alert</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://javascript.info/profile/admin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>URL</code> 对象立即允许访问其组件，因此这是一个解析 url 的好方法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;https://javascript.info/url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https:</span>
<span class="token function">alert</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// javascript.info</span>
<span class="token function">alert</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /url</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以将 <code>URL</code> 对象传递给网络（和大多数其他）方法，而不是字符串。</li><li><code>URLSearchParams</code> 类型的对象，它为搜索参数提供了简便的方法：</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>append(name, value)</td><td>按照 name 添加参数</td></tr><tr><td>delete(name)</td><td>按照 name 移除参数</td></tr><tr><td>get(name)</td><td>照 name 获取参数</td></tr><tr><td>getAll(name)</td><td>获取相同 name 的所有参数</td></tr><tr><td>has(name)</td><td>按照 name 检查参数是否存在</td></tr><tr><td>set(name, value)</td><td>set/replace 参数</td></tr><tr><td>sort()</td><td>按 name 对参数进行排序，并且它是可迭代的，类似于 Map</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;https://google.com/search&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;q&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test me!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 添加带有一个空格和一个 ! 的参数</span>

<span class="token function">alert</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// https://google.com/search?q=test+me%21</span>

url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;tbs&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;qdr:y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 添加带有一个冒号 : 的参数</span>

<span class="token comment">// 参数会被自动编码</span>
<span class="token function">alert</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// https://google.com/search?q=test+me%21&amp;tbs=qdr%3Ay</span>

<span class="token comment">// 遍历搜索参数（被解码）</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// q=test me!，然后是 tbs=qdr:y</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用于编码/解码 <code>URL</code> 的内建函数：</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>encodeURI</td><td>编码整个 URL</td></tr><tr><td>decodeURI</td><td>解码为编码前的状态</td></tr><tr><td>encodeURIComponent</td><td>编码 URL 组件，例如搜索参数，或者 hash，或者 pathname</td></tr></tbody></table><ul><li><code>encodeURI</code> 仅编码 <code>URL</code> 中完全禁止的字符。<code>encodeURIComponent</code> 也编码这类字符，此外，还编码 <code>#，$，&amp;，+，,，/，:，;，=，? 和 @</code> 字符。对于一个 <code>URL</code> 整体，可以使用 <code>encodeURI</code>。而对于 <code>URL</code> 参数，应该改用 <code>encodeURIComponent</code>。对于每个搜索参数，应该使用 <code>encodeURIComponent</code>，以将其正确地插入到 <code>URL</code> 字符串中。最安全的方式是对 <code>name</code> 和 <code>value</code> 都进行编码，除非能够绝对确保它只包含允许的字符。</li><li><code>URL</code> 和 <code>URLSearchParams</code> 基于最新的 <code>URL</code> 规范：RFC3986，而 <code>encode*</code> 函数是基于过时的 RFC2396。它们之间有一些区别，例如对 IPv6 地址的编码方式不同。</li></ul><h3 id="_08-长轮询" tabindex="-1"><a class="header-anchor" href="#_08-长轮询" aria-hidden="true">#</a> 08 - 长轮询</h3><ul><li>长轮询是与服务器保持持久连接的最简单的方式，它不使用任何特定的协议，例如 <code>WebSocket</code> 或者 <code>Server Sent Event</code></li><li>从服务器获取新信息的最简单的方式是定期轮询。</li><li>长轮询的流程： <ul><li>请求发送到服务器。</li><li>服务器在有消息之前不会关闭连接。</li><li>当消息出现时，服务器将对其请求作出响应，浏览器立即发出一个新的请求。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/subscribe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">502</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 状态 502 是连接超时错误，</span>
    <span class="token comment">// 连接挂起时间过长时可能会发生，</span>
    <span class="token comment">// 远程服务器或代理会关闭它</span>
    <span class="token comment">// 让重新连接</span>
    <span class="token keyword">await</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 一个 error —— 让显示它</span>
    <span class="token function">showMessage</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 一秒后重新连接</span>
    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取并显示消息</span>
    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">showMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 再次调用 subscribe() 以获取下一条消息</span>
    <span class="token keyword">await</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务器架构必须能够处理许多挂起的连接。</li><li>在消息很少的情况下，长轮询很有效。</li></ul><h3 id="_09-websocket" tabindex="-1"><a class="header-anchor" href="#_09-websocket" aria-hidden="true">#</a> 09 - WebSocket</h3><ul><li><code>WebSocket</code> 协议，提供了一种在浏览器和服务器之间建立持久连接来交换数据的方法。数据可以作为“数据包”在两个方向上传递，而无需中段连接也无需额外的 HTTP 请求，<code>WebSocket</code> 没有跨源限制。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://javascript.info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>同样也有一个加密的 <code>wss://</code> 协议。类似于 <code>WebSocket</code> 中的 HTTPS，<code>wss://</code> 协议不仅是被加密的，而且更可靠。因为 <code>ws://</code> 数据不是加密的，对于任何中间人来说其数据都是可见的，并且，旧的代理服务器不了解 <code>WebSocket</code>，它们可能会因为看到“奇怪的” <code>header</code> 而中止连接。另一方面，<code>wss://</code> 是基于 TLS 的 <code>WebSocket</code>，类似于 HTTPS 是基于 TLS 的 HTTP，传输安全层在发送方对数据进行了加密，在接收方进行解密。因此，数据包是通过代理加密传输的。它们看不到传输的里面的内容，且会让这些数据通过。</li><li>一旦 <code>socket</code> 被建立，就应该监听 <code>socket</code> 上的事件。一共有 4 个事件：</li></ul><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>open</td><td>连接已建立</td></tr><tr><td>message</td><td>接收到数据</td></tr><tr><td>error</td><td>WebSocket 错误</td></tr><tr><td>close</td><td>连接已关闭</td></tr></tbody></table><ul><li>发送一些东西，使用 <code>socket.send(data)</code></li><li>如果服务器同意切换为 <code>WebSocket</code> 协议，服务器应该返回响应码 101</li><li><code>WebSocket</code> 可能还有其他 <code>header</code>，它们（“The WebSocket Application Messaging Protocol”）</li></ul><table><thead><tr><th>header</th><th>描述</th></tr></thead><tbody><tr><td>Sec-WebSocket-Extensions 和 Sec-WebSocket-Protocol</td><td>描述了扩展和子协议</td></tr><tr><td>Sec-WebSocket-Extensions: deflate-frame</td><td>表示浏览器支持数据压缩</td></tr><tr><td>Sec-WebSocket-Extensions header</td><td>由浏览器自动发送，其中包含其支持的所有扩展的列表</td></tr><tr><td>Sec-WebSocket-Protocol: soap, wamp</td><td>表示不仅要传输任何数据，还要传输 SOAP 或 WAMP 协议中的数据，WebSocket 子协议已经在 IANA catalogue 中注册，因此，此 header 描述了将要使用的数据格式</td></tr></tbody></table><ul><li>扩展与传输数据有关，扩展了 <code>WebSocket</code> 协议的功能。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;wss://javascript.info/chat&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;soap&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wamp&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>WebSocket</code> 通信由 <code>frames</code>（即数据片段）组成，可以从任何一方发送。在浏览器里，仅直接使用文本或二进制 <code>frames</code>。</li></ul><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>“text frames”</td><td>包含各方发送给彼此的文本数据</td></tr><tr><td>“binary data frames”</td><td>包含各方发送给彼此的二进制数据</td></tr><tr><td>“ping/pong frames”</td><td>被用于检查从服务器发送的连接，浏览器会自动响应它们</td></tr></tbody></table><ul><li><code>WebSocket .send()</code> 方法可以发送文本或二进制数据。<code>socket.send(body)</code> 调用允许 body 是字符串或二进制格式，包括 <code>Blob</code>，<code>ArrayBuffer</code> 等。</li><li>当收到数据时，文本总是以字符串形式呈现。而对于二进制数据，可以在 <code>Blob</code> 和 <code>ArrayBuffer</code> 格式之间进行选择，它是由 <code>socket.binaryType</code> 属性设置的，默认为 &quot;<code>blob</code>&quot;，因此二进制数据通常以 <code>Blob</code> 对象呈现。</li><li><code>socket.bufferedAmount</code> 属性储存了目前已缓冲的字节数，等待通过网络发送。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 每 100ms 检查一次 socket</span>
<span class="token comment">// 仅当所有现有的数据都已被发送出去时，再发送更多数据</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>bufferedAmount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">moreData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通常，当一方想要关闭连接时（浏览器和服务器都具有相同的权限），会发送一个带有数字码（numeric code）和文本形式的原因的 “connection close frame”</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>reason<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>code</code> 是一个特殊的 <code>WebSocket</code> 关闭码（可选），<code>reason</code> 是一个描述关闭原因的字符串（可选）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 关闭方：</span>
socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&quot;Work complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 另一方</span>
socket<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">1000</span>
  event<span class="token punctuation">.</span>reason <span class="token operator">===</span> <span class="token string">&quot;Work complete&quot;</span>
  event<span class="token punctuation">.</span>wasClean <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token punctuation">(</span>clean close<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>要获取连接状态，可以通过带有值的 <code>socket.readyState</code> 属性：</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>“CONNECTING”：连接还未建立</td></tr><tr><td>1</td><td>“OPEN”：通信中</td></tr><tr><td>2</td><td>“CLOSING”：连接关闭中</td></tr><tr><td>3</td><td>“CLOSED”：连接已关闭</td></tr></tbody></table><h3 id="_10-server-sent-events" tabindex="-1"><a class="header-anchor" href="#_10-server-sent-events" aria-hidden="true">#</a> 10 - Server Sent Events</h3><ul><li><p><code>Server-Sent Events</code> 规范描述了一个内建的类 <code>EventSource</code>，它能保持与服务器的连接，并允许从中接收事件。与 <code>WebSocket</code> 类似，其连接是持久的。</p></li><li><p>要开始接收消息，只需要创建 <code>new EventSource(url)</code> 即可。浏览器将会连接到 url 并保持连接打开，等待事件。服务器响应状态码应该为 200，header 为 <code>Content-Type: text/event-stream</code>，然后保持此连接并以一种特殊的格式写入消息。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> eventSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">&quot;/events/subscribe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

eventSource<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;New message&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 对于上面的数据流将打印三次</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 或 eventSource.addEventListener(&#39;message&#39;, ...)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>EventSource</code> 支持跨源请求，就像 <code>fetch</code> 和任何其他网络方法。</li><li>如果服务器想要浏览器停止重新连接，那么它应该使用 HTTP 状态码 204 进行响应。如果浏览器想要关闭连接，则应该调用 <code>eventSource.close()</code>。当连接最终被关闭时，就无法“重新打开”它。如果想要再次连接，只需要创建一个新的 <code>EventSource</code></li><li><code>EventSource</code> 对象有 <code>readyState</code> 属性，该属性具有下列值之一： 默认情况下 <code>EventSource</code> 对象生成三个事件：<code>message</code>，收到消息，可以用 <code>event.data</code> 访问。<code>open</code>，连接已打开。<code>error</code>，无法建立连接，例如，服务器返回 HTTP 500 状态码。</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>EventSource.CONNECTING = 0</td><td>连接中或者重连中</td></tr><tr><td>EventSource.OPEN = 1</td><td>已连接</td></tr><tr><td>EventSource.CLOSED = 2</td><td>连接已关闭</td></tr></tbody></table><ul><li>要处理自定义事件，必须使用 <code>addEventListener</code> 而非 <code>onmessage</code></li></ul><h3 id="_11-cookie" tabindex="-1"><a class="header-anchor" href="#_11-cookie" aria-hidden="true">#</a> 11 - Cookie</h3><ul><li><code>Cookie</code> 是直接存储在浏览器中的一小串数据。是 HTTP 协议的一部分，<code>Cookie</code> 通常是由 Web 服务器使用响应 <code>Set-Cookie HTTP-header</code> 设置的。然后浏览器使用 <code>Cookie HTTP-header</code> 将它们自动添加到（几乎）每个对相同域的请求中。</li><li>最常见的用处之一就是身份验证：登录后，服务器在响应中使用 <code>Set-Cookie HTTP-header</code> 来设置具有唯一会话标识符（<code>session identifier</code>）的 <code>cookie</code>。下次当请求被发送到同一个域时，浏览器会使用 <code>Cookie HTTP-header</code> 通过网络发送 <code>cookie</code>。所以服务器知道是谁发起了请求。</li><li>可以使用 <code>document.cookie</code> 属性从浏览器访问 <code>cookie</code>。<code>document.cookie</code> 的值由 <code>name=value</code> 对组成，以 <code>;</code> 分隔。每一个都是独立的 <code>cookie</code>。</li><li>可以写入 <code>document.cookie</code>。但这不是一个数据属性，它是一个 访问器（<code>getter/setter</code>）。对其的赋值操作会被特殊处理，对 <code>document.cookie</code> 的写入操作只会更新其中提到的 <code>cookie</code>，而不会涉及其他 <code>cookie</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=John&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 只会更新名称为 user 的 cookie</span>
<span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 展示所有 cookie</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为了保持有效的格式，它们应该使用内建的 <code>encodeURIComponent</code> 函数对其进行转义。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 特殊字符（空格），需要编码</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&quot;John Smith&quot;</span>

<span class="token comment">// 将 cookie 编码为 my%20name=John%20Smith</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...; my%20name=John%20Smith</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>encodeURIComponent</code> 编码后的 <code>name=value</code> 对，大小不能超过 4KB。因此不能在一个 <code>cookie</code> 中保存大的东西。每个域的 <code>cookie</code> 总数不得超过 20+ 左右，具体限制取决于浏览器。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在 site.com</span>
<span class="token comment">// 使 cookie 可以被在任何子域 *.site.com 访问：</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=John; domain=site.com&quot;</span>

<span class="token comment">// 之后</span>

<span class="token comment">// 在 forum.site.com</span>
<span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有 cookie user=John</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>expires</code>，<code>max-age</code>，默认情况下，如果一个 <code>cookie</code> 没有设置这两个参数中的任何一个，那么在关闭浏览器之后，它就会消失，此类 <code>cookie</code> 被称为 &quot;<code>session cookie</code>”</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 当前时间 +1 天</span>
<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">86400e3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
date <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=John; expires=&quot;</span> <span class="token operator">+</span> date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果将 <code>expires</code> 设置为过去的时间，则 <code>cookie</code> 会被删除。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cookie 会在一小时后失效</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=John; max-age=3600&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 删除 cookie（让它立即过期）</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=John; max-age=0&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指明了 <code>cookie</code> 的过期时间距离当前时间的秒数，如果将其设置为 0 或负数，则 <code>cookie</code> 会被删除。</li><li>默认情况下，如果在 <code>http://site.com</code> 上设置了 <code>cookie</code>，那么该 <code>cookie</code> 也会出现在 <code>https://site.com</code> 上，反之亦然。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 假设现在在 HTTPS 环境下</span>
<span class="token comment">// 设置 cookie secure（只在 HTTPS 环境下可访问）</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=John; secure&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>samesite</code>，旨在防止 XSRF（跨网站请求伪造）攻击。<code>Cookie</code> 的 <code>samesite</code> 选项提供了另一种防止此类攻击的方式，（理论上）不需要要求 “XSRF 保护 token”</li><li><code>samesite=strict</code>（和没有值的 <code>samesite</code> 一样)，如果用户来自同一网站之外，那么设置了 <code>samesite=strict</code> 的 <code>cookie</code> 永远不会被发送。<code>samesite=lax</code>，宽松（lax）模式，和 <code>strict</code> 模式类似，当从外部来到网站，则禁止浏览器发送 <code>cookie</code>，但是增加了一个例外，如果以下两个条件均成立，则会发送含 <code>samesite=lax</code> 的 <code>cookie</code>，一是HTTP 方法是“安全的”（例如 GET 方法，而不是 POST），二是该操作执行顶级导航（更改浏览器地址栏中的 URL）。</li><li>Web 服务器使用 <code>Set-Cookie header</code> 来设置 <code>cookie</code>。并且，它可以设置 <code>httpOnly</code> 选项，这个选项禁止任何 JavaScript 访问 <code>cookie</code>。使用 <code>document.cookie</code> 看不到此类 <code>cookie</code>，也无法对此类 <code>cookie</code> 进行操作。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getCookie(name)</td><td>函数返回具有给定 name 的 cookie</td></tr><tr><td>setCookie(name, value, options)</td><td>将 cookie 的 name 设置为具有默认值 path=/（可以修改以添加其他默认值）和给定值 value</td></tr><tr><td>deleteCookie(name)</td><td>要删除一个 cookie，也可以给它设置一个负的过期时间来调用它</td></tr></tbody></table><h2 id="七、jquery" tabindex="-1"><a class="header-anchor" href="#七、jquery" aria-hidden="true">#</a> 七、jQuery</h2><h3 id="_01-基础语法" tabindex="-1"><a class="header-anchor" href="#_01-基础语法" aria-hidden="true">#</a> 01 - 基础语法</h3><ul><li><code>$(selector).action()</code>，美元符号($)定义 jQuery，选择符（selector）“查询”和“查找” HTML 元素，jQuery 的 <code>action()</code> 执行对元素的操作。</li></ul><h3 id="_02-选择器" tabindex="-1"><a class="header-anchor" href="#_02-选择器" aria-hidden="true">#</a> 02 - 选择器</h3><ul><li>jQuery 元素选择器和属性选择器允许通过标签名、属性名或内容对 HTML 元素进行选择，选择器允许对 HTML 元素组或单个元素进行操作，使用 CSS 选择器来选取 HTML 元素，使用 XPath 表达式来选择带有给定属性的元素：<code>$(&quot;p#demo&quot;)</code>选取所有 <code>id=&quot;demo&quot;</code> 的元素<code>$(&quot;[href$=&#39;.jpg&#39;]&quot;)</code> 选取所有 <code>href</code> 值以 &quot;.jpg&quot; 结尾的元素</li><li>jQuery CSS 选择器可用于改变 HTML 元素的 CSS 属性，<code>$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</code></li></ul><h3 id="_03-事件" tabindex="-1"><a class="header-anchor" href="#_03-事件" aria-hidden="true">#</a> 03 - 事件</h3><ul><li><code>var jq=jQuery.noConflict()</code>，使用自己的名称（比如 jq）来代替 $ 符号。</li></ul><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>$(document).ready(function)</td><td>将函数绑定到文档的就绪事件（当文档完成加载时）</td></tr><tr><td>$(selector).click(function)</td><td>触发或将函数绑定到被选元素的点击事件</td></tr><tr><td>$(selector).dblclick(function)</td><td>触发或将函数绑定到被选元素的双击事件</td></tr><tr><td>$(selector).focus(function)</td><td>触发或将函数绑定到被选元素的获得焦点事件</td></tr><tr><td>$(selector).mouseover(function)</td><td>触发或将函数绑定到被选元素的鼠标悬停事件</td></tr></tbody></table><h3 id="_04-效果" tabindex="-1"><a class="header-anchor" href="#_04-效果" aria-hidden="true">#</a> 04 - 效果</h3><table><thead><tr><th>效果</th><th>描述</th></tr></thead><tbody><tr><td>$(selector).hide(speed,callback);</td><td>隐藏元素</td></tr><tr><td>$(selector).show(speed,callback);</td><td>显示元素</td></tr><tr><td>$(selector).toggle(speed,callback);</td><td>切换 hide() 和 show() 方法</td></tr><tr><td>$(selector).fadeIn(speed,callback);</td><td>淡入元素</td></tr><tr><td>$(selector).fadeOut(speed,callback);</td><td>淡出元素</td></tr><tr><td>$(selector).fadeToggle(speed,callback);</td><td>fadeIn() 与 fadeOut() 方法之间进行切换</td></tr><tr><td>$(selector).fadeTo(speed,opacity,callback);</td><td>渐变为给定的不透明度</td></tr><tr><td>$(selector).slideDown(speed,callback);</td><td>向下滑动元素</td></tr><tr><td>$(selector).slideUp(speed,callback);</td><td>向上滑动元素</td></tr><tr><td>$(selector).slideToggle(speed,callback);</td><td>在 slideDown() 与 slideUp() 方法之间进行切换</td></tr><tr><td>$(selector).animate({params},speed,callback);</td><td></td></tr><tr><td>可选参数：<em>speed</em> 参数规定隐藏/显示的速度，可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒；<em>callback</em> 参数是隐藏或显示完成后所执行的函数名称</td><td></td></tr><tr><td>必需的 <em>params</em> 参数定义形成动画的 CSS 属性</td><td></td></tr><tr><td>$(selector).stop(stopAll,goToEnd);</td><td>停止动画或效果，在它们完成之前</td></tr><tr><td>可选参数：<em>stopAll</em> 参数规定是否应该清除动画队列，默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行；<em>goToEnd</em> 参数规定是否立即完成当前动画，默认是 false</td><td></td></tr></tbody></table><ul><li>方法可以进行链接：<code>$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000);</code></li></ul><h3 id="_05-dom" tabindex="-1"><a class="header-anchor" href="#_05-dom" aria-hidden="true">#</a> 05 - DOM</h3><ul><li>获取与设置</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.text()</td><td>设置或返回所选元素的文本内容</td></tr><tr><td>.html()</td><td>设置或返回所选元素的内容（包括 HTML 标记）</td></tr><tr><td>.val()</td><td>设置或返回表单字段的值</td></tr><tr><td>.attr()</td><td>设置或返回属性值</td></tr></tbody></table><p><code>text()</code>、<code>html()</code> 以及 <code>val()</code>，拥有回调函数，回调函数由两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。</p><ul><li>添加</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.append()</td><td>在被选元素的结尾插入内容</td></tr><tr><td>.prepend()</td><td>在被选元素的开头插入内容</td></tr><tr><td>.after()</td><td>在被选元素之后插入内容</td></tr><tr><td>.before()</td><td>在被选元素之前插入内容</td></tr></tbody></table><ul><li>删除</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.remove()</td><td>删除被选元素（及其子元素）</td></tr><tr><td>.empty()</td><td>从被选元素中删除子元素</td></tr><tr><td>remove()</td><td>方法也可接受一个参数，允许对被删元素进行过滤</td></tr></tbody></table><ul><li>获取并设置 CSS 类</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.addClass()</td><td>向被选元素添加一个或多个类</td></tr><tr><td>.removeClass()</td><td>从被选元素删除一个或多个类</td></tr><tr><td>.toggleClass()</td><td>对被选元素进行添加/删除类的切换操作</td></tr><tr><td>.css()</td><td>设置或返回样式属性</td></tr></tbody></table><ul><li>尺寸</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.width()</td><td>设置或返回元素的宽度（不包括内边距、边框或外边距）</td></tr><tr><td>.height()</td><td>设置或返回元素的高度（不包括内边距、边框或外边距）</td></tr><tr><td>.innerWidth()</td><td>返回元素的宽度（包括内边距）</td></tr><tr><td>.innerHeight()</td><td>返回元素的高度（包括内边距）</td></tr><tr><td>.outerWidth()</td><td>返回元素的宽度（包括内边距和边框）</td></tr><tr><td>.outerHeight()</td><td>返回元素的高度（包括内边距和边框）</td></tr></tbody></table><h3 id="_06-遍历" tabindex="-1"><a class="header-anchor" href="#_06-遍历" aria-hidden="true">#</a> 06 - 遍历</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.parent()</td><td>返回被选元素的直接父元素</td></tr><tr><td>.parents()</td><td>返回被选元素的所有祖先元素，它一路向上直到文档的根元素 ()，可以使用可选参数来过滤对祖先元素的搜索</td></tr><tr><td>.parentsUntil()</td><td>返回介于两个给定元素之间的所有祖先元素</td></tr><tr><td>.children()</td><td>返回被选元素的所有直接子元素，可以使用可选参数来过滤对子元素的搜索</td></tr><tr><td>.find()</td><td>返回被选元素的后代元素，一路向下直到最后一个后代</td></tr><tr><td>.siblings()</td><td>返回被选元素的所有同胞元素</td></tr><tr><td>.next()</td><td>返回被选元素的下一个同胞元素，prev() 反向</td></tr><tr><td>.nextAll()</td><td>返回被选元素的所有跟随的同胞元素，prevAll() 反向</td></tr><tr><td>.nextUntil()</td><td>返回介于两个给定参数之间的所有跟随的同胞元素，prevUntil() 反向</td></tr><tr><td>过滤：</td><td></td></tr><tr><td>.first()</td><td>返回被选元素的首个元素</td></tr><tr><td>.last()</td><td>返回被选元素的最后一个元素</td></tr><tr><td>.eq()</td><td>返回被选元素中带有指定索引号的元素</td></tr><tr><td>.filter()</td><td>不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回，.not() 与之相反</td></tr></tbody></table><h3 id="_07-ajax" tabindex="-1"><a class="header-anchor" href="#_07-ajax" aria-hidden="true">#</a> 07 - AJAX</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>$(selector).load(URL,data,callback);</td><td>从服务器加载数据，并把返回的数据放入被选元素中</td></tr><tr><td>$.get(URL,callback);</td><td>通过 HTTP GET 请求从服务器上请求数据</td></tr><tr><td>$.post(URL,data,callback);</td><td>通过 HTTP POST 请求从服务器上请求数据</td></tr></tbody></table><ul><li>回调函数可以设置不同的参数：<code>_responseTxt_</code> - 包含调用成功时的结果内容；<code>_statusTXT_</code> - 包含调用的状态；<code>_xhr_</code> - 包含 <code>XMLHttpRequest</code> 对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// GET</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:8080/jquery-server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// POST</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:8080/jquery-server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 通用方法</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://127.0.0.1:8080/jquery-server&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 成功的回调</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 超时时间</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>
    <span class="token comment">// 失败的回调</span>
    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;出错了！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 头信息</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
      <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">400</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、canvas" tabindex="-1"><a class="header-anchor" href="#八、canvas" aria-hidden="true">#</a> 八、Canvas</h2><p>待更新...</p><h2 id="九、echarts" tabindex="-1"><a class="header-anchor" href="#九、echarts" aria-hidden="true">#</a> 九、Echarts</h2><p>待更新...</p>`,136);function h(y,f){const t=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[d,r,n("li",null,[s("使用一个轻便的承诺包装器 "),n("a",k,[s("https://github.com/jakearchibald/idb"),e(t)]),s(" 。它使用 promisified IndexedDB 方法创建全局 idb 对象，可以不使用 onsuccess/onerror，而是这样写：")])]),v,n("ul",null,[m,n("li",null,[n("a",b,[s("跨源资源共享（CORS） - HTTP | MDN (mozilla.org)"),e(t)])])]),g])}const x=p(i,[["render",h],["__file","c-javascript.html.vue"]]);export{x as default};
