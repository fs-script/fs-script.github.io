import{_ as e,o as i,c as l,e as d}from"./app.b32f6c43.js";const c={},a=d('<h2 id="一、基础" tabindex="-1"><a class="header-anchor" href="#一、基础" aria-hidden="true">#</a> 一、基础</h2><blockquote><p>添加了类型系统的 JavaScript，使其成为静态类型语言（动态类型指的是运行才会进行类型检查确定变量的类型，而静态类型在编译阶段就会进行类型检查）<br>因为存在隐式类型转换所有 TS 是弱类型的，强类型语言不存在隐式转换时需要强制类型转换。</p></blockquote><ul><li><code>:</code> 指定变量的类型，主要针对编译时的类型检查，运行时还需要代码手动判断类型。</li></ul><h3 id="_01-原始数据类型" tabindex="-1"><a class="header-anchor" href="#_01-原始数据类型" aria-hidden="true">#</a> 01 - 原始数据类型</h3><ul><li><code>:boolean</code>、构造函数 <code>Boolean</code></li><li><code>:number</code>、构造函数 <code>Number</code></li><li><code>:string</code>、构造函数 <code>String</code></li><li><code>:null</code></li><li><code>:undefined</code></li><li><code>:void</code> 表示没有任何返回值的函数。</li></ul><h3 id="_02-任意值" tabindex="-1"><a class="header-anchor" href="#_02-任意值" aria-hidden="true">#</a> 02 - 任意值</h3><ul><li><code>:any</code> 变量声明的时候未指明其类型，那将会被识别为任意值类型。</li></ul><h3 id="_03-类型推论" tabindex="-1"><a class="header-anchor" href="#_03-类型推论" aria-hidden="true">#</a> 03 - 类型推论</h3><ul><li>没有明确指定类型时，会根据初始化的值进行类型推论。</li></ul><h3 id="_04-联合类型" tabindex="-1"><a class="header-anchor" href="#_04-联合类型" aria-hidden="true">#</a> 04 - 联合类型</h3><ul><li>取值可以为多种类型之一，例如 <code>string | number</code></li><li>联合类型只能访问共有的属性和方法。</li><li>联合类型，在被赋值后，会进行类型推断。</li></ul><h3 id="_05-对象的类型-接口" tabindex="-1"><a class="header-anchor" href="#_05-对象的类型-接口" aria-hidden="true">#</a> 05 - 对象的类型-接口</h3><ul><li><code>interface Person { name: string, age: number}</code></li><li><code>let tom: Person = { name: &#39;Tom&#39;, age: 18 }</code></li><li>赋值时变量的形状必须和接口的形状保持一致</li><li><code>?:</code> 可选属性，该属性可以不存在，但不可以添加未定义的属性。</li><li><code>[propName:string]: any</code> 任意属性，定义了任意属性那么确定属性和可选属性的类型必须是它的类型的子集。</li><li>任意属性只能定义一个，可以使用联合类型。前提是属性名和任意值设定的类型相同时即 <code>[proName:string]</code> 时符合，<code>[proName:number]</code> 时，其他属性的属性名为 <code>string</code> 可不受约束。</li><li><code>readonly id: number</code> 只读属性，只在创建的时候被赋值。</li></ul><h3 id="_06-数组的类型" tabindex="-1"><a class="header-anchor" href="#_06-数组的类型" aria-hidden="true">#</a> 06 - 数组的类型</h3><ul><li><code>:number[] = ...</code> 数组对应的方法也会收到类型约束。</li><li><code>Array&lt;number&gt; = ...</code> 数组泛型。</li><li>也可以使用接口表示数组，但常用于表示类数组。</li><li><code>let args: { [index: number]: number; length: number; callee: Function; } = arguments </code></li><li><code>:IArguments</code> <code>:NodeList</code> <code>:HTMLCollection</code></li><li><code>:any[] = ...</code> 数组中可以出现任意类型。</li></ul><h3 id="_07-函数的类型" tabindex="-1"><a class="header-anchor" href="#_07-函数的类型" aria-hidden="true">#</a> 07 - 函数的类型</h3><ul><li>函数是 JS 中的一等民</li><li>函数声明：<code>function sum(x: number, y: number): number { return ...}</code> 设置了输入输出的类型。</li><li>函数表达式：<code>let sum: (x: number, y: number)=&gt; number = function(x: number, y: number): number { return ... }</code></li><li>通过接口的方式定义函数的形状，<code>interface sum { ...: ..., ...: ... }: ...</code></li><li><code>?:</code> 规定可选参数，可以不传入的参数，此属性后面不可再设置必须参数。</li><li>TS 将默认参数识别为可选参数，不受其后是必须参数的约束。</li><li><code>...rest</code> 参数，使用数组类型。</li><li>通过联合类型可以实现函数的重载，多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</li></ul><h3 id="_08-类型断言" tabindex="-1"><a class="header-anchor" href="#_08-类型断言" aria-hidden="true">#</a> 08 - 类型断言</h3><ul><li>可以用来手动指定一个值的类型。</li><li><code>值 as 类型</code> <code>&lt;类型&gt;值</code> 建议使用第一种。</li><li>联合类型可以被断言为其中的一个类型。</li><li>父类可以断言为子类。</li><li>任何一个类型可以断言为 <code>any</code>，访问任何属性都是允许的，也可以将 <code>any</code> 断言为一个具体的类型。</li><li>要 A 可以断言为 B，只要 A 兼容 B 或 B 兼容 A 即可，（具有兼容性时才可以断言）</li><li>万不得已不要使用双重断言。</li><li>类型断言不是类型转换，不会影响到真的变量类型，只影响 TS 的编译。</li><li>类型声明优于类型断言，更加严格。</li></ul><h3 id="_09-声明文件" tabindex="-1"><a class="header-anchor" href="#_09-声明文件" aria-hidden="true">#</a> 09 - 声明文件</h3><ul><li><code>declare var/let/const</code> 声明全局变量。</li><li><code>declare function</code> 声明全局方法。</li><li><code>declare class</code> 声明全局类。</li><li><code>declare enum</code> 声明全局枚举类型。</li><li><code>declare namespace</code> 声明全局对象，可嵌套。</li><li><code>interface 和 type</code> 声明全局类型。</li><li><code>export</code> 导出全局变量。</li><li><code>export namespace</code> 导出全局对象。</li><li><code>export default</code> ES6 默认导出。</li><li><code>export = </code> CommonJS 导出模块。</li><li><code>export as namespace</code> UMD 库声明全局变量。</li><li><code>declare global</code> 扩展全局变量。</li><li><code>declare module</code> 扩展模块。</li><li><code>/// &lt;reference /&gt;</code> 三斜线指令。</li><li>用来定义类型而不是具体的值或者实现。</li><li>声明文件：xxx.d.ts</li><li>安装对对应的声明文件：<code>npm install @type/... --save-dev</code></li><li>只有 <code>function/class/interface</code> 可以直接默认导出。</li></ul><h3 id="_10-内置对象" tabindex="-1"><a class="header-anchor" href="#_10-内置对象" aria-hidden="true">#</a> 10 - 内置对象</h3><ul><li><p><code>:Boolean</code></p></li><li><p><code>:Error</code></p></li><li><p><code>:Date</code></p></li><li><p><code>:RegExp</code></p></li><li><p>TypeScript 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</p></li><li><p>Node.js 不是内置对象的一部分，需要引入第三方声明 <code>npm install @type/node --save-dev</code></p></li></ul><h3 id="_11-类型别名" tabindex="-1"><a class="header-anchor" href="#_11-类型别名" aria-hidden="true">#</a> 11 - 类型别名</h3><ul><li>使用 <code>type</code> 给一个类型起个新名字，多用于联合类型。</li><li><code>type Name = string</code></li></ul><h3 id="_12-字符串字面量类型" tabindex="-1"><a class="header-anchor" href="#_12-字符串字面量类型" aria-hidden="true">#</a> 12 - 字符串字面量类型</h3><ul><li>用来约束取值只能是字符串中的一个。</li><li><code>type EventNames = &#39;click&#39; | &#39;scroll&#39; | &#39;mousemove&#39;</code></li></ul><h3 id="_13-元组" tabindex="-1"><a class="header-anchor" href="#_13-元组" aria-hidden="true">#</a> 13 - 元组</h3><ul><li>数组合并了相同类型的对象，元组合并的是不同类型的对象。</li><li><code>let tom: [string, number] = [&#39;Tom&#39;, 25]</code></li><li>越界时被限定为元组中每个类型的联合类型。</li></ul><h3 id="_14-枚举" tabindex="-1"><a class="header-anchor" href="#_14-枚举" aria-hidden="true">#</a> 14 - 枚举</h3><ul><li><code>enum Days {Sun, Mon, Tue, Web, Thu, Fri, Sat}</code> 成员被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名反向映射，也可以为枚举项手动赋值。</li><li>常数枚举 <code>const enum</code> 会在编译阶段被删除且不能包含计算成员。</li><li>外部枚举 <code>declare enum</code></li></ul><h3 id="_15-类" tabindex="-1"><a class="header-anchor" href="#_15-类" aria-hidden="true">#</a> 15 - 类</h3><ul><li>修饰符 <code>public private protected</code></li><li><code>readonly</code></li><li><code>abstract class</code> 抽象类不允许被实例化，只能被继承，其中的抽象方法必须在子类被实现。</li></ul><h3 id="_16-类与接口" tabindex="-1"><a class="header-anchor" href="#_16-类与接口" aria-hidden="true">#</a> 16 - 类与接口</h3><ul><li><code>implements 接口</code> 类中实现接口，一个类可以实现多个接口。</li><li>接口可以继承接口</li><li>TS 支持接口继承类，因为类在创建的同时还创建了一个同名的类型（只包含实例属性和方法）</li></ul><h3 id="_17-泛型" tabindex="-1"><a class="header-anchor" href="#_17-泛型" aria-hidden="true">#</a> 17 - 泛型</h3><ul><li>Generics 在定义函数、接口、类的时候不预先指定具体的类型而是在使用的时候再指定类型的一种特性。</li><li><code>&lt;T&gt;</code> T 指代任意输入的类型。</li><li>可以设置多个类型参数<code>&lt;T, U&gt;</code></li><li>对泛型进行约束 <code>&lt;T extends 接口&gt;</code></li><li>泛型接口</li><li>泛型类</li><li>默认类型 <code>&lt;T = string&gt;</code></li></ul><h3 id="_18-声明合并" tabindex="-1"><a class="header-anchor" href="#_18-声明合并" aria-hidden="true">#</a> 18 - 声明合并</h3><ul><li>函数、接口、类</li></ul><h2 id="二、进阶" tabindex="-1"><a class="header-anchor" href="#二、进阶" aria-hidden="true">#</a> 二、进阶</h2><p>待更新...</p>',41),o=[a];function r(n,t){return i(),l("div",null,o)}const u=e(c,[["render",r],["__file","d-typescript.html.vue"]]);export{u as default};
