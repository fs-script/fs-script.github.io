import{_ as n,o as s,c as a,e as t}from"./app.b32f6c43.js";const p={},e=t(`<h2 id="一、node" tabindex="-1"><a class="header-anchor" href="#一、node" aria-hidden="true">#</a> 一、Node</h2><h3 id="_01-nvm-的使用" tabindex="-1"><a class="header-anchor" href="#_01-nvm-的使用" aria-hidden="true">#</a> 01 - nvm 的使用</h3><ul><li><p>列出所有的可用版本，已安装的和可安装的： <code>nvm ls</code>、<code>nvm ls available</code></p></li><li><p>安装 nodejs： <code>nvm install 版本号</code></p></li><li><p>切换版本： <code>nvm use 版本号</code></p></li></ul><h3 id="_02-fs-文件系统模块" tabindex="-1"><a class="header-anchor" href="#_02-fs-文件系统模块" aria-hidden="true">#</a> 02 - fs 文件系统模块</h3><ul><li>作用：用来操作文件。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>fs.readFile(path[, options], callback);</td><td>读取指定文件的内容，回调函数接收失败和成功的参数</td></tr><tr><td>fs.writeFile(file, data[, option], callback);</td><td>给指定的文件写入内容</td></tr></tbody></table><ul><li><code>fs.writeFile()</code> 方法只能创建文件，不能创建路径。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./text.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 读取成功时 err 的值为 null</span>
  <span class="token comment">// 读取失败时 err 的值为错误对象</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;----------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 读取成功时 dataStr 的值为文件的内容</span>
  <span class="token comment">// 读取失败时 dataStr 的值为 undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> txt <span class="token operator">=</span> <span class="token string">&quot;会当临绝顶，一览众山小&quot;</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&quot;./writeText.txt&quot;</span><span class="token punctuation">,</span> txt<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>路径拼接问题：</strong></p><ul><li>默认情况下会在命令执行的目录下拼接代码中的相对路径，可能会出现拼接错误，解决方法可以使用完整的绝对路径，但是不利于移植，不利于维护。在 nodejs 中 <code>__dirname</code> 表示当前文件所处的目录，可以解决路径拼接可能出现的错误，利于维护和移植。</li></ul><h3 id="_03-path-路径模块" tabindex="-1"><a class="header-anchor" href="#_03-path-路径模块" aria-hidden="true">#</a> 03 - path 路径模块</h3><ul><li>作用：路径处理的需求。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>path.join([...paths])</td><td>将多个路径片段拼接成一个完整的路径字符串，返回值为拼接好的字符串</td></tr><tr><td>path.basename(path[, ext])</td><td>获取文件的最后一部分，用作从路径字符串中将文件名解析出来</td></tr><tr><td>path.extname()</td><td>获取路径中扩展名部分</td></tr></tbody></table><ul><li><p><code>../</code> 将会抵消一层路径。</p></li><li><p>文件路径的书写使用 <code>join</code> 而不建议 <code>+</code> 拼接。</p></li></ul><h3 id="_04-http-模块" tabindex="-1"><a class="header-anchor" href="#_04-http-模块" aria-hidden="true">#</a> 04 - http 模块</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>http.createServer()</td><td>创建一个web服务器实例</td></tr><tr><td>server.on(&#39;request&#39;, (req, res) =&gt; {})</td><td>监听客户端发来的网络请求</td></tr><tr><td>req.url</td><td>客户端请求的URL地址</td></tr><tr><td>req.method</td><td>客户端的 method 请求类型</td></tr><tr><td>res.end</td><td>向客户端发送指定的内容，并结束这次请求处理的过程</td></tr><tr><td>server.listen(端口号， 回调)</td><td>启动web服务</td></tr></tbody></table><ul><li><code>req</code> 是请求对象，包含了与客户端相关的数据和属性。</li><li><code>res</code> 是响应对象，包含了与服务器相关的数据和属性。</li><li>解决 <code>res</code> 中文乱码，设置响应头 <code>res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=utf-8&#39;)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎访问服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务器地址：http:127.0.0.1:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根据不同的 URL 响应不同的 html 内容。</li></ul><h3 id="_05-模块化" tabindex="-1"><a class="header-anchor" href="#_05-模块化" aria-hidden="true">#</a> 05 - 模块化</h3><ul><li>遵守固定的规则，把一个大文件拆分成独立并且相互依赖的多个小模块。</li><li>Node 中的3类模块：内置模块、自定义模块、第三方模块。</li><li>加载模块：使用 <code>require()</code> 方法。</li><li>模块存在模块作用域。</li><li>向外共享模块作用域中的成员，<code>module</code> 对象。使用 <code>module.exports</code> 对象将模块成员共享出去供外界使用，外界使用 <code>require()</code> 方法导入自定义模块时得到的就是 <code>module.exports</code> 所指向的对象。</li><li><code>exports</code> 和 <code>module.exports</code> 指向同一个对象，最终共享的结果以 <code>module.exports</code> 指向的对象为准。</li><li>CommonJS 模块化规范，规定了模块的特性和各模块之间如何相互依赖：① 每个模块内部 <code>module</code> 变量代表当前模块；② <code>module</code> 变量是一个对象，其中的 <code>exports</code> 属性是对外的接口，该属性是一个对象；③ 加载某个模块就是加载该模块的 <code>module.exports</code> 属性，<code>require()</code> 方法用于加载模块。</li></ul><h3 id="_06-包与npm" tabindex="-1"><a class="header-anchor" href="#_06-包与npm" aria-hidden="true">#</a> 06 - 包与npm</h3><ul><li>第三方模块又叫做包。</li><li>npm (Node Package Manager)，包管理工具。</li><li>包分为项目包和全局包，项目包又分为开发依赖包和核心依赖包。</li><li>安装包的命令 <code>npm install 包名</code>，可以简写为 <code>npm i 包名</code>。</li><li>指定版本号安装 <code>npm i 包名@版本号</code> 大版本.功能版本.Bug修复版本。</li><li><code>npm init -y</code> 在所处的目录快速创建 package.json 包管理的配置文件。</li><li><code>npm install</code> 一次安装项目中依赖的包。</li><li><code>npm uninstall 包名</code> 卸载指定的包。</li><li>仅在开发阶段需要使用，线上不再依赖的包使用 <code>npm install --save--dev 包名</code>，可以简写为 <code>npm i -D 包名</code>。</li><li><code>npm install -g 包名</code>，将会在本地的电脑全局安装。</li><li>查看当前的下载源 <code>npm config get registry</code>。</li><li>切换淘宝镜像 <code>npm config set registry=https://registry.npmmirror.com</code>。</li><li>华为源 <code>https://repo.huaweicloud.com/repository/npm/</code>。</li><li>nrm 工具，快速切换镜像源。</li><li>查看所有可用的镜像源 <code>nrm ls</code>。</li><li>将镜像源切换为xxx <code>nrm use xxx</code>。</li><li><code>npm login</code>，登录服务器。</li><li><code>npm publish</code>，将包发布到 npm。</li><li><code>npm unpublish --force 包名</code>，删除发布的包。</li><li>模块会优先从缓存中加载，模块在第一次加载后会被缓存。</li><li>内置模块得加载优先级是最高的。</li><li>加载自定义模块的时候需要添加 <code>./</code> 或 <code>../</code> 否则会被当做内置模块或者第三方模块。</li></ul><h2 id="二、express" tabindex="-1"><a class="header-anchor" href="#二、express" aria-hidden="true">#</a> 二、Express</h2><h3 id="_01-使用" tabindex="-1"><a class="header-anchor" href="#_01-使用" aria-hidden="true">#</a> 01 - 使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建基本的 web 服务器</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;express server running at 127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>app.get(&#39;请求URL&#39;， function(req, res) {})</td><td>监听客户端的get请求</td></tr><tr><td>app.post(&#39;请求URL&#39;， function(req, res) {})</td><td>监听客户端的post请求</td></tr><tr><td>res.send()</td><td>将处理好的内容发送给客户端</td></tr><tr><td>req.query</td><td>对象，可以访问客户端通过字符串得形式发送的数据</td></tr><tr><td>req.query.name、 req.query.age</td><td></td></tr><tr><td>req.params</td><td>对象，可以访问到URL中通过 ：匹配到的动态参数，可以匹配多个动态参数</td></tr><tr><td>req.body</td><td>接收客户端发送过来的请求数据，需要配置解析表单的中间件 express.json</td></tr><tr><td>app.use()</td><td>注册全局中间件</td></tr><tr><td>app.use(express.static(&#39;目录&#39;))</td><td>创建一个静态资源服务器，存放静态资源的文件名不会出现在URL中</td></tr></tbody></table><ul><li>托管多个静态资源，即多次调用 <code>express.static()</code>，根据顺序查找需要的文件</li><li>挂载路径前缀，访问时就需要使用挂载的前缀，<code>app.use(&#39;/前缀&#39;, express.static(&#39;/路径&#39;))</code></li><li><code>nodemon</code> 监听代码修改，自动重启项目。使用 <code>nodemon app.js</code></li></ul><h3 id="_02-路由" tabindex="-1"><a class="header-anchor" href="#_02-路由" aria-hidden="true">#</a> 02 - 路由</h3><ul><li>广义上，路由就是映射关系。</li><li>Express 中的路由指的是客户端的请求与服务器处理函数之间的映射关系。</li><li>路由分为三部分，客户端请求的类型、客户端请求的 URL 地址、服务器端的处理函数，<code>app.METHOD(PATH, HANDLER)</code></li><li>路由匹配按照定义的先后顺序进行匹配，请求类型和请求的 URL 同时匹配成功，才会调用对应的处理函数。</li><li>模块化路由，不建议将路由挂载到 app 上，而是推荐将理由抽离为单独的模块。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/user/list&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Get user list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/user/add&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Add new user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为路由模块添加前缀 <code>app.use(&#39;/api&#39;, router);</code></li></ul><h3 id="_03-中间件" tabindex="-1"><a class="header-anchor" href="#_03-中间件" aria-hidden="true">#</a> 03 - 中间件</h3><ul><li>中间件（Middleware）,特指业务流程中的中间处理环节。对请求进行预处理。</li><li>Express 中间件本质上是一个 function 处理函数。中间件函数的形参列表中，必须包含 <code>next</code> 函数，而路由处理函数只包含 <code>req</code> 和 <code>res</code></li><li><code>next</code> 函数是实现多个中间件连续调用的关键，表示把流转关系转交给下一个中间件或路由。</li><li>定义中间件函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建最基础的中间件函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">mv</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;定义了一个最简单的中间件函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 把流转关系转交给下一个中间件或路由</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 将 mv 注册为全局中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Home page.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;User page.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>全局中间件：客户端发起的任何请求，到达服务器之后都会触发的中间件，<code>app.use()</code></li><li>中间件的作用：多个中间件之间共享一份 <code>req</code> 和 <code>res</code>，可以在上游中间件中统一为 <code>req</code> 或 <code>res</code> 对象添加自定义的属性和方法，供下游的中间件或路由使用。</li><li>可以连续定义多个全局中间件，会按照中间件定义的先后顺序依次进行调用。</li><li>局部中间件：不适用 <code>app.use()</code> 定义的中间件。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">mw1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;调用了局部生效中间件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> mw1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Home page&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;User page&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以使用逗号分隔，或者放置一个数组来定义多个局部中间。</li><li>使用中间件的注意事项：① 一定要在路由之前注册中间件（除错误中间件外）；② 客户端发送的请求可以调用多个中间件处理；③ 中间件的业务代码执行完毕之后要调用 <code>next()</code> 函数；④ <code>next()</code> 函数之后不要再添加代码；⑤ 连续调用多个中间件时，多个中间件共享 <code>res</code> 和 <code>req</code> 对象。</li><li>中间件的分类： <ul><li>① 应用级别的中间件；绑定到 app 实例上的中间件。</li><li>② 路由级别的中间件；绑定到 router 实例上的中间件，<code>express.Router()</code></li><li>③ 错误级别的中间件；用来捕获整个项目中发生的异常错误，防止项目异常崩溃的问题 <code>err, req, res, next</code></li><li>④ Express 内置的中间件；<code>express.static</code>快速托管静态资源，<code>express.json</code>解析JSON格式的请求数据，<code>express.urlencoded</code>解析 URL-encoded 格式的请求数据。 ⑤ 第三方的中间件。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;服务器内部发生错误&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Home page.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 错误级别中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;发生了错误：&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析 json 格式数据的中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解析url-encoded 格式的数据</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 不配置中间件，则 req.body 默认为 undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/book&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 导入nodejs内置的模块</span>
<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;querystring&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 自定义中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 功能：解析表单数据</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    str <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(str);</span>
    <span class="token keyword">const</span> body <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log(body);</span>

    req<span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>

    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_04-接口" tabindex="-1"><a class="header-anchor" href="#_04-接口" aria-hidden="true">#</a> 04 - 接口</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 导入路由模块</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./02_apiRouter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置解析表单的中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册路由模块</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;http://1270.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//------------------------------------</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 挂载对应的路由</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/get&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> query <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>

  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 0表示处理成功，1表示处理失败</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;GET请求成功&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 状态描述</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> query<span class="token punctuation">,</span> <span class="token comment">// 需要响应给客户端的数据</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/post&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>

  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;POST请求成功&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> body<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>CORS 跨域资源共享解决方法：CORS 主流的解决方案；JSONP 只支持GET请求</li><li><code>npm install cors</code>、<code>const cors = require(&#39;cors&#39;);</code>、<code>app.use(cors());</code></li><li>CORS 主要在服务器端进行配置</li></ul><table><thead><tr><th>CORS 响应头</th><th>描述</th></tr></thead><tbody><tr><td>Access-Control-Allow-Origin: | *</td><td>其中指定允许访问该资源的外域URL * 表示允许任何域的请求</td></tr><tr><td>Access-Control-Allow-Headers</td><td>默认支持客户端发送9个请求头，额外的请求需要在服务器端进行声明</td></tr><tr><td>Access-Control-Allow-Methods | *</td><td>默认仅支持客户端发起GET POST HEAD 请求，额外的请求方法需要在服务器端声明</td></tr></tbody></table><ul><li>CORS 请求分类，根据请求方式和请求头的不同，可以分为两大类： <ul><li>简单请求：① 请求的方式：<code>GET POST HEAD</code> 三者之一；② HTTP 头部信息不超过以下几种字段：无自定义头部字段、<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>DPR</code>、<code>Downlink</code>、<code>Save-Data</code>、<code>viewport-Width</code>、<code>Width</code>、<code>Content-Type</code>(只有三个值 <code>application/x-www-form-urlencode</code>、<code>multipart/form-data</code>、<code>text/plain</code>)</li><li>预检请求：① 上诉三者请求之外的请求方式；② 请求头中包含自定义头部字段；③ 向服务器发送了 <code>application/json</code> 格式的数据 正式通信之前会发送一个OPTION请求进行预检，获知服务器是否允许该实际请求，响应成功之后才会发送真正的请求，并携带真实数据</li><li>两种请求的区别：简单请求只发送一次请求；预检请求会发生两次请求。</li></ul></li><li>JSONP 接口，浏览器端通过。</li></ul><h3 id="_05-rest-api" tabindex="-1"><a class="header-anchor" href="#_05-rest-api" aria-hidden="true">#</a> 05 - REST API</h3><ul><li>RESTful API：充满了“具体的状态转移”的API</li><li>Representational State Transfer：表述/具体的状态转移。</li><li>Representational 状态通过 Method 表达，请求和响应的类型通过 Content-Type 表达。 <ul><li>Method：POST、GET、DELETE、PUT、PATCH、HEAD、OPTIONS... 30+</li><li>Content-Type：.avi .bin .css ....</li><li>StatusCode：100、101、103、200...</li></ul></li><li>总结：通过语义化的方式请求资源 URL，并根据返回的语义来判断本次操作的返回类型和效果。</li></ul><h2 id="三、koa" tabindex="-1"><a class="header-anchor" href="#三、koa" aria-hidden="true">#</a> 三、Koa</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ctx</code> 上下文对象，封装了 <code>req res</code>， <code>app.context</code> 是其创建原型，可以编辑为 <code>ctx</code> 添加其他属性。</li></ul>`,52),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","e-node.html.vue"]]);export{r as default};
